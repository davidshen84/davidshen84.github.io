(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{4:function(t,e){},5:function(t,e){},6:function(t,e){},7:function(t,e){},8:function(t,e){},B9Yq:function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},EhIR:function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function u(t,e){var n=new i(t),r=e&&e.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(e,n,e,s))||(s.exports=r):this.alea=u}(0,t,n("B9Yq"))}).call(this,n("YuTi")(t))},PDX0:function(t,e){(function(e){t.exports=e}).call(this,{})},YSVl:function(t,e,n){var r=n("EhIR"),s=n("uDiL"),a=n("pJ6O"),i=n("yuCN"),o=n("euyF"),u=n("ie1u"),l=n("pJ3+");l.alea=r,l.xor128=s,l.xorwow=a,l.xorshift7=i,l.xor4096=o,l.tychei=u,t.exports=l},YqoJ:function(t,e,n){"use strict";n.r(e),n.d(e,"TfjsModuleNgFactory",(function(){return Xx}));var r={};n.r(r),n.d(r,"shuffle",(function(){return it})),n.d(r,"clamp",(function(){return ot})),n.d(r,"nearestLargerEven",(function(){return ut})),n.d(r,"sum",(function(){return lt})),n.d(r,"randUniform",(function(){return ct})),n.d(r,"distSquared",(function(){return ht})),n.d(r,"assert",(function(){return dt})),n.d(r,"assertShapesMatch",(function(){return pt})),n.d(r,"assertNonNull",(function(){return ft})),n.d(r,"flatten",(function(){return mt})),n.d(r,"sizeFromShape",(function(){return gt})),n.d(r,"isScalarShape",(function(){return yt})),n.d(r,"arraysEqual",(function(){return bt})),n.d(r,"isInt",(function(){return xt})),n.d(r,"tanh",(function(){return wt})),n.d(r,"sizeToSquarishShape",(function(){return vt})),n.d(r,"createShuffledIndices",(function(){return Ct})),n.d(r,"rightPad",(function(){return St})),n.d(r,"repeatedTry",(function(){return Nt})),n.d(r,"inferFromImplicitShape",(function(){return It})),n.d(r,"parseAxisParam",(function(){return kt})),n.d(r,"squeezeShape",(function(){return $t})),n.d(r,"getTypedArrayFromDType",(function(){return Et})),n.d(r,"getArrayFromDType",(function(){return At})),n.d(r,"checkConversionForErrors",(function(){return Rt})),n.d(r,"isValidDtype",(function(){return Tt})),n.d(r,"hasEncodingLoss",(function(){return Dt})),n.d(r,"isTypedArray",(function(){return Ft})),n.d(r,"bytesPerElement",(function(){return _t})),n.d(r,"bytesFromStringArray",(function(){return Ot})),n.d(r,"isString",(function(){return Mt})),n.d(r,"isBoolean",(function(){return zt})),n.d(r,"isNumber",(function(){return Lt})),n.d(r,"inferDtype",(function(){return Bt})),n.d(r,"isFunction",(function(){return Pt})),n.d(r,"nearestDivisor",(function(){return Wt})),n.d(r,"computeStrides",(function(){return Vt})),n.d(r,"toTypedArray",(function(){return Ut})),n.d(r,"toNestedArray",(function(){return Gt})),n.d(r,"makeOnesTypedArray",(function(){return qt})),n.d(r,"makeZerosTypedArray",(function(){return Ht})),n.d(r,"now",(function(){return jt})),n.d(r,"assertNonNegativeIntegerDimensions",(function(){return Kt})),n.d(r,"fetch",(function(){return Xt})),n.d(r,"encodeString",(function(){return Yt})),n.d(r,"decodeString",(function(){return Jt})),n.d(r,"locToIndex",(function(){return Zt})),n.d(r,"indexToLoc",(function(){return Qt}));var s={};n.r(s),n.d(s,"makeTypesMatch",(function(){return xe})),n.d(s,"assertTypesMatch",(function(){return we})),n.d(s,"isTensorInList",(function(){return ve})),n.d(s,"getTensorsInContainer",(function(){return Ce}));var a={};n.r(a),n.d(a,"isMobile",(function(){return ke})),n.d(a,"isBrowser",(function(){return $e}));var i={};n.r(i),n.d(i,"assertParamsValid",(function(){return Js})),n.d(i,"maskToAxes",(function(){return Zs})),n.d(i,"computeOutShape",(function(){return Qs})),n.d(i,"stridesWithElidedDims",(function(){return ta})),n.d(i,"startIndicesWithElidedDims",(function(){return ea})),n.d(i,"stopIndicesWithElidedDims",(function(){return na})),n.d(i,"stridesForAxis",(function(){return ra})),n.d(i,"startForAxis",(function(){return sa})),n.d(i,"stopForAxis",(function(){return aa})),n.d(i,"isSliceContinous",(function(){return ia})),n.d(i,"computeFlatOffset",(function(){return oa}));var o={};n.r(o),n.d(o,"copyModel",(function(){return Oa})),n.d(o,"listModels",(function(){return Fa})),n.d(o,"moveModel",(function(){return Ma})),n.d(o,"removeModel",(function(){return _a})),n.d(o,"browserFiles",(function(){return ni})),n.d(o,"browserHTTPRequest",(function(){return hi})),n.d(o,"concatenateArrayBuffers",(function(){return va})),n.d(o,"decodeWeights",(function(){return ya})),n.d(o,"encodeWeights",(function(){return ga})),n.d(o,"fromMemory",(function(){return fi})),n.d(o,"getLoadHandlers",(function(){return Aa})),n.d(o,"getModelArtifactsInfoForJSON",(function(){return Sa})),n.d(o,"getSaveHandlers",(function(){return Ea})),n.d(o,"http",(function(){return ci})),n.d(o,"isHTTPScheme",(function(){return ui})),n.d(o,"loadWeights",(function(){return ai})),n.d(o,"registerLoadRouter",(function(){return $a})),n.d(o,"registerSaveRouter",(function(){return ka})),n.d(o,"weightsLoaderFactory",(function(){return ii})),n.d(o,"withSaveHandler",(function(){return mi}));var u={};n.r(u),n.d(u,"toPixels",(function(){return bi})),n.d(u,"fromPixels",(function(){return xi}));var l={};n.r(l),n.d(l,"Serializable",(function(){return Ni})),n.d(l,"SerializationMap",(function(){return Ii})),n.d(l,"registerClass",(function(){return ki}));var c={};n.r(c),n.d(c,"segOpComputeOptimalWindowSize",(function(){return Uo})),n.d(c,"computeOutShape",(function(){return Go})),n.d(c,"collectGatherOpShapeInfo",(function(){return qo}));var h={};n.r(h),n.d(h,"fft",(function(){return ku})),n.d(h,"ifft",(function(){return $u})),n.d(h,"rfft",(function(){return Eu})),n.d(h,"irfft",(function(){return Au}));var d={};n.r(d),n.d(d,"hannWindow",(function(){return _u})),n.d(d,"hammingWindow",(function(){return Ou})),n.d(d,"frame",(function(){return Mu})),n.d(d,"stft",(function(){return zu}));var p={};n.r(p),n.d(p,"Reduction",(function(){return Bu})),n.d(p,"absoluteDifference",(function(){return Pu})),n.d(p,"computeWeightedLoss",(function(){return Wu})),n.d(p,"cosineDistance",(function(){return Vu})),n.d(p,"hingeLoss",(function(){return Uu})),n.d(p,"huberLoss",(function(){return Gu})),n.d(p,"logLoss",(function(){return qu})),n.d(p,"meanSquaredError",(function(){return Hu})),n.d(p,"sigmoidCrossEntropy",(function(){return ju})),n.d(p,"softmaxCrossEntropy",(function(){return Ku}));var f={};n.r(f),n.d(f,"bandPart",(function(){return Yu})),n.d(f,"gramSchmidt",(function(){return Ju})),n.d(f,"qr",(function(){return Zu}));var m={};n.r(m),n.d(m,"nonMaxSuppression",(function(){return ul})),n.d(m,"resizeBilinear",(function(){return ll})),n.d(m,"resizeNearestNeighbor",(function(){return cl})),n.d(m,"nonMaxSuppressionAsync",(function(){return hl})),n.d(m,"nonMaxSuppressionWithScore",(function(){return dl})),n.d(m,"nonMaxSuppressionWithScoreAsync",(function(){return pl})),n.d(m,"cropAndResize",(function(){return fl}));var g={};n.r(g),n.d(g,"matMul",(function(){return xl})),n.d(g,"conv2d",(function(){return wl})),n.d(g,"depthwiseConv2d",(function(){return vl}));var y={};n.r(y),n.d(y,"add",(function(){return Le})),n.d(y,"addN",(function(){return _i})),n.d(y,"atan2",(function(){return Oi})),n.d(y,"avgPool",(function(){return Mi})),n.d(y,"avgPool3d",(function(){return zi})),n.d(y,"batchToSpaceND",(function(){return Gs})),n.d(y,"batchNorm",(function(){return Bi})),n.d(y,"batchNorm2d",(function(){return Pi})),n.d(y,"batchNorm3d",(function(){return Wi})),n.d(y,"batchNorm4d",(function(){return Vi})),n.d(y,"broadcastTo",(function(){return Gi})),n.d(y,"clone",(function(){return Ui})),n.d(y,"complex",(function(){return We})),n.d(y,"concat",(function(){return on})),n.d(y,"concat1d",(function(){return qi})),n.d(y,"concat2d",(function(){return Hi})),n.d(y,"concat3d",(function(){return ji})),n.d(y,"concat4d",(function(){return Ki})),n.d(y,"conv1d",(function(){return Xi})),n.d(y,"conv2d",(function(){return Kr})),n.d(y,"conv2dTranspose",(function(){return Yi})),n.d(y,"conv3d",(function(){return Ji})),n.d(y,"conv3dTranspose",(function(){return Zi})),n.d(y,"cumsum",(function(){return ts})),n.d(y,"depthToSpace",(function(){return Qi})),n.d(y,"depthwiseConv2d",(function(){return to})),n.d(y,"diag",(function(){return eo})),n.d(y,"div",(function(){return bn})),n.d(y,"divNoNan",(function(){return no})),n.d(y,"dot",(function(){return ro})),n.d(y,"elu",(function(){return so})),n.d(y,"equal",(function(){return ao})),n.d(y,"eye",(function(){return io})),n.d(y,"fill",(function(){return oo})),n.d(y,"floorDiv",(function(){return yn})),n.d(y,"greater",(function(){return Cs})),n.d(y,"greaterEqual",(function(){return ms})),n.d(y,"imag",(function(){return Ve})),n.d(y,"leakyRelu",(function(){return lo})),n.d(y,"less",(function(){return gs})),n.d(y,"lessEqual",(function(){return Ss})),n.d(y,"localResponseNormalization",(function(){return co})),n.d(y,"matMul",(function(){return Lr})),n.d(y,"max",(function(){return ho})),n.d(y,"maxPool",(function(){return po})),n.d(y,"maxPool3d",(function(){return fo})),n.d(y,"maxPoolWithArgmax",(function(){return mo})),n.d(y,"maximum",(function(){return uo})),n.d(y,"minimum",(function(){return go})),n.d(y,"mod",(function(){return yo})),n.d(y,"mul",(function(){return xn})),n.d(y,"multinomial",(function(){return bo})),n.d(y,"notEqual",(function(){return xo})),n.d(y,"oneHot",(function(){return gi})),n.d(y,"outerProduct",(function(){return wo})),n.d(y,"pad",(function(){return Ys})),n.d(y,"pad1d",(function(){return vo})),n.d(y,"pad2d",(function(){return Co})),n.d(y,"pad3d",(function(){return So})),n.d(y,"pad4d",(function(){return No})),n.d(y,"pool",(function(){return Io})),n.d(y,"pow",(function(){return Ms})),n.d(y,"prelu",(function(){return ko})),n.d(y,"rand",(function(){return $o})),n.d(y,"randomGamma",(function(){return Do})),n.d(y,"randomNormal",(function(){return Fo})),n.d(y,"randomUniform",(function(){return _o})),n.d(y,"real",(function(){return Ue})),n.d(y,"relu",(function(){return Oo})),n.d(y,"relu6",(function(){return Mo})),n.d(y,"selu",(function(){return zo})),n.d(y,"separableConv2d",(function(){return Lo})),n.d(y,"spaceToBatchND",(function(){return Pr})),n.d(y,"split",(function(){return Ur})),n.d(y,"square",(function(){return Pn})),n.d(y,"squaredDifference",(function(){return Bo})),n.d(y,"sub",(function(){return us})),n.d(y,"tile",(function(){return ls})),n.d(y,"truncatedNormal",(function(){return Po})),n.d(y,"booleanMaskAsync",(function(){return Yo})),n.d(y,"reverse",(function(){return Jo})),n.d(y,"reverse1d",(function(){return Zo})),n.d(y,"reverse2d",(function(){return Qo})),n.d(y,"reverse3d",(function(){return tu})),n.d(y,"reverse4d",(function(){return eu})),n.d(y,"slice",(function(){return ua})),n.d(y,"slice1d",(function(){return la})),n.d(y,"slice2d",(function(){return ca})),n.d(y,"slice3d",(function(){return ha})),n.d(y,"slice4d",(function(){return da})),n.d(y,"abs",(function(){return Wn})),n.d(y,"acos",(function(){return Vn})),n.d(y,"acosh",(function(){return Un})),n.d(y,"asin",(function(){return Gn})),n.d(y,"asinh",(function(){return qn})),n.d(y,"atan",(function(){return Hn})),n.d(y,"atanh",(function(){return jn})),n.d(y,"ceil",(function(){return Kn})),n.d(y,"clipByValue",(function(){return Xn})),n.d(y,"cos",(function(){return Yn})),n.d(y,"cosh",(function(){return Jn})),n.d(y,"erf",(function(){return Zn})),n.d(y,"exp",(function(){return Qn})),n.d(y,"expm1",(function(){return tr})),n.d(y,"floor",(function(){return er})),n.d(y,"log",(function(){return nr})),n.d(y,"log1p",(function(){return rr})),n.d(y,"logSigmoid",(function(){return sr})),n.d(y,"neg",(function(){return ar})),n.d(y,"reciprocal",(function(){return ir})),n.d(y,"round",(function(){return or})),n.d(y,"rsqrt",(function(){return ur})),n.d(y,"sigmoid",(function(){return lr})),n.d(y,"sign",(function(){return cr})),n.d(y,"isNaN",(function(){return hr})),n.d(y,"isInf",(function(){return dr})),n.d(y,"isFinite",(function(){return pr})),n.d(y,"sin",(function(){return fr})),n.d(y,"sinh",(function(){return mr})),n.d(y,"softplus",(function(){return gr})),n.d(y,"sqrt",(function(){return yr})),n.d(y,"step",(function(){return br})),n.d(y,"tan",(function(){return xr})),n.d(y,"tanh",(function(){return wr})),n.d(y,"all",(function(){return Rn})),n.d(y,"any",(function(){return Tn})),n.d(y,"argMax",(function(){return Dn})),n.d(y,"argMin",(function(){return Fn})),n.d(y,"logSumExp",(function(){return _n})),n.d(y,"mean",(function(){return On})),n.d(y,"min",(function(){return Mn})),n.d(y,"moments",(function(){return zn})),n.d(y,"sum",(function(){return Ln})),n.d(y,"prod",(function(){return Bn})),n.d(y,"equalStrict",(function(){return nu})),n.d(y,"greaterEqualStrict",(function(){return ru})),n.d(y,"greaterStrict",(function(){return su})),n.d(y,"lessEqualStrict",(function(){return au})),n.d(y,"lessStrict",(function(){return iu})),n.d(y,"notEqualStrict",(function(){return ou})),n.d(y,"addStrict",(function(){return uu})),n.d(y,"divStrict",(function(){return lu})),n.d(y,"maximumStrict",(function(){return cu})),n.d(y,"minimumStrict",(function(){return hu})),n.d(y,"modStrict",(function(){return du})),n.d(y,"mulStrict",(function(){return pu})),n.d(y,"powStrict",(function(){return fu})),n.d(y,"squaredDifferenceStrict",(function(){return mu})),n.d(y,"subStrict",(function(){return gu})),n.d(y,"logicalAnd",(function(){return Rs})),n.d(y,"logicalNot",(function(){return Ts})),n.d(y,"logicalOr",(function(){return Ds})),n.d(y,"logicalXor",(function(){return Fs})),n.d(y,"where",(function(){return _s})),n.d(y,"whereAsync",(function(){return Os})),n.d(y,"buffer",(function(){return un})),n.d(y,"print",(function(){return ln})),n.d(y,"cast",(function(){return cn})),n.d(y,"expandDims",(function(){return hn})),n.d(y,"reshape",(function(){return dn})),n.d(y,"squeeze",(function(){return pn})),n.d(y,"stack",(function(){return fn})),n.d(y,"unstack",(function(){return mn})),n.d(y,"setdiff1dAsync",(function(){return gn})),n.d(y,"linspace",(function(){return nn})),n.d(y,"ones",(function(){return tn})),n.d(y,"range",(function(){return rn})),n.d(y,"scalar",(function(){return He})),n.d(y,"tensor",(function(){return Ge})),n.d(y,"tensor1d",(function(){return je})),n.d(y,"tensor2d",(function(){return Ke})),n.d(y,"tensor3d",(function(){return Xe})),n.d(y,"tensor4d",(function(){return Ye})),n.d(y,"tensor5d",(function(){return Je})),n.d(y,"tensor6d",(function(){return Ze})),n.d(y,"variable",(function(){return Qe})),n.d(y,"zeros",(function(){return en})),n.d(y,"onesLike",(function(){return sn})),n.d(y,"zerosLike",(function(){return an})),n.d(y,"transpose",(function(){return Qr})),n.d(y,"softmax",(function(){return yu})),n.d(y,"logSoftmax",(function(){return bu})),n.d(y,"norm",(function(){return xu})),n.d(y,"gather",(function(){return Ko})),n.d(y,"unsortedSegmentSum",(function(){return Xo})),n.d(y,"basicLSTMCell",(function(){return wu})),n.d(y,"multiRNNCell",(function(){return vu})),n.d(y,"movingAverage",(function(){return Cu})),n.d(y,"stridedSlice",(function(){return Su})),n.d(y,"topk",(function(){return Nu})),n.d(y,"scatterND",(function(){return Iu})),n.d(y,"fft",(function(){return ku})),n.d(y,"ifft",(function(){return $u})),n.d(y,"rfft",(function(){return Eu})),n.d(y,"irfft",(function(){return Au})),n.d(y,"sparseToDense",(function(){return Ru})),n.d(y,"gatherND",(function(){return Tu})),n.d(y,"dropout",(function(){return Du})),n.d(y,"hannWindow",(function(){return _u})),n.d(y,"hammingWindow",(function(){return Ou})),n.d(y,"frame",(function(){return Mu})),n.d(y,"stft",(function(){return zu})),n.d(y,"inTopKAsync",(function(){return Lu})),n.d(y,"op",(function(){return ze})),n.d(y,"image",(function(){return m})),n.d(y,"linalg",(function(){return f})),n.d(y,"losses",(function(){return p})),n.d(y,"spectral",(function(){return h})),n.d(y,"fused",(function(){return g})),n.d(y,"signal",(function(){return d}));var b={};n.r(b),n.d(b,"axesAreInnerMostDims",(function(){return vn})),n.d(b,"combineLocations",(function(){return Cn})),n.d(b,"computeOutAndReduceShapes",(function(){return Sn})),n.d(b,"expandShapeToKeepDim",(function(){return Nn})),n.d(b,"assertAxesAreInnerMostDims",(function(){return In})),n.d(b,"getAxesPermutation",(function(){return kn})),n.d(b,"getUndoAxesPermutation",(function(){return $n})),n.d(b,"getInnerMostAxes",(function(){return En})),n.d(b,"getBroadcastDims",(function(){return Ae})),n.d(b,"getReductionAxes",(function(){return Re})),n.d(b,"assertAndGetBroadcastShape",(function(){return Te})),n.d(b,"assertParamsConsistent",(function(){return Be})),n.d(b,"computeOutShape",(function(){return Pe})),n.d(b,"computePool2DInfo",(function(){return Cr})),n.d(b,"computePool3DInfo",(function(){return Sr})),n.d(b,"computeConv2DInfo",(function(){return Nr})),n.d(b,"computeConv3DInfo",(function(){return Ir})),n.d(b,"computeDefaultPad",(function(){return kr})),n.d(b,"tupleValuesAreOne",(function(){return Tr})),n.d(b,"eitherStridesOrDilationsAreOne",(function(){return Dr})),n.d(b,"convertConv2DDataFormat",(function(){return Fr})),n.d(b,"PARALLELIZE_THRESHOLD",(function(){return Wo})),n.d(b,"computeOptimalWindowSize",(function(){return Vo})),n.d(b,"nonMaxSuppressionV3",(function(){return el})),n.d(b,"nonMaxSuppressionV5",(function(){return nl})),n.d(b,"upcastType",(function(){return ye})),n.d(b,"getReshaped",(function(){return _l})),n.d(b,"getPermuted",(function(){return Ol})),n.d(b,"getReshapedPermuted",(function(){return Ml})),n.d(b,"getSliceBeginCoords",(function(){return zl})),n.d(b,"getSliceSize",(function(){return Ll})),n.d(b,"prepareAndValidate",(function(){return wi})),n.d(b,"validateUpdateShape",(function(){return vi})),n.d(b,"validateInput",(function(){return Ci})),n.d(b,"calculateShapes",(function(){return Si})),n.d(b,"SELU_SCALEALPHA",(function(){return Ws})),n.d(b,"SELU_SCALE",(function(){return Vs})),n.d(b,"shouldFuse",(function(){return ml})),n.d(b,"ERF_P",(function(){return Bl})),n.d(b,"ERF_A1",(function(){return Pl})),n.d(b,"ERF_A2",(function(){return Wl})),n.d(b,"ERF_A3",(function(){return Vl})),n.d(b,"ERF_A4",(function(){return Ul})),n.d(b,"ERF_A5",(function(){return Gl})),n.d(b,"warn",(function(){return ql})),n.d(b,"log",(function(){return Hl})),n.d(b,"mergeRealAndImagArrays",(function(){return jl})),n.d(b,"splitRealAndImagArrays",(function(){return Kl})),n.d(b,"complexWithEvenIndex",(function(){return Xl})),n.d(b,"complexWithOddIndex",(function(){return Yl})),n.d(b,"getComplexWithIndex",(function(){return Jl})),n.d(b,"assignToTypedArray",(function(){return Zl})),n.d(b,"exponents",(function(){return Ql})),n.d(b,"exponent",(function(){return tc})),n.d(b,"segment_util",(function(){return c})),n.d(b,"castTensor",(function(){return ec})),n.d(b,"reshapeTensor",(function(){return nc})),n.d(b,"linspaceImpl",(function(){return rc}));var x={};n.r(x),n.d(x,"nonMaxSuppressionV3",(function(){return el})),n.d(x,"nonMaxSuppressionV5",(function(){return nl})),n.d(x,"split",(function(){return sc})),n.d(x,"tile",(function(){return ac})),n.d(x,"topkImpl",(function(){return ic})),n.d(x,"whereImpl",(function(){return As}));var w={};n.r(w),n.d(w,"json",(function(){return bm}));var v={};n.r(v),n.d(v,"json",(function(){return xm}));var C={};n.r(C),n.d(C,"json",(function(){return wm}));var S={};n.r(S),n.d(S,"json",(function(){return vm}));var N={};n.r(N),n.d(N,"json",(function(){return Cm}));var I={};n.r(I),n.d(I,"json",(function(){return Sm}));var k={};n.r(k),n.d(k,"json",(function(){return Nm}));var $={};n.r($),n.d($,"json",(function(){return Im}));var E={};n.r(E),n.d(E,"json",(function(){return km}));var A={};n.r(A),n.d(A,"json",(function(){return $m}));var R={};n.r(R),n.d(R,"json",(function(){return Em}));var T={};n.r(T),n.d(T,"json",(function(){return Am}));var D={};n.r(D),n.d(D,"json",(function(){return Rm}));var F={};n.r(F),n.d(F,"json",(function(){return Tm}));var _={};n.r(_),n.d(_,"json",(function(){return Dm}));var O={};n.r(O),n.d(O,"json",(function(){return Fm}));var M={};n.r(M),n.d(M,"maxImpl",(function(){return og})),n.d(M,"transposeImpl",(function(){return ug}));var z=n("8Y7J");class L{}var B=n("pMnS"),P=n("udNS"),W=n("9t2N"),V=n("ZcxY"),U=n("SVse"),G=n("2u97"),q=n("iInd");class H{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(e instanceof Promise)throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("="))),e}(this.global.location.search);"tfjsflags"in t&&t.tfjsflags.split(",").forEach(t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)})}}function j(){return X}let K,X=null;function Y(){if(null==K){let t;if("undefined"!=typeof window)t=window;else if("undefined"!=typeof global)t=global;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}K=t}return K}function J(t,e){const n=function(){const t=Y();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}const Z=J("kernelRegistry",()=>new Map),Q=J("gradRegistry",()=>new Map);function tt(t,e){const n=at(t,e);return Z.get(n)}function et(t){return Q.get(t)}function nt(t){const e=Z.entries(),n=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===t&&n.push(i)}return n}function rt(t){const{kernelName:e,backendName:n}=t,r=at(e,n);Z.has(r)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),Z.set(r,t)}function st(t){const{kernelName:e}=t;Q.has(e)&&console.warn(`Overriding the gradient for '${e}'`),Q.set(e,t)}function at(t,e){return`${e}_${t}`}function it(t){let e=t.length,n=0,r=0;for(;e>0;)r=Math.random()*e|0,e--,n=t[e],t[e]=t[r],t[r]=n}function ot(t,e,n){return Math.max(t,Math.min(e,n))}function ut(t){return t%2==0?t:t+1}function lt(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}function ct(t,e){const n=Math.random();return e*n+(1-n)*t}function ht(t,e){let n=0;for(let r=0;r<t.length;r++){const s=Number(t[r])-Number(e[r]);n+=s*s}return n}function dt(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function pt(t,e,n=""){dt(bt(t,e),()=>n+` Shapes ${t} and ${e} must match`)}function ft(t){dt(null!=t,()=>"The input to the tensor constructor must be a non-null value.")}function mt(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||Ft(t)&&!n)for(let r=0;r<t.length;++r)mt(t[r],e,n);else e.push(t);return e}function gt(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function yt(t){return 0===t.length}function bt(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function xt(t){return t%1==0}function wt(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function vt(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function Ct(t){const e=new Uint32Array(t);for(let n=0;n<t;++n)e[n]=n;return it(e),e}function St(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function Nt(t,e=(t=>0),n){return new Promise((r,s)=>{let a=0;const i=()=>{if(t())return void r();a++;const o=e(a);null!=n&&a>=n?s():setTimeout(i,o)};i()})}function It(t,e){let n=1,r=-1;for(let a=0;a<t.length;++a)if(t[a]>=0)n*=t[a];else if(-1===t[a]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${a}`);r=a}else if(t[a]<0)throw Error(`Shapes can not be < 0. Found ${t[a]} at dim ${a}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const s=t.slice();return s[r]=e/n,s}function kt(t,e){const n=e.length;return dt((t=null==t?e.map((t,e)=>e):[].concat(t)).every(t=>t>=-n&&t<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+t),dt(t.every(t=>xt(t)),()=>"All values in axis param must be integers but got axis "+t),t.map(t=>t<0?n+t:t)}function $t(t,e){const n=[],r=[],s=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||s?null:kt(e,t).sort();let i=0;for(let o=0;o<t.length;++o){if(null!=a){if(a[i]===o&&1!==t[o])throw new Error(`Can't squeeze axis ${o} since its dim '${t[o]}' is not 1`);(null==a[i]||a[i]>o)&&1===t[o]&&(n.push(t[o]),r.push(o)),a[i]<=o&&i++}1!==t[o]&&(n.push(t[o]),r.push(o))}return{newShape:n,keptDims:r}}function Et(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function At(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function Rt(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}function Tt(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function Dt(t,e){return!("complex64"===e||"float32"===e&&"complex64"!==t||"int32"===e&&"float32"!==t&&"complex64"!==t||"bool"===e&&"bool"===t)}function Ft(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function _t(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function Ot(t){if(null==t)return 0;let e=0;return t.forEach(t=>e+=t.length),e}function Mt(t){return"string"==typeof t||t instanceof String}function zt(t){return"boolean"==typeof t}function Lt(t){return"number"==typeof t}function Bt(t){return Array.isArray(t)?Bt(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":Lt(t)?"float32":Mt(t)?"string":zt(t)?"bool":"float32"}function Pt(t){return!!(t&&t.constructor&&t.call&&t.apply)}function Wt(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function Vt(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function Ut(t,e,n){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=mt(t)),n&&Rt(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error("Unknown data type "+e)}function Gt(t,e){if(0===t.length)return e[0];const n=t.reduce((t,e)=>t*e);if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size.`);return function t(e,n,r){const s=new Array;if(1===n.length){const t=n[0];for(let n=0;n<t;n++)s[n]=r[e+n]}else{const a=n[0],i=n.slice(1),o=i.reduce((t,e)=>t*e);for(let n=0;n<a;n++)s[n]=t(e+n*o,i,r)}return s}(0,t,e)}function qt(t,e){const n=Ht(t,e);for(let r=0;r<n.length;r++)n[r]=1;return n}function Ht(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function jt(){return j().platform.now()}function Kt(t){t.forEach(e=>{dt(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`)})}function Xt(t,e){return j().platform.fetch(t,e)}function Yt(t,e="utf-8"){return e=e||"utf-8",j().platform.encode(t,e)}function Jt(t,e="utf-8"){return e=e||"utf-8",j().platform.decode(t,e)}function Zt(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let s=0;s<t.length-1;++s)r+=n[s]*t[s];return r}function Qt(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let s=0;s<r.length-1;++s)r[s]=Math.floor(t/n[s]),t-=r[s]*n[s];return r[r.length-1]=t,r}class te{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new ee)}profileKernel(t,e,n){let r;const s=this.backendTimer.time(()=>{r=n()});return r.forEach(n=>{n.data().then(r=>{!function(t,e,n){if("float32"!==e)return!1;for(let r=0;r<t.length;r++){const e=t[r];if(isNaN(e)||!isFinite(e))return console.warn(`Found ${e} in the result of '${n}'`),!0}}(r,n.dtype,t),s.then(s=>{let a="";null!=s.getExtraProfileInfo&&(a=s.getExtraProfileInfo()),this.logger.logKernelProfile(t,n,r,s.kernelMs,e,a)})})}),r}}class ee{logKernelProfile(t,e,n,r,s,a){const i="number"==typeof r?St(r+"ms",9):r.error,o=St(t,25),u=e.rank,l=e.size,c=St(e.shape.toString(),14);let h="";for(const d in s){const t=s[d].shape||e.shape,n=t.length;h+=`${d}: ${n}D ${n>0?t:""} `}console.log(`%c${o}\t%c${i}\t%c${u}D ${c}\t%c${l}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function ne(t,e,n){let r;return r=Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":Mt(t)?`'${t}'`:"bool"===n?re(t):parseFloat(t.toFixed(7)).toString(),St(r,e)}function re(t){return 0===t?"false":"true"}function se(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class ae{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=gt(t),null!=n){const t=n.length;dt(t===this.size,()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||At(e,this.size),this.strides=Vt(t)}set(t,...e){0===e.length&&(e=[0]),dt(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const r of t){if(r<0||r>=this.shape[e])throw new Error(`Requested out of range element at ${t}.   Buffer shape=`+this.shape);e++}let n=t[t.length-1];for(let r=0;r<t.length-1;++r)n+=this.strides[r]*t[r];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return ie().makeTensor(this.values,this.shape,this.dtype)}}let ie=null,oe=null,ue=null;class le{constructor(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=gt(t),this.strides=Vt(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}flatten(){return this.throwIfDisposed(),this.as1D()}asScalar(){return this.throwIfDisposed(),dt(1===this.size,()=>"The array must have only 1 element."),this.reshape([])}as1D(){return this.throwIfDisposed(),this.reshape([this.size])}as2D(t,e){return this.throwIfDisposed(),this.reshape([t,e])}as3D(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])}as4D(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])}as5D(t,e,n,r,s){return this.throwIfDisposed(),this.reshape([t,e,n,r,s])}asType(t){return this.throwIfDisposed(),oe.cast(this,t)}get rank(){return this.shape.length}async buffer(){const t=await this.data();return oe.buffer(this.shape,this.dtype,t)}bufferSync(){return oe.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return Gt(this.shape,t)}arraySync(){return Gt(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=ie().read(this.dataId);if("string"===this.dtype){const n=await t;try{return n.map(t=>Jt(t))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=ie().readSync(this.dataId);if("string"===this.dtype)try{return t.map(t=>Jt(t))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await ie().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(ie().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}toFloat(){return this.asType("float32")}toInt(){return this.asType("int32")}toBool(){return this.asType("bool")}print(t=!1){return oe.print(this,t)}reshape(t){return this.throwIfDisposed(),oe.reshape(this,t)}reshapeAs(t){return this.throwIfDisposed(),this.reshape(t.shape)}expandDims(t=0){return oe.expandDims(this,t)}squeeze(t){return this.throwIfDisposed(),oe.squeeze(this,t)}clone(){return this.throwIfDisposed(),oe.clone(this)}toString(t=!1){return function(t,e,n,r){const s=Vt(e),a=function(t,e,n,r){const s=gt(e),a=r[r.length-1],i=new Array(a).fill(0),o=e.length,u="complex64"===n?se(t):t;if(o>1)for(let l=0;l<s/a;l++){const t=l*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],ne(u[t+e],0,n).length)}return i}(t,e,n,s),i=e.length,o=function t(e,n,r,s,a,i=!0){const o="complex64"===r?2:1,u=n[0],l=n.length;if(0===l)return"complex64"===r?[ne(se(e)[0],0,r)]:"bool"===r?[re(e[0])]:[e[0].toString()];if(1===l){if(u>20){let t=Array.from(e.slice(0,3*o)),n=Array.from(e.slice((u-3)*o,u*o));return"complex64"===r&&(t=se(t),n=se(n)),["["+t.map((t,e)=>ne(t,a[e],r)).join(", ")+", ..., "+n.map((t,e)=>ne(t,a[u-3+e],r)).join(", ")+"]"]}return["["+("complex64"===r?se(e):Array.from(e)).map((t,e)=>ne(t,a[e],r)).join(", ")+"]"]}const c=n.slice(1),h=s.slice(1),d=s[0]*o,p=[];if(u>20){for(let n=0;n<3;n++){const s=n*d;p.push(...t(e.slice(s,s+d),c,r,h,a,!1))}p.push("...");for(let n=u-3;n<u;n++){const s=n*d;p.push(...t(e.slice(s,s+d),c,r,h,a,n===u-1))}}else for(let g=0;g<u;g++){const n=g*d;p.push(...t(e.slice(n,n+d),c,r,h,a,g===u-1))}const f=2===l?",":"";p[0]="["+p[0]+f;for(let g=1;g<p.length-1;g++)p[g]=" "+p[g]+f;let m=",\n";for(let g=2;g<l;g++)m+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(i?"":m),p}(t,e,n,s,a),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+i),u.push(`  shape: [${e}]`),u.push("  values:")),u.push(o.map(t=>"    "+t).join("\n")),u.join("\n")}(this.dataSync(),this.shape,this.dtype,t)}gather(t,e=0){return this.throwIfDisposed(),oe.gather(this,t,e)}norm(t="euclidean",e=null,n=!1){return this.throwIfDisposed(),oe.norm(this,t,e,n)}slice(t,e){return this.throwIfDisposed(),oe.slice(this,t,e)}reverse(t){return this.throwIfDisposed(),oe.reverse(this,t)}stack(t,e=0){return oe.stack([this,t],e)}unstack(t=0){return oe.unstack(this,t)}all(t=null,e=!1){return this.throwIfDisposed(),oe.all(this,t,e)}any(t=null,e=!1){return this.throwIfDisposed(),oe.any(this,t,e)}logSumExp(t=null,e=!1){return this.throwIfDisposed(),oe.logSumExp(this,t,e)}sum(t=null,e=!1){return this.throwIfDisposed(),oe.sum(this,t,e)}prod(t=null,e=!1){return this.throwIfDisposed(),oe.prod(this,t,e)}mean(t=null,e=!1){return this.throwIfDisposed(),oe.mean(this,t,e)}min(t=null,e=!1){return this.throwIfDisposed(),oe.min(this,t,e)}argMin(t=null){return this.throwIfDisposed(),oe.argMin(this,t)}argMax(t=null){return this.throwIfDisposed(),oe.argMax(this,t)}cast(t){return this.throwIfDisposed(),oe.cast(this,t)}addStrict(t){return this.throwIfDisposed(),oe.addStrict(this,t)}subStrict(t){return this.throwIfDisposed(),oe.subStrict(this,t)}powStrict(t){return this.throwIfDisposed(),oe.powStrict(this,t)}mulStrict(t){return this.throwIfDisposed(),oe.mulStrict(this,t)}divStrict(t){return this.throwIfDisposed(),oe.divStrict(this,t)}minimumStrict(t){return this.throwIfDisposed(),oe.minimumStrict(this,t)}maximumStrict(t){return this.throwIfDisposed(),oe.maximumStrict(this,t)}modStrict(t){return this.throwIfDisposed(),oe.modStrict(this,t)}squaredDifferenceStrict(t){return this.throwIfDisposed(),oe.squaredDifferenceStrict(this,t)}notEqualStrict(t){return this.throwIfDisposed(),oe.notEqualStrict(this,t)}lessStrict(t){return this.throwIfDisposed(),oe.lessStrict(this,t)}equalStrict(t){return this.throwIfDisposed(),oe.equalStrict(this,t)}lessEqualStrict(t){return this.throwIfDisposed(),oe.lessEqualStrict(this,t)}greaterStrict(t){return this.throwIfDisposed(),oe.greaterStrict(this,t)}greaterEqualStrict(t){return this.throwIfDisposed(),oe.greaterEqualStrict(this,t)}logicalAnd(t){return this.throwIfDisposed(),oe.logicalAnd(this,t)}logicalOr(t){return this.throwIfDisposed(),oe.logicalOr(this,t)}logicalNot(){return this.throwIfDisposed(),oe.logicalNot(this)}logicalXor(t){return this.throwIfDisposed(),oe.logicalXor(this,t)}where(t,e){return this.throwIfDisposed(),oe.where(t,this,e)}neg(){return this.throwIfDisposed(),oe.neg(this)}ceil(){return this.throwIfDisposed(),oe.ceil(this)}floor(){return this.throwIfDisposed(),oe.floor(this)}sign(){return this.throwIfDisposed(),oe.sign(this)}isNaN(){return this.throwIfDisposed(),oe.isNaN(this)}isInf(){return this.throwIfDisposed(),oe.isInf(this)}isFinite(){return this.throwIfDisposed(),oe.isFinite(this)}exp(){return this.throwIfDisposed(),oe.exp(this)}expm1(){return this.throwIfDisposed(),oe.expm1(this)}log(){return this.throwIfDisposed(),oe.log(this)}log1p(){return this.throwIfDisposed(),oe.log1p(this)}sqrt(){return this.throwIfDisposed(),oe.sqrt(this)}rsqrt(){return this.throwIfDisposed(),oe.rsqrt(this)}square(){return this.throwIfDisposed(),oe.square(this)}reciprocal(){return this.throwIfDisposed(),oe.reciprocal(this)}abs(){return this.throwIfDisposed(),oe.abs(this)}clipByValue(t,e){return this.throwIfDisposed(),oe.clipByValue(this,t,e)}sigmoid(){return this.throwIfDisposed(),oe.sigmoid(this)}logSigmoid(){return this.throwIfDisposed(),oe.logSigmoid(this)}softplus(){return this.throwIfDisposed(),oe.softplus(this)}zerosLike(){return this.throwIfDisposed(),oe.zerosLike(this)}onesLike(){return this.throwIfDisposed(),oe.onesLike(this)}sin(){return this.throwIfDisposed(),oe.sin(this)}cos(){return this.throwIfDisposed(),oe.cos(this)}tan(){return this.throwIfDisposed(),oe.tan(this)}asin(){return this.throwIfDisposed(),oe.asin(this)}acos(){return this.throwIfDisposed(),oe.acos(this)}atan(){return this.throwIfDisposed(),oe.atan(this)}sinh(){return this.throwIfDisposed(),oe.sinh(this)}cosh(){return this.throwIfDisposed(),oe.cosh(this)}tanh(){return this.throwIfDisposed(),oe.tanh(this)}asinh(){return this.throwIfDisposed(),oe.asinh(this)}acosh(){return this.throwIfDisposed(),oe.acosh(this)}atanh(){return this.throwIfDisposed(),oe.atanh(this)}erf(){return this.throwIfDisposed(),oe.erf(this)}round(){return this.throwIfDisposed(),oe.round(this)}step(t=0){return this.throwIfDisposed(),oe.step(this,t)}softmax(t=-1){return this.throwIfDisposed(),oe.softmax(this,t)}logSoftmax(t=-1){return this.throwIfDisposed(),oe.logSoftmax(this,t)}resizeBilinear(t,e=!1){return this.throwIfDisposed(),oe.image.resizeBilinear(this,t,e)}resizeNearestNeighbor(t,e=!1){return this.throwIfDisposed(),oe.image.resizeNearestNeighbor(this,t,e)}variable(t=!0,e,n){return this.throwIfDisposed(),ie().makeVariable(this,t,e,n)}unsortedSegmentSum(t,e){return this.throwIfDisposed(),oe.unsortedSegmentSum(this,t,e)}topk(t=1,e=!0){return this.throwIfDisposed(),oe.topk(this,t,e)}stridedSlice(t,e,n,r=0,s=0,a=0,i=0,o=0){return this.throwIfDisposed(),oe.stridedSlice(this,t,e,n,r,s,a,i,o)}fft(){return this.throwIfDisposed(),oe.spectral.fft(this)}ifft(){return this.throwIfDisposed(),oe.spectral.ifft(this)}rfft(){return this.throwIfDisposed(),oe.spectral.rfft(this)}irfft(){return this.throwIfDisposed(),oe.spectral.irfft(this)}}Object.defineProperty(le,Symbol.hasInstance,{value:t=>!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype});class ce extends le{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!bt(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);ie().disposeTensor(this),this.dataId=t.dataId,ie().incRef(this,null)}dispose(){ie().disposeVariable(this),this.isDisposedInternal=!0}}var he,de,pe,fe,me;Object.defineProperty(ce,Symbol.hasInstance,{value:t=>t instanceof le&&null!=t.assign&&t.assign instanceof Function}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(he||(he={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(de||(de={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(pe||(pe={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(fe||(fe={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(me||(me={}));const ge={float32:fe,int32:de,bool:pe,complex64:me};function ye(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return ge[t][e]}function be(t){return ye(t,"int32")}function xe(t,e){if(t.dtype===e.dtype)return[t,e];const n=ye(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function we(t,e){dt(t.dtype===e.dtype,()=>`The dtypes of the first(${t.dtype}) and second(${e.dtype}) input must match`)}function ve(t,e){return e.some(e=>e.id===t.id)}function Ce(t){const e=[];return function t(e,n,r){if(null==e)return;if(e instanceof le)return void n.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=e;for(const i in a){const e=a[i];r.has(e)||(r.add(e),t(e,n,r))}}(t,e,new Set),e}class Se{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class Ne{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Se}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void(await this.setBackend(n))}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new te(this.backendInstance),!0}setupRegisteredKernels(){nt(this.backendName).forEach(t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){nt(t).forEach(e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])})}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(Promise.resolve(n)===n){const e=++this.pendingBackendInitId,r=n.then(n=>!(e<this.pendingBackendInitId||(this.registry[t]=n,this.pendingBackendInit=null,0))).catch(n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}return this.registry[t]=n,{success:!0,asyncInit:!1}}catch(n){return console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,s=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(r){throw e(),r}}nextTensorId(){return Ne.nextTensorId++}nextVariableId(){return Ne.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype);return this.addTapeNode(this.state.activeScope.name,{x:t},[e],t=>({x:()=>t.toFloat()}),[],{}),e}runKernel(t,e,n,r,s){return this.runKernelFunc(null,e,null,t,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let s=0;n.forEach(t=>{s+="complex64"===t.dtype?3:1});const a=r-e-s-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${t}'`)}runKernelFunc(t,e,n,r,s,a,i){let o,u=[];const l=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,h=this.state.numTensors;let d;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const p=tt(r,this.backendName);let f;if(null!=p)d=()=>{const t=this.backend.numDataIds();f=p.kernelFunc({inputs:e,attrs:s,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,t,n);const o=n.map(({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n));if(l){let t=this.getTensorsForGradient(r,e,o);if(null==t){null==i&&(i=[]);const e=o.filter((t,e)=>i[e]);t=(a||[]).slice().concat(e)}u=this.saveTensorsForBackwardMode(t)}return o};else{const e=t=>{l&&(u=t.map(t=>this.keep(this.clone(t))))};d=()=>{const n=this.backend.numDataIds();f=this.tidy(()=>t(this.backend,e));const s=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{o=this.ENV.getBool("DEBUG")?this.profiler.profileKernel(r,e,()=>d()):d()}),l&&this.addTapeNode(r,e,o,n,u,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map(t=>e[t].shape),outputShapes:o.map(t=>t.shape)}),Array.isArray(f)?o:o[0]}saveTensorsForBackwardMode(t){return t.map(t=>this.keep(this.clone(t)))}getTensorsForGradient(t,e,n){const r=et(t);if(null!=r){const t=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(dt(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(e).map(t=>e[t])):a=t.map(t=>e[t]);const i=n.filter((t,e)=>s[e]);return a.concat(i)}return null}makeTensor(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");r=r||this.backend;let s=t;"string"===(n=n||"float32")&&Mt(t[0])&&(s=t.map(t=>Yt(t)));const a=r.write(s,e,n),i=new le(e,n,a,this.nextTensorId());if(this.incRef(i,r),"string"===n){const t=this.state.tensorInfo.get(a),e=Ot(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return i}makeTensorFromDataId(t,e,n,r){const s=new le(e,n=n||"float32",t,this.nextTensorId());return this.incRef(s,r),s}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.asType(r));const s=new ce(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*_t(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof ce||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[t])}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;return this.state.activeProfile.kernels=[],this.state.activeProfile.result=t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(t=>t.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},o=et(t);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=t=>(t=t.map((t,e)=>{if(null==t){const t=n[e],r=Ht(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t}),r(t.length>1?t:t[0],s,a))),this.state.activeTape.push(i)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=Ce(t),n=new Set(e.map(t=>t.id));for(let s=0;s<this.state.activeScope.track.length;s++){const t=this.state.activeScope.track[s];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(t=>{t.kept||t.scopeId!==r.id||this.track(t)})}gradients(t,e,n,r=!1){if(dt(e.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));dt(s instanceof le,()=>"The result y returned by f() must be a tensor.");const a=function(t,e,n){const r={},s={};for(let u=0;u<e.length;u++)r[e[u].id]=!0;for(let u=0;u<t.length;u++){const n=t[u],a=n.inputs;for(const t in a){const i=a[t];let o=!1;for(let t=0;t<e.length;t++)if(r[i.id]){n.outputs.forEach(t=>r[t.id]=!0),o=!0,s[n.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let u=t.length-1;u>=0;u--){const e=t[u],n=e.inputs;for(let t=0;t<e.outputs.length;t++)if(a[e.outputs[t].id]){for(const t in n)a[n[t].id]=!0,i[e.id]=!0;break}}const o=[];for(let u=0;u<t.length;u++){const e=t[u];if(s[e.id]&&i[e.id]){const t={};for(const s in e.inputs){const n=e.inputs[s];r[n.id]&&(t[s]=n)}const n=Object.assign({},e);n.inputs=t,n.outputs=e.outputs,o.push(n)}}return o}(this.state.activeTape,e,s);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const t={};t[s.id]=null==n?function(t){const e=qt(gt(t),"float32");return Ie.makeTensor(e,t,"float32")}(s.shape):n,function(t,e,n){for(let r=e.length-1;r>=0;r--){const s=e[r],a=[];if(s.outputs.forEach(e=>{const n=t[e.id];a.push(null!=n?n:null)}),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const i=s.gradient(a);for(const e in s.inputs){if(!(e in i))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(i)}.`);const r=n(()=>i[e]());if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${r.dtype}'`);const a=s.inputs[e];if(!bt(r.shape,a.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${e}' has shape '${r.shape}', which does not match the shape of the input '${a.shape}'`);if(null==t[a.id])t[a.id]=r;else{const e=t[a.id];t[a.id]=e.add(r),e.dispose()}}}}(t,a,t=>this.tidy(t));const r=e.map(e=>t[e.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(t=>{for(const e of t.saved)e.dispose()}),this.state.activeTape=null),{value:s,grads:r}})}customGrad(t){return dt(Pt(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{let n;dt(e.every(t=>t instanceof le),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return e.forEach((t,e)=>{r[e]=t}),this.runKernelFunc((r,s)=>(n=t(...e,s),dt(n.value instanceof le,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),dt(Pt(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),r,(t,r)=>{const s=n.gradFunc(t,r),a=Array.isArray(s)?s:[s];dt(a.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),dt(a.every(t=>t instanceof le),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((t,e)=>{i[e]=()=>t}),i})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=jt(),n=await this.backend.time(t);return n.wallMs=jt()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Se;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}Ne.nextTensorId=0,Ne.nextVariableId=0;const Ie=function(){const t=Y();if(null==t._tfengine){const e=new H(t);t._tfengine=new Ne(e)}return X=t._tfengine.ENV,ie=()=>t._tfengine,t._tfengine}();function ke(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function $e(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Ee=j();function Ae(t,e){const n=t.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=t[a]||1;(e[e.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function Re(t,e){const n=[];for(let r=0;r<e.length;r++){const s=t[t.length-r-1],a=e.length-r-1,i=e[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function Te(t,e){const n=[],r=Math.max(t.length,e.length);for(let s=0;s<r;s++){let r=t[t.length-s-1];null==r&&(r=1);let a=e[e.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a)throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`);n.unshift(r)}}return n}Ee.registerFlag("DEBUG",()=>!1,t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Ee.registerFlag("IS_BROWSER",()=>$e()),Ee.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Ee.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Ee.registerFlag("PROD",()=>!1),Ee.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Ee.getBool("DEBUG")),Ee.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Ee.registerFlag("IS_TEST",()=>!1);const De={kernelName:"Add",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Te(n.shape,r.shape);return{a:()=>{let e=t;const r=Re(n.shape,s);return r.length>0&&(e=e.sum(r)),e.reshape(n.shape)},b:()=>{let e=t;const n=Re(r.shape,s);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)}}}};function Fe(t,e){let n=t;if(Ft(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const r=[];for(;Array.isArray(n)||Ft(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&j().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],!Array.isArray(e)&&!Ft(e))return void dt(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);dt(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${e.length} elements`),dt(e.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${e.length} elements`);const s=n.slice(1);for(let a=0;a<e.length;++a)t(e[a],s,r.concat(a))}(t,r,[]),r}function _e(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}function Oe(t,e,n,r="numeric"){if(t instanceof le)return _e(r,t.dtype,e,n),t;let s=Bt(t);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),_e(r,s,e,n),null==t||!Ft(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${null==t?"null":t.constructor.name}'`);const a=Fe(t,s);Ft(t)||Array.isArray(t)||(t=[t]);const i="string"!==s?Ut(t,s,j().getBool("DEBUG")):mt(t,[],!0);return Ie.makeTensor(i,a,s)}function Me(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map((t,r)=>Oe(t,`${e}[${r}]`,n),r)}function ze(t){const e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");let n=e[0];const r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));const s=(...t)=>{Ie.startScope(n);try{const e=r(...t);return e instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Ie.endScope(e),e}catch(e){throw Ie.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Le=ze({add_:function(t,e){let n=Oe(t,"a","add"),r=Oe(e,"b","add");return[n,r]=xe(n,r),Ie.runKernelFunc((t,e)=>{const s=t.add(n,r);return e([n,r]),s},{a:n,b:r},null,"Add")}});function Be(t,e){const n=t[0].length;t.forEach((t,e)=>{dt(t.length===n,()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`)}),dt(e>=0&&e<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=t[0];t.forEach((t,s)=>{for(let a=0;a<n;a++)dt(a===e||t[a]===r[a],()=>`Error in concat${n}D: Shape of tensors[${s}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`)})}function Pe(t,e){const n=t[0].slice();for(let r=1;r<t.length;r++)n[e]+=t[r][e];return n}const We=ze({complex_:function(t,e){const n=Oe(t,"real","complex"),r=Oe(e,"imag","complex");return pt(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`),Ie.runKernelFunc(t=>t.complex(n,r),{real:n,imag:r},null,"Complex")}}),Ve=ze({imag_:function(t){const e=Oe(t,"input","imag");return Ie.runKernelFunc(t=>t.imag(e),{input:e},null,"Imag")}}),Ue=ze({real_:function(t){const e=Oe(t,"input","real");return Ie.runKernelFunc(t=>t.real(e),{input:e},null,"Real")}});function Ge(t,e,n){return qe(t,e,Fe(t,n),n)}function qe(t,e,n,r){if(null==r&&(r=Bt(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Ft(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){Kt(e);const t=gt(e),r=gt(n);dt(t===r,()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`);for(let s=0;s<n.length;++s){const t=n[s],r=s!==n.length-1||t!==gt(e.slice(s));dt(n[s]===e[s]||!r,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `)}}return Ft(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?Ut(t,r,j().getBool("DEBUG")):mt(t,[],!0),Ie.makeTensor(t,e,r)}function He(t,e){if((Ft(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&Ft(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return qe(t,[],[],e)}function je(t,e){ft(t);const n=Fe(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return qe(t,null,n,e)}function Ke(t,e,n){if(ft(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Fe(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return qe(t,e,r,n)}function Xe(t,e,n){if(ft(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Fe(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return qe(t,e,r,n)}function Ye(t,e,n){if(ft(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Fe(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return qe(t,e,r,n)}function Je(t,e,n){if(ft(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Fe(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return qe(t,e,r,n)}function Ze(t,e,n){if(ft(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Fe(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return qe(t,e=e||r,r,n)}function Qe(t,e=!0,n,r){return Ie.makeVariable(t,e,n,r)}function tn(t,e="float32"){if("complex64"===e){const e=tn(t,"float32"),n=en(t,"float32");return We(e,n)}const n=qt(gt(t),e);return Ie.makeTensor(n,t,e)}function en(t,e="float32"){if("complex64"===e){const e=en(t,"float32"),n=en(t,"float32");return We(e,n)}const n=Ht(gt(t),e);return Ie.makeTensor(n,t,e)}function nn(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");return Ie.runKernelFunc(r=>r.linspace(t,e,n),{})}function rn(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");if(t===e||t<e&&n<0||e<t&&n>1)return en([0],r);const s=Ht(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),s[0]=t;for(let a=1;a<s.length;a++)s[a]=s[a-1]+n;return je(s,r)}const sn=ze({onesLike_:function(t){const e=Oe(t,"x","onesLike");if("complex64"===e.dtype){const t=sn(Ue(e)),n=an(Ve(e));return We(t,n)}return Ie.runKernelFunc(t=>t.onesLike(e),{x:e},(t,e)=>({x:()=>an(t)}),"OnesLike")}}),an=ze({zerosLike_:function(t){const e=Oe(t,"x","zerosLike");return Ie.runKernelFunc(t=>t.zerosLike(e),{x:e},(t,e)=>({x:()=>an(t)}),"ZerosLike")}}),on=ze({concat_:function(t,e=0){dt(t.length>=1,()=>"Pass at least one tensor to concat");let n=Me(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach(t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)});const r=kt(e,n[0].shape)[0],s=Pe(n.map(t=>t.shape),r);return 0===gt(s)?Ge([],s):(n=n.filter(t=>t.size>0),1===n.length?n[0]:(Be(n.map(t=>t.shape),r),Ie.runKernelFunc((t,e)=>{const s=t.concat(n,r);return e(n),s},n,null,"Concat",{axis:e})))}});function un(t,e="float32",n){return e=e||"float32",Kt(t),new ae(t,e,n)}function ln(t,e=!1){console.log(t.toString(e))}const cn=ze({cast_:function(t,e){const n=Oe(t,"x","cast");if(!Tt(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");return Ie.runKernelFunc(t=>t.cast(n,e),{x:n},t=>({x:()=>t.clone()}),"Cast",{dtype:e})}}),hn=ze({expandDims_:function(t,e=0){const n=Oe(t,"x","expandDims",null);dt(e<=n.rank,()=>"Axis must be <= rank of the tensor");const r=n.shape.slice();return e<0&&(dt(-(n.rank+1)<=e,()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`),e=n.rank+e+1),r.splice(e,0,1),dn(n,r)}}),dn=ze({reshape_:function(t,e){const n=Oe(t,"x","reshape",null);return e=It(e,n.size),dt(n.size===gt(e),()=>"new shape and old shape must have the same number of elements."),Ie.runKernelFunc(t=>t.reshape(n,e),{x:n},t=>({x:()=>t.reshape(n.shape)}),"Reshape",{shape:e})}}),pn=ze({squeeze_:function(t,e){const n=Oe(t,"x","squeeze");return dn(n,$t(n.shape,e).newShape)}}),fn=ze({stack_:function(t,e=0){const n=Me(t,"tensors","stack");if(dt(n.length>=1,()=>"Pass at least one tensor to tf.stack"),1===n.length)return n[0].expandDims(e);const r=n[0].shape,s=n[0].dtype;dt(e<=n[0].rank,()=>"Axis must be <= rank of the tensor"),n.forEach(t=>{pt(r,t.shape,"All tensors passed to stack must have matching shapes")}),n.forEach(t=>{dt(s===t.dtype,()=>"All tensors passed to stack must have matching dtypes")});const a=n.map(t=>t.expandDims(e));return on(a,e)}}),mn=ze({unstack_:function(t,e=0){e=e||0;const n=Oe(t,"x","unstack");return dt(e>=-n.shape.length&&e<n.shape.length,()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`),e<0&&(e+=n.shape.length),Ie.runKernelFunc(t=>t.unstack(n,e),{x:n},t=>({x:()=>fn(t,e)}),"Unpack",{axis:e})}}),gn=async function(t,e){const n=Oe(t,"x","setdiff1d"),r=Oe(e,"y","setdiff1d");dt(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),dt(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),dt(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let c=0;c<s.length;c++)i.has(s[c])||o++;const u=new ae([o],n.dtype),l=new ae([o],"int32");for(let c=0,h=0;c<s.length;c++)i.has(s[c])||(u.values[h]=s[c],l.values[h]=c,h++);return[u.toTensor(),l.toTensor()]},yn=ze({floorDiv_:function(t,e){let n=Oe(t,"a","floorDiv"),r=Oe(e,"b","floorDiv");return[n,r]=xe(n,r),Ie.runKernelFunc((t,e)=>{const s=t.floorDiv(n,r);return e([n,r]),s},{a:n,b:r},null,"FloorDiv")}}),bn=ze({div_:function(t,e){let n=Oe(t,"a","div"),r=Oe(e,"b","div");return[n,r]=xe(n,r),"int32"===n.dtype&&"int32"===r.dtype?yn(n,r):Ie.runKernelFunc((t,e)=>{const s=t.realDivide(n,r);return e([n,r]),s},{a:n,b:r},null,"Div",{})}}),xn=ze({mul_:function(t,e){let n=Oe(t,"a","mul"),r=Oe(e,"b","mul");return[n,r]=xe(n,r),Ie.runKernelFunc((t,e)=>{const s=t.multiply(n,r);return e([n,r]),s},{a:n,b:r},null,"Multiply")}});function wn(t){return Ie.customGrad(t)}function vn(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function Cn(t,e,n){const r=t.length+e.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(t[a++]):s.push(e[i++]);return s}function Sn(t,e){const n=[],r=t.length;for(let s=0;s<r;s++)-1===e.indexOf(s)&&n.push(t[s]);return[n,e.map(e=>t[e])]}function Nn(t,e){return Cn(t,e.map(t=>1),e)}function In(t,e,n){dt(vn(e,n),()=>t+" supports only inner-most axes for now. "+`Got axes ${e} and rank-${n} input.`)}function kn(t,e){if(vn(t,e))return null;const n=[];for(let r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach(t=>n.push(t)),n}function $n(t){return t.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function En(t,e){const n=[];for(let r=e-t;r<e;++r)n.push(r);return n}function An(t,e,n,r,s){return e.rank<n.rank&&(e=e.reshape(Nn(e.shape,r))),t.rank<n.rank&&(t=t.reshape(Nn(t.shape,r))),{x:()=>{const r=t.mul(n.equal(e).cast(t.dtype));return null==s?r:r.transpose(s)}}}const Rn=ze({all_:function(t,e=null,n=!1){let r=Oe(t,"x","all","bool");const s=kt(e,r.shape);let a=s;const i=kn(a,r.rank);null!=i&&(r=r.transpose(i),a=En(a.length,r.rank));const o=Ie.runKernelFunc(t=>t.all(r,a),{$x:r});if(n){const t=Nn(o.shape,s);return o.reshape(t)}return o}}),Tn=ze({any_:function(t,e=null,n=!1){let r=Oe(t,"x","any","bool");const s=kt(e,r.shape);let a=s;const i=kn(a,r.rank);null!=i&&(r=r.transpose(i),a=En(a.length,r.rank));const o=Ie.runKernelFunc(t=>t.any(r,a),{$x:r});if(n){const t=Nn(o.shape,s);return o.reshape(t)}return o}}),Dn=ze({argMax_:function(t,e=0){let n=Oe(t,"x","argMax");null==e&&(e=0);let r=kt(e,n.shape);const s=kn(r,n.rank);return null!=s&&(n=n.transpose(s),r=En(r.length,n.rank)),Ie.runKernelFunc((t,e)=>{const s=t.argMax(n,r[0]);return e([n]),s},{x:n},(t,e)=>{const[n]=e;return{x:()=>an(n)}},"ArgMax",{axis:r[0]},[n])}}),Fn=ze({argMin_:function(t,e=0){let n=Oe(t,"x","argMin");null==e&&(e=0);let r=kt(e,n.shape);const s=kn(r,n.rank);return null!=s&&(n=n.transpose(s),r=En(r.length,n.rank)),Ie.runKernelFunc((t,e)=>{const s=t.argMin(n,r[0]);return e([n]),s},{$x:n},(t,e)=>{const[n]=e;return{$x:()=>an(n)}})}}),_n=ze({logSumExp_:function(t,e=null,n=!1){const r=Oe(t,"x","logSumExp"),s=kt(e,r.shape),a=r.max(s,!0),i=r.sub(a).exp().sum(s).log(),o=a.reshape(i.shape).add(i);if(n){const t=Nn(o.shape,s);return o.reshape(t)}return o}}),On=ze({mean_:function(t,e=null,n=!1){const r=Oe(t,"x","mean"),s=kt(e,r.shape),a=gt(Sn(r.shape,s)[1]);return wn(t=>{const r=He(a);return{value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(e,n),gradFunc:e=>{const n=t.shape.slice();return s.forEach(t=>{n[t]=1}),e.reshape(n).mul(tn(t.shape,"float32")).div(a)}}})(r)}}),Mn=ze({min_:function(t,e=null,n=!1){let r=Oe(t,"x","min");const s=r,a=kt(e,r.shape);let i=a;const o=kn(i,r.rank);null!=o&&(r=r.transpose(o),i=En(i.length,r.rank));let u=Ie.runKernelFunc((t,e)=>{const n=t.min(r,i);return e([s,n]),n},{x:r},(t,e)=>An(t,e[1],e[0],a,o),"Min",{axes:i},[r],[!0]);if(n){const t=Nn(u.shape,a);u=u.reshape(t)}return u}}),zn=ze({moments_:function(t,e=null,n=!1){const r=kt(e,(t=Oe(t,"x","moments")).shape),s=t.mean(r,n);let a=s.shape;n||(a=Nn(s.shape,r));const i=t.toFloat().sub(s.reshape(a)).square();return{mean:s,variance:i.mean(r,n)}}}),Ln=ze({sum_:function(t,e=null,n=!1){let r=Oe(t,"x","sum");"bool"===r.dtype&&(r=r.toInt());const s=kt(e,r.shape);return wn(t=>{const e=kn(s,t.rank);let r=s,a=t;null!=e&&(a=t.transpose(e),r=En(r.length,t.rank));const i=e=>{const n=t.shape.slice();return s.forEach(t=>{n[t]=1}),e.reshape(n).mul(tn(t.shape,"float32"))};let o=Ie.runKernelFunc(t=>t.sum(a,r),{x:a},t=>({x:()=>i(t)}),"Sum",{axes:r});if(n){const t=Nn(o.shape,s);o=o.reshape(t)}return{value:o,gradFunc:i}})(r)}}),Bn=ze({prod_:function(t,e=null,n=!1){let r=Oe(t,"x","prod");"bool"===r.dtype&&(r=r.toInt());const s=kt(e,r.shape),a=kn(s,r.rank);let i=s,o=r;null!=a&&(o=r.transpose(a),i=En(i.length,r.rank));let u=Ie.runKernelFunc(t=>t.prod(o,i),{permutedX:o});if(n){const t=Nn(u.shape,s);u=u.reshape(t)}return u}}),Pn=ze({square_:function(t){const e=Oe(t,"x","square");return Ie.runKernelFunc((t,n)=>(n([e]),t.square(e)),{x:e},null,"Square",{},[e],[])}}),Wn=ze({abs_:function(t){const e=Oe(t,"x","abs");return"complex64"===e.dtype?Ie.runKernelFunc(t=>t.complexAbs(e),{$x:e}):Ie.runKernelFunc((t,n)=>{const r=t.abs(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.mul(n.toFloat().step(-1))}},"Abs")}}),Vn=ze({acos_:function(t){const e=Oe(t,"x","acos");return Ie.runKernelFunc((t,n)=>{const r=t.acos(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>{const e=n.toFloat().square(),r=He(1).sub(e).sqrt();return t.div(r).neg()}}})}}),Un=ze({acosh_:function(t){const e=Oe(t,"x","acosh");return Ie.runKernelFunc((t,n)=>{const r=t.acosh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>{const e=n.toFloat().square().sub(1).sqrt();return t.div(e)}}})}}),Gn=ze({asin_:function(t){const e=Oe(t,"x","asin");return Ie.runKernelFunc((t,n)=>{const r=t.asin(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(He(1).sub(n.toFloat().square()).sqrt())}})}}),qn=ze({asinh_:function(t){const e=Oe(t,"x","asinh");return Ie.runKernelFunc((t,n)=>{const r=t.asinh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>{const e=He(1).add(n.toFloat().square()).sqrt();return t.div(e)}}})}}),Hn=ze({atan_:function(t){const e=Oe(t,"x","atan");return Ie.runKernelFunc((t,n)=>{const r=t.atan(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(n.toFloat().square().add(1))}})}}),jn=ze({atanh_:function(t){const e=Oe(t,"x","atanh");return Ie.runKernelFunc((t,n)=>{const r=t.atanh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(He(1).sub(n.toFloat().square()))}})}}),Kn=ze({ceil_:function(t){const e=Oe(t,"x","ceil");return Ie.runKernelFunc(t=>t.ceil(e),{$x:e},t=>({$x:()=>an(t)}))}}),Xn=ze({clipByValue_:function(t,e,n){const r=Oe(t,"x","clipByValue");return dt(e<=n,()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`),Ie.runKernelFunc((t,s)=>{const a=t.clip(r,e,n);return s([r]),a},{x:r},(t,r)=>{const[s]=r;return{x:()=>t.where(s.greaterEqual(e).logicalAnd(s.lessEqual(n)),an(t))}},"ClipByValue",{min:e,max:n},[r])}}),Yn=ze({cos_:function(t){const e=Oe(t,"x","cos");return Ie.runKernelFunc((t,n)=>{const r=t.cos(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>n.toFloat().sin().neg().mul(t)}},"Cos",{},[e])}}),Jn=ze({cosh_:function(t){const e=Oe(t,"x","cosh");return Ie.runKernelFunc((t,n)=>{const r=t.cosh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>n.toFloat().sinh().mul(t)}})}}),Zn=ze({erf_:function(t){let e=Oe(t,"x","erf");return dt("int32"===e.dtype||"float32"===e.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===e.dtype&&(e=e.toFloat()),Ie.runKernelFunc((t,n)=>{const r=t.erf(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.mul(n.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}})}}),Qn=ze({exp_:function(t){const e=Oe(t,"x","exp");return Ie.runKernelFunc((t,n)=>{const r=t.exp(e);return n([r]),r},{x:e},(t,e)=>({x:()=>t.mul(e[0])}),"Exp",{},[],[!0])}}),tr=ze({expm1_:function(t){const e=Oe(t,"x","expm1");return Ie.runKernelFunc((t,n)=>{const r=t.expm1(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.mul(n.exp())}})}}),er=ze({floor_:function(t){const e=Oe(t,"x","floor");return Ie.runKernelFunc(t=>t.floor(e),{$x:e},t=>({$x:()=>an(t)}))}}),nr=ze({log_:function(t){const e=Oe(t,"x","log");return Ie.runKernelFunc((t,n)=>{const r=t.log(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.div(n.toFloat())}},"Log",{},[e])}}),rr=ze({log1p_:function(t){const e=Oe(t,"x","log1p");return Ie.runKernelFunc((t,n)=>{const r=t.log1p(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(n.add(1))}})}}),sr=ze({logSigmoid_:function(t){const e=Oe(t,"x","logSigmoid");return Ie.runKernelFunc((t,n)=>{const r=t.softplus(e.neg()).neg();return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.mul(n.neg().sigmoid())}})}}),ar=ze({neg_:function(t){const e=Oe(t,"x","neg");return Ie.runKernelFunc(t=>t.neg(e),{x:e},t=>({x:()=>t.neg()}),"Neg",{},[e])}}),ir=ze({reciprocal_:function(t){const e=Oe(t,"x","reciprocal");return Ie.runKernelFunc((t,n)=>{const r=t.reciprocal(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(n.square().neg())}})}}),or=ze({round_:function(t){const e=Oe(t,"x","round");return Ie.runKernelFunc(t=>t.round(e),{$x:e},t=>({$x:()=>an(t)}))}}),ur=ze({rsqrt_:function(t){const e=Oe(t,"x","rsqrt");return Ie.runKernelFunc((t,n)=>{const r=t.rsqrt(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.div(n.pow(1.5).mul(2)).neg()}},"Rsqrt",{},[e])}}),lr=ze({sigmoid_:function(t){const e=Oe(t,"x","sigmoid");return Ie.runKernelFunc((t,n)=>{const r=t.sigmoid(e);return n([r]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.mul(n.mul(He(1).sub(n)))}},"Sigmoid")}}),cr=ze({sign_:function(t){const e=Oe(t,"x","sign");return Ie.runKernelFunc(t=>t.sign(e),{$x:e},t=>({$x:()=>an(t)}))}}),hr=ze({isNaN_:function(t){const e=Oe(t,"x","isNaN");return Ie.runKernelFunc(t=>t.isNaN(e),{$x:e},t=>({$x:()=>an(t)}))}}),dr=ze({isInf_:function(t){const e=Oe(t,"x","isInf");return Ie.runKernelFunc(t=>t.isInf(e),{$x:e},t=>({$x:()=>an(t)}))}}),pr=ze({isFinite_:function(t){const e=Oe(t,"x","isFinite");return Ie.runKernelFunc(t=>t.isFinite(e),{$x:e},t=>({$x:()=>an(t)}))}}),fr=ze({sin_:function(t){const e=Oe(t,"x","sin");return Ie.runKernelFunc((t,n)=>{const r=t.sin(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>n.toFloat().cos().mul(t)}},"Sin",{},[e])}}),mr=ze({sinh_:function(t){const e=Oe(t,"x","sinh");return Ie.runKernelFunc((t,n)=>{const r=t.sinh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>n.toFloat().cosh().mul(t)}})}}),gr=ze({softplus_:function(t){const e=Oe(t,"x","softplus");return Ie.runKernelFunc((t,n)=>{const r=t.softplus(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.mul(n.sigmoid())}})}}),yr=ze({sqrt_:function(t){const e=Oe(t,"x","sqrt");return Ie.runKernelFunc((t,n)=>{const r=t.sqrt(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.div(n.toFloat().sqrt().mul(2))}},"Sqrt",{})}}),br=ze({step_:function(t,e=0){const n=Oe(t,"x","step");return Ie.runKernelFunc(t=>t.step(n,e),{$x:n},t=>({$x:()=>an(t)}))}}),xr=ze({tan_:function(t){const e=Oe(t,"x","tan");return Ie.runKernelFunc((t,n)=>{const r=t.tan(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(n.cos().square())}})}}),wr=ze({tanh_:function(t){const e=Oe(t,"x","tanh");return Ie.runKernelFunc((t,n)=>{const r=t.tanh(e);return n([r]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>He(1).sub(n.square()).mul(t)}},"Tanh",{},null,[!0])}}),vr={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Te(n.shape,r.shape);return{a:()=>{const e=Le(Pn(n),Pn(r));let a=xn(t,bn(r,e));const i=Re(n.shape,s);return i.length>0&&(a=Ln(a,i)),dn(a,n.shape)},b:()=>{const e=Le(Pn(n),Pn(r));let a=ar(xn(t,bn(n,e)));const i=Re(r.shape,s);return i.length>0&&(a=Ln(a,i)),dn(a,r.shape)}}}};function Cr(t,e,n,r,s,a,i="channelsLast"){const[o,u]=$r(e);let l;if("channelsLast"===i)l=[o,u,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);l=[o,u,t[1],t[1]]}return Nr(t,l,n,r,s,a,!1,i)}function Sr(t,e,n,r,s,a,i="NDHWC"){const[o,u,l]=Er(e);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,u,l,t[4],t[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",c=[o,u,l,t[1],t[1]]}return Ir(t,c,n,r,s,!1,h,a)}function Nr(t,e,n,r,s,a,i=!1,o="channelsLast"){let[u,l,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,h]=t;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[u,h,l,c]=t}const[d,p,,f]=e,[m,g]=$r(n),[y,b]=$r(r),x=Ar(d,y),w=Ar(p,b),{padInfo:v,outHeight:C,outWidth:S}=function(t,e,n,r,s,a,i,o,u){let l,c,h;if("number"==typeof t){l={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,r,s){null==r&&(r=kr(t,e,n));const a=t[1],i=Rr((t[0]-e+2*r)/n+1,s);dt(xt(i),()=>`The output # of rows (${i}) must be an integer. Change the stride and/or zero pad parameters`);const o=Rr((a-e+2*r)/n+1,s);return dt(xt(o),()=>`The output # of columns (${o}) must be an integer. Change the stride and/or zero pad parameters`),[i,o]}([e,n],a,r,t,o);c=s[0],h=s[1]}else if("same"===t){c=Math.ceil(e/r),h=Math.ceil(n/s);const t=Math.max(0,(c-1)*r+a-e),o=Math.max(0,(h-1)*s+i-n),u=Math.floor(t/2),d=t-u,p=Math.floor(o/2);l={top:u,bottom:d,left:p,right:o-p,type:"SAME"}}else if("valid"===t)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof t)throw Error("Unknown padding parameter: "+t);{const d="channelsLast"===u?t[1][0]:t[2][0],p="channelsLast"===u?t[1][1]:t[2][1],f="channelsLast"===u?t[2][0]:t[3][0],m="channelsLast"===u?t[2][1]:t[3][1];l={top:d,bottom:p,left:f,right:m,type:0===d&&0===p&&0===f&&0===m?"VALID":"EXPLICIT"},c=Rr((e-a+d+p)/r+1,o),h=Rr((n-i+f+m)/s+1,o)}}return{padInfo:l,outHeight:c,outWidth:h}}(s,l,c,m,g,x,w,a,o),N=i?f*h:f;let I;return"channelsFirst"===o?I=[u,N,C,S]:"channelsLast"===o&&(I=[u,C,S,N]),{batchSize:u,dataFormat:o,inHeight:l,inWidth:c,inChannels:h,outHeight:C,outWidth:S,outChannels:N,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:p,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:t,outShape:I,filterShape:e}}function Ir(t,e,n,r,s,a=!1,i="channelsLast",o){let[u,l,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,h,d]=t;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[u,d,l,c,h]=t}const[p,f,m,,g]=e,[y,b,x]=Er(n),[w,v,C]=Er(r),S=Ar(p,w),N=Ar(f,v),I=Ar(m,C),{padInfo:k,outDepth:$,outHeight:E,outWidth:A}=function(t,e,n,r,s,a,i,o,u,l,c){let h,d,p,f;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const a=function(t,e,n,r,s,a){null==s&&(s=kr(t,e,r));const i=t[1],o=t[2],u=Rr((t[0]-e+2*s)/r+1,a);dt(xt(u),()=>`The output # of depths (${u}) must be an integer. Change the stride and/or zero pad parameters`);const l=Rr((i-e+2*s)/r+1,a);dt(xt(l),()=>`The output # of rows (${l}) must be an integer. Change the stride and/or zero pad parameters`);const c=Rr((o-e+2*s)/r+1,a);return dt(xt(c),()=>`The output # of columns (${c}) must be an integer. Change the stride and/or zero pad parameters`),[u,l,c,1]}([e,n,r,1],o,0,s,t,c);d=a[0],p=a[1],f=a[2]}else if("same"===t){d=Math.ceil(e/s),p=Math.ceil(n/a),f=Math.ceil(r/i);const t=(d-1)*s+o-e,c=(p-1)*a+u-n,m=(f-1)*i+l-r,g=Math.floor(t/2),y=t-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((e-o+1)/s),p=Math.ceil((n-u+1)/a),f=Math.ceil((r-l+1)/i)}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(s,l,c,h,y,b,x,S,N,I,o),R=a?g*d:g;let T;return"channelsFirst"===i?T=[u,R,$,E,A]:"channelsLast"===i&&(T=[u,$,E,A,R]),{batchSize:u,dataFormat:i,inDepth:l,inHeight:c,inWidth:h,inChannels:d,outDepth:$,outHeight:E,outWidth:A,outChannels:R,padInfo:k,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:S,effectiveFilterHeight:N,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:v,dilationWidth:C,inShape:t,outShape:T,filterShape:e}}function kr(t,e,n,r=1){const s=Ar(e,r);return Math.floor((t[0]*(n-1)-n+s)/2)}function $r(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function Er(t){return"number"==typeof t?[t,t,t]:t}function Ar(t,e){return e<=1?t:t+(t-1)*(e-1)}function Rr(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function Tr(t){const[e,n,r]=$r(t);return 1===e&&1===n&&1===r}function Dr(t,e){return Tr(t)||Tr(e)}function Fr(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}const _r=ze({avgPool3dBackprop_:function(t,e,n,r,s=[1,1,1],a,i){const o=Oe(t,"dy","avgPool3dBackprop"),u=Oe(e,"input","avgPool3dBackprop");let l=o,c=u,h=!1;4===u.rank&&(h=!0,l=dn(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=dn(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),dt(5===l.rank,()=>"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+l.rank+"."),dt(5===c.rank,()=>"Error in avgPool3dBackprop: input must be rank 5 but got rank "+c.rank+"."),dt(Dr(r,s),()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`),null!=i&&dt(xt(a),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const d=Ie.runKernelFunc(t=>{const e=Sr(c.shape,n,r,s,a,i);return t.avgPool3dBackprop(l,c,e)},{dy:l,input:c},null,"AvgPool3DBackprop",{filterSize:n,strides:r,dilations:s,pad:a,dimRoundingMode:i});return h?dn(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Or={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,dilations:i,pad:o,dimRoundingMode:u}=n,l=null==i?[1,1,1]:i;return{x:()=>_r(t,r,s,a,l,o,u)}}},Mr=ze({avgPoolBackprop_:function(t,e,n,r,s){const a=Oe(t,"dy","avgPoolBackprop"),i=Oe(e,"input","avgPoolBackprop");dt(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,u=a,l=!1;3===i.rank&&(l=!0,o=dn(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=dn(a,[1,a.shape[0],a.shape[1],a.shape[2]])),dt(4===u.rank,()=>"Error in avgPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."),dt(4===o.rank,()=>"Error in avgPoolBackprop: input must be rank 4 but got rank "+o.rank+".");const c=Ie.runKernelFunc(t=>{const e=Cr(o.shape,n,r,1,s);return t.avgPoolBackprop(u,o,e)},{dy:u,input:o},null,"AvgPoolBackprop",{filterSize:n,strides:r,pad:s});return l?dn(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),zr={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,pad:i}=n;return{x:()=>Mr(t,r,s,a,i)}}},Lr=ze({matMul_:function(t,e,n=!1,r=!1){let s=Oe(t,"a","matMul"),a=Oe(e,"b","matMul");[s,a]=xe(s,a),dt(s.rank>=2&&a.rank>=2&&s.rank===a.rank,()=>`Error in matMul: inputs must have the same rank of at least 2, got ranks ${s.rank} and ${a.rank}.`);const i=n?s.shape[s.rank-2]:s.shape[s.rank-1],o=r?a.shape[a.rank-1]:a.shape[a.rank-2],u=n?s.shape[s.rank-1]:s.shape[s.rank-2],l=r?a.shape[a.rank-2]:a.shape[a.rank-1],c=s.shape.slice(0,-2),h=a.shape.slice(0,-2),d=gt(c),p=gt(h);dt(bt(c,h),()=>`Error in matMul: outer dimensions (${c}) and (${h}) of Tensors with shapes ${s.shape} and `+a.shape+" must match."),dt(i===o,()=>`Error in matMul: inner shapes (${i}) and (${o}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${n} and transposeB=${r} must match.`);const f=s.shape.slice(0,-2).concat([u,l]),m=dn(s,n?[d,i,u]:[d,u,i]),g=dn(a,r?[p,l,o]:[p,o,l]),y=Ie.runKernelFunc((t,e)=>(e([m,g]),t.batchMatMul(m,g,n,r)),{a:m,b:g},null,"BatchMatMul",{transposeA:n,transposeB:r});return dn(y,f)}}),Br={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[r,s]=e,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>Lr(t,s,!1,!1),b:()=>Lr(t,r,!0,!1)}:a&&!i?{a:()=>Lr(s,t,!1,!0),b:()=>Lr(r,t,!1,!1)}:{a:()=>Lr(s,t,!0,!0),b:()=>Lr(t,r,!0,!0)}:{a:()=>Lr(t,s,!1,!0),b:()=>Lr(r,t,!0,!1)}}},Pr=ze({spaceToBatchND_:function(t,e,n){const r=Oe(t,"x","spaceToBatchND");return dt(r.rank>=1+e.length,()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`),dt(n.length===e.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`),dt(r.shape.reduce((t,r,s)=>s>0&&s<=e.length?t&&(r+n[s-1][0]+n[s-1][1])%e[s-1]==0:t,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`),Ie.runKernelFunc(t=>t.spaceToBatchND(r,e,n),{x:r},null,"SpaceToBatchND",{blockShape:e,paddings:n})}}),Wr={kernelName:"BatchToSpaceND",gradFunc:(t,e,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>Pr(t,r,s)}}},Vr={kernelName:"BroadcastTo",gradFunc:(t,e,n)=>{const r=n.inputShape,s=n.shape,a=Array.from(s);for(let o=r.length-1;o>=0;o--)if(r[o]===s[o])a[o]=1;else if(1!==r[o])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${s}].`);const i=[];for(let o=0;o<a.length;o++)a[o]>1&&i.push(o);return{x:()=>Ln(t,i,!0)}}},Ur=ze({split_:function(t,e,n=0){const r=Oe(t,"x","split"),s=kt(n,r.shape)[0];let a;return"number"==typeof e?(dt(r.shape[s]%e==0,()=>"Number of splits must evenly divide the axis."),a=new Array(e).fill(r.shape[s]/e)):(dt(r.shape[s]===e.reduce((t,e)=>t+e),()=>"The sum of sizes must match the size of the axis dimension."),a=e),Ie.runKernelFunc((t,e)=>t.split(r,a,s),{x:r},null,"SplitV",{numOrSizeSplits:e,axis:n})}}),Gr={kernelName:"Concat",saveAllInputs:!0,gradFunc:(t,e,n)=>{const r=e.map(t=>t.shape),{axis:s}=n,a=kt(s,e[0].shape)[0],i=r.map(t=>t[a]);return Ur(t,i,a).map(t=>()=>t)}},qr=ze({conv2DBackpropFilter_:function(t,e,n,r,s,a="NHWC",i){let o=t;3===t.rank&&(o=dn(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u=e;3===u.rank&&(u=dn(e,[1,e.shape[0],e.shape[1],e.shape[2]])),dt(4===o.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+"."),dt(4===u.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."),dt(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const l="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];return dt(l===n[2],()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`),dt(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),null!=i&&dt(xt(s),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`),Ie.runKernelFunc(t=>{const e=Fr(a),l=Nr(o.shape,n,r,1,s,i,!1,e);return t.conv2dDerFilter(o,u,l)},{x:o,dy:u},null,"Conv2DBackpropFilter",{strides:r,pad:s,dataFormat:a,dimRoundingMode:i})}}),Hr=ze({conv2DBackpropInput_:function(t,e,n,r,s,a="NHWC",i){dt(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let o=t,u=e,l=!1;3===e.rank&&(l=!0,u=dn(e,[1,e.shape[0],e.shape[1],e.shape[2]]),o=[1,t[0],t[1],t[2]]),dt(4===o.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+"."),dt(4===u.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank),dt(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?u.shape[3]:u.shape[1];dt(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),dt(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`),null!=i&&dt(xt(s),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const d=Ie.runKernelFunc((t,e)=>{const l=Fr(a),c=Nr(o,n.shape,r,1,s,i,!1,l),h=t.conv2dDerInput(u,n,c);return e([u,n]),h},{dy:u,filter:n},null,"Conv2DBackpropInput",{strides:r,pad:s,dataFormat:a,dimRoundingMode:i});return l?dn(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),jr={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{dilations:a,strides:i,pad:o,dataFormat:u}=n;return dt(Tr(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>Hr(r.shape,t,s,i,o,u),filter:()=>qr(r,t,s.shape,i,o,u)}}},Kr=ze({conv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Oe(t,"x","conv2d"),u=Oe(e,"filter","conv2d");let l=o,c=!1;3===o.rank&&(c=!0,l=dn(o,[1,o.shape[0],o.shape[1],o.shape[2]])),dt(4===l.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`),dt(4===u.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."),null!=i&&dt(xt(r),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h="NHWC"===s?l.shape[3]:l.shape[1];dt(h===u.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${u.shape[2]}.`),dt(Dr(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const d=Ie.runKernelFunc((t,e)=>{const o=Fr(s),c=Nr(l.shape,u.shape,n,a,r,i,!1,o),h=t.conv2d(l,u,c);return e([l,u]),h},{x:l,filter:u},null,"Conv2D",{strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i});return c?dn(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Xr={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{strides:a,pad:i,dataFormat:o,dimRoundingMode:u}=n;return{dy:()=>Kr(t,s,a,i,o,1,u),filter:()=>qr(t,r,s.shape,a,i,o,u)}}},Yr=ze({conv3DBackpropFilter_:function(t,e,n,r,s){let a=t;4===t.rank&&(a=dn(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let i=e;return 4===i.rank&&(i=dn(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),dt(5===a.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."),dt(5===i.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+"."),dt(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),dt(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),dt(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`),Ie.runKernelFunc(t=>{const e=Ir(a.shape,n,r,1,s);return t.conv3dDerFilter(a,i,e)},{x:a,y:i},null,"Conv3DBackpropFilterV2",{strides:r,pad:s})}}),Jr=ze({conv3DBackpropInput_:function(t,e,n,r,s){dt(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let a=t,i=e,o=!1;4===e.rank&&(o=!0,i=dn(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),a=[1,t[0],t[1],t[2],t[3]]);const u=a[4],l=i.shape[4];dt(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),dt(5===i.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank),dt(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),dt(u===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`),dt(l===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`);const c=Ie.runKernelFunc(t=>{const e=Ir(a,n.shape,r,1,s);return t.conv3dDerInput(i,n,e)},{dy:i},null,"Conv3DBackpropInputV2",{pad:s});return o?dn(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),Zr={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a}=n;dt(Tr(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);const[i,o]=e;return{x:()=>Jr(i.shape,t,o,s,a),filter:()=>Yr(i,t,o.shape,s,a)}}},Qr=ze({transpose_:function(t,e){const n=Oe(t,"x","transpose");return null==e&&(e=n.shape.map((t,e)=>e).reverse()),dt(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`),e.forEach(t=>{dt(t>=0&&t<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e)}),n.rank<=1?n.clone():Ie.runKernelFunc(t=>t.transpose(n,e),{x:n},null,"Transpose",{perm:e})}}),ts=ze({cumsum_:function(t,e=0,n=!1,r=!1){const s=Oe(t,"x","cumsum");return Ie.runKernelFunc((t,a)=>{const i=kn([e],s.rank);let o=s;null!=i&&(o=Qr(s,i));const u=En(1,s.rank)[0];let l=t.cumsum(o,u,n,r);return a([s]),null!=i&&(l=Qr(l,i)),l},{x:s},null,"Cumsum",{axis:e,exclusive:n,reverse:r})}}),es={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const e=kn([s],r.rank);let n=ts(t,s,a,!i);return null!=e&&(n=Qr(n,e)),n}}}},ns=ze({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,r){let s=t;3===t.rank&&(s=dn(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let a=e;return 3===a.rank&&(a=dn(e,[1,e.shape[0],e.shape[1],e.shape[2]])),Ie.runKernelFunc(t=>t.depthwiseConv2DDerFilter(s,a,r),{x:s,dy:a},null,"DepthwiseConv2dNativeBackpropFilter")}}),rs=ze({depthwiseConv2dNativeBackpropInput_:function(t,e,n,r){let s=e,a=!1;3===e.rank&&(a=!0,s=dn(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i=Ie.runKernelFunc(t=>t.depthwiseConv2DDerInput(s,n,r),{dy:s},null,"DepthwiseConv2dNativeBackpropInput");return a?dn(i,[i.shape[1],i.shape[2],i.shape[3]]):i}}),ss={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;dt(Tr(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[u,l]=e;dt(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`),dt(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`),dt(u.shape[3]===l.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),dt(Dr(s,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`),null!=i&&dt(xt(a),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const c=Nr(u.shape,l.shape,s,o,a,i,!0);return{x:()=>rs(u.shape,t,l,c),filter:()=>ns(u,t,l.shape,c)}}},as={kernelName:"Div",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Te(n.shape,r.shape);return{a:()=>{const e=bn(t,r.toFloat()),a=Re(n.shape,s);return a.length>0?Ln(e,a).reshape(n.shape):e},b:()=>{let e=xn(t,n.toFloat());const a=Re(r.shape,s);a.length>0&&(e=dn(Ln(e,a),r.shape));const i=Pn(r);return ar(bn(e,i.toFloat()))}}}},is={kernelName:"Elu",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,r=e=>e.eluDer(t,n),s={dy:t,y:n};return{x:()=>Ie.runKernelFunc(r,s,null,"EluGrad")}}},os={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Te(n.shape,r.shape);return{a:()=>{const e=t.div(r.toFloat()),a=Re(n.shape,s);return a.length>0?e.sum(a).reshape(n.shape):e},b:()=>{let e=t.mul(n.toFloat());const a=Re(r.shape,s);a.length>0&&(e=e.sum(a).reshape(r.shape));const i=r.square();return e.div(i.toFloat()).neg()}}}},us=ze({sub_:function(t,e){let n=Oe(t,"a","sub"),r=Oe(e,"b","sub");return[n,r]=xe(n,r),Ie.runKernelFunc((t,e)=>{const s=t.subtract(n,r);return e([n,r]),s},{a:n,b:r},null,"Sub")}}),ls=ze({tile_:function(t,e){const n=Oe(t,"x","tile",null);return dt(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`),Ie.runKernelFunc((t,r)=>{const s=t.tile(n,e);return r([n]),s},{x:n},null,"Tile",{reps:e},[n])}}),cs={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=e,u=null==o?He(1):o,l=Re(a.shape,s.shape),c=[];if(1===a.rank){for(let t=0;t<s.shape.length-1;++t)c.push(s.shape[t]);c.push(1)}const h=us(s,a),d=xn(t,u),p=ur(Le(i,He(r))),f=xn(xn(xn(p,p),p),He(-.5));return{x:()=>dn(xn(xn(t,1===a.rank?ls(p.as4D(1,1,1,a.shape[0]),c):p),u),s.shape),mean:()=>{let t=xn(xn(p,He(-1)),d);return 1===a.rank&&(t=Ln(t,l)),dn(t,a.shape)},variance:()=>{let t=xn(xn(f,h),d);return 1===a.rank&&(t=Ln(t,l)),dn(t,a.shape)},scale:()=>{const e=xn(h,p);let n=xn(t,e);return 1===a.rank&&(n=Ln(n,l)),dn(n,a.shape)},offset:()=>{let e=t;return 1===a.rank&&(e=Ln(e,l)),dn(e,a.shape)}}}},hs={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>an(n),b:()=>an(r)}}},ds=ze({localResponseNormalizationBackprop_:function(t,e,n,r=5,s=1,a=1,i=.5){return Ie.runKernelFunc(o=>o.LRNGrad(n,t,e,r,s,a,i),{x:t,y:e,dy:n},null,"LRNBackprop",{depthRadius:r,bias:s,alpha:a,beta:i})}}),ps={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{depthRadius:a,bias:i,alpha:o,beta:u}=n;return{x:()=>ds(r,s,t,a,i,o,u)}}},fs={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{reductionIndices:s}=r,[a,i]=e,o=kt(s,a.shape),u=kn(o,a.rank),l=An(t,i,a,o,u);return{x:()=>{let t=l.x();return null!=u&&(t=Qr(t)),t}}}},ms=ze({greaterEqual_:function(t,e){let n=Oe(t,"a","greaterEqual"),r=Oe(e,"b","greaterEqual");return[n,r]=xe(n,r),Te(n.shape,r.shape),Ie.runKernelFunc((t,e)=>{const s=t.greaterEqual(n,r);return e([n,r]),s},{a:n,b:r},null,"GreaterEqual")}}),gs=ze({less_:function(t,e){let n=Oe(t,"a","less"),r=Oe(e,"b","less");return[n,r]=xe(n,r),Te(n.shape,r.shape),Ie.runKernelFunc(t=>t.less(n,r),{a:n,b:r},null,"Less")}}),ys={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>xn(t,cn(ms(n,r),"float32")),b:()=>xn(t,cn(gs(n,r),"float32"))}}},bs=ze({maxPool3dBackprop_:function(t,e,n,r,s,a=[1,1,1],i,o){const u=Oe(t,"dy","maxPool3dBackprop"),l=Oe(e,"input","maxPool3dBackprop"),c=Oe(n,"output","maxPool3dBackprop");let h=u,d=l,p=c,f=!1;4===l.rank&&(f=!0,h=dn(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=dn(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=dn(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),dt(5===h.rank,()=>"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+"."),dt(5===d.rank,()=>"Error in maxPool3dBackprop: input must be rank 5 but got rank "+d.rank+"."),dt(5===p.rank,()=>"Error in maxPool3dBackprop: output must be rank 5 but got rank "+p.rank+"."),dt(Dr(s,a),()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`),null!=o&&dt(xt(i),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`);const m=Ie.runKernelFunc(t=>{const e=Sr(d.shape,r,s,a,i,o);return t.maxPool3dBackprop(h,d,p,e)},{dy:h,input:d,output:p},null,"MaxPool3DBackprop",{filterSize:r,strides:s,dilations:a,pad:i,dimRoundingMode:o});return f?dn(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),xs={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,dilations:o,pad:u,dimRoundingMode:l}=n,c=null==o?[1,1,1]:o;return{x:()=>bs(t,r,s,a,i,c,u,l)}}},ws=ze({maxPoolBackprop_:function(t,e,n,r,s,a,i){const o=Oe(t,"dy","maxPoolBackprop"),u=Oe(e,"input","maxPoolBackprop"),l=Oe(n,"output","maxPoolBackprop");return dt(u.rank===o.rank,()=>`Rank of input (${u.rank}) does not match rank of dy (${o.rank})`),dt(4===o.rank,()=>"Error in maxPoolBackprop: dy must be rank 4 but got rank "+o.rank+"."),dt(4===u.rank,()=>"Error in maxPoolBackprop: input must be rank 4 but got rank "+u.rank+"."),null!=i&&dt(xt(a),()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`),Ie.runKernelFunc(t=>{const e=Cr(u.shape,r,s,1,a,i);return t.maxPoolBackprop(o,u,l,e)},{dy:o,input:u,output:l},null,"MaxPoolBackprop",{filterSize:r,strides:s,pad:a,dimRoundingMode:i})}}),vs={kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,pad:o}=n;return{x:()=>ws(t,r,s,a,i,o)}}},Cs=ze({greater_:function(t,e){let n=Oe(t,"a","greater"),r=Oe(e,"b","greater");return[n,r]=xe(n,r),Te(n.shape,r.shape),Ie.runKernelFunc(t=>t.greater(n,r),{a:n,b:r},null,"Greater")}}),Ss=ze({lessEqual_:function(t,e){let n=Oe(t,"a","lessEqual"),r=Oe(e,"b","lessEqual");return[n,r]=xe(n,r),Te(n.shape,r.shape),Ie.runKernelFunc((t,e)=>{const s=t.lessEqual(n,r);return e([n,r]),s},{a:n,b:r},null,"LessEqual")}}),Ns={kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>xn(t,cn(Ss(n,r),"float32")),b:()=>xn(t,cn(Cs(n,r),"float32"))}}},Is={kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Te(n.shape,r.shape);return{a:()=>{const e=Re(n.shape,s);return e.length>0?dn(Ln(t,e),n.shape):t},b:()=>{const e=xn(t,ar(er(bn(n,r)))),a=Re(r.shape,s);return a.length>0?dn(Ln(e,a),r.shape):e}}}},ks={kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Te(n.shape,r.shape);return{a:()=>{const e=xn(t,cn(r,"float32")),a=Re(n.shape,s);return a.length>0?dn(Ln(e,a),n.shape):e},b:()=>{const e=xn(t,cn(n,"float32")),a=Re(r.shape,s);return a.length>0?dn(Ln(e,a),r.shape):e}}}},$s={kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>en(n.shape,"float32")}}},Es={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,a=s.map(t=>t[0]);return{x:()=>t.slice(a,r.shape)}}};function As(t,e){const n=[];for(let a=0;a<e.length;a++)e[a]&&n.push(a);const r=un(t,"int32"),s=un([n.length,t.length],"int32");for(let a=0;a<n.length;a++){const e=r.indexToLoc(n[a]);s.values.set(e,a*t.length)}return s.toTensor()}const Rs=ze({logicalAnd_:function(t,e){const n=Oe(t,"a","logicalAnd","bool"),r=Oe(e,"b","logicalAnd","bool");return Te(n.shape,r.shape),Ie.runKernelFunc(t=>t.logicalAnd(n,r),{a:n,b:r},null,"LogicalAnd")}}),Ts=ze({logicalNot_:function(t){const e=Oe(t,"x","logicalNot","bool");return Ie.runKernelFunc(t=>t.logicalNot(e),{$x:e})}}),Ds=ze({logicalOr_:function(t,e){const n=Oe(t,"a","logicalOr","bool"),r=Oe(e,"b","logicalOr","bool");return Te(n.shape,r.shape),Ie.runKernelFunc(t=>t.logicalOr(n,r),{$a:n,$b:r})}}),Fs=ze({logicalXor_:function(t,e){const n=Oe(t,"a","logicalXor","bool"),r=Oe(e,"b","logicalXor","bool");return Te(n.shape,r.shape),Ds(t,e).logicalAnd(Rs(t,e).logicalNot())}}),_s=ze({where_:function(t,e,n){const r=Oe(e,"a","where"),s=Oe(n,"b","where"),a=Oe(t,"condition","where","bool");return pt(r.shape,s.shape,"Error in where: "),1===a.rank?dt(a.shape[0]===r.shape[0],()=>"The first dimension of `a` must match the size of `condition`."):pt(a.shape,s.shape,"Error in where: "),Ie.runKernelFunc((t,e)=>{const n=t.select(a,r,s);return e([a]),n},{condition:a,t:r,e:s},(t,e)=>{const[n]=e;return{condition:()=>an(n).toFloat(),t:()=>t.mul(n.cast(t.dtype)),e:()=>t.mul(n.logicalNot().cast(t.dtype))}},"SelectV2")}}),Os=async function(t){const e=Oe(t,"condition","whereAsync","bool"),n=await e.data(),r=As(e.shape,n);return t!==e&&e.dispose(),r},Ms=ze({pow_:function(t,e){let n=Oe(t,"base","pow"),r=Oe(e,"exp","pow");return[n,r]=xe(n,r),Ie.runKernelFunc((t,e)=>{const s=t.pow(n,r);return e([n,r,s]),s},{a:n,b:r},null,"Pow")}}),zs={kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,r,s]=e,a=n,i=r,o=Te(a.shape,i.shape);return{a:()=>{const e=cn(i,"float32");let n=xn(t,xn(e,Ms(a,us(e,He(1)))));const r=Re(a.shape,o);return r.length>0&&(n=Ln(n,r)),dn(n,a.shape)},b:()=>{const e=Cs(a,0),n=_s(e,nr(a),an(a));let r=xn(t,xn(s,n));const u=Re(i.shape,o);return u.length>0&&(r=Ln(r,u)),dn(r,i.shape)}}}},Ls={kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,r]=e,s=Cs(n,0);return{x:()=>_s(s,t,xn(t,r)),alpha:()=>{let e=_s(s,an(t),xn(t,n));const a=Re(r.shape,t.shape);return a.length>0&&(e=Ln(e,a)),dn(e,r.shape)}}}},Bs={kernelName:"Relu6",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=xn(Ss(n,6),br(n));return{x:()=>xn(t,cn(r,"float32"))}}},Ps={kernelName:"Relu",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>xn(t,cn(br(n),"float32"))}}},Ws=1.7580993408473768,Vs=1.0507009873554805,Us={kernelName:"Selu",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Cs(n,He(0)),r=He(Ws),s=He(Vs),a=xn(t,s),i=xn(xn(t,r),Qn(cn(n,"float32")));return _s(e,a,i)}}}},Gs=ze({batchToSpaceND_:function(t,e,n){const r=Oe(t,"x","batchToSpaceND"),s=e.reduce((t,e)=>t*e);return dt(r.rank>=1+e.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`),dt(n.length===e.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`),dt(r.shape[0]%s==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`),Ie.runKernelFunc(t=>t.batchToSpaceND(r,e,n),{x:r},null,"BatchToSpaceND",{blockShape:e,crops:n})}}),qs={kernelName:"SpaceToBatchND",gradFunc:(t,e,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>Gs(t,r,s)}}},Hs={kernelName:"SplitV",gradFunc:(t,e,n)=>{const{axis:r}=n;return{x:()=>on(t,r)}}},js={kernelName:"Square",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>xn(t,xn(n.toFloat(),2))}}},Ks={kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=He(2);return{a:()=>xn(t,xn(s,us(n,r))),b:()=>xn(t,xn(s,us(r,n)))}}},Xs={kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Te(n.shape,r.shape);return{a:()=>{let e=t;const r=Re(n.shape,s);return r.length>0&&(e=Ln(e,r)),dn(e,n.shape)},b:()=>{let e=t;const n=Re(r.shape,s);return n.length>0&&(e=Ln(e,n)),dn(ar(e),r.shape)}}}},Ys=ze({pad_:function(t,e,n=0){const r=Oe(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return Ie.runKernelFunc((t,s)=>(s([r]),t.pad(r,e,n)),{x:r},null,"PadV2",{paddings:e,constantValue:n})}});function Js(t,e,n){dt(t.rank===e.length,()=>`Error in slice${t.rank}D: Length of begin ${e} must match the rank of the array (${t.rank}).`),dt(t.rank===n.length,()=>`Error in slice${t.rank}D: Length of size ${n} must match the rank of the array (${t.rank}).`);for(let r=0;r<t.rank;++r)dt(e[r]+n[r]<=t.shape[r],()=>`Error in slice${t.rank}D: begin[${r}] + size[${r}] (${e[r]+n[r]}) would overflow input.shape[${r}] (${t.shape[r]})`)}function Zs(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function Qs(t,e,n){const r=[];for(let s=0;s<t.length;s++)r[s]=Math.ceil((e[s]-t[s])/n[s]);return r}function ta(t,e,n){const r=[...t];for(let s=0;s<n;s++)0===s?r[e]=1:(r.splice(e,0,1),r.pop());return r}function ea(t,e,n){const r=[...t];for(let s=0;s<n;s++)0===s?r[e]=0:(r.splice(e,0,0),r.pop());return r}function na(t,e,n,r){const s=[...t];for(let a=0;a<n;a++)0===a?s[e]=Number.MAX_SAFE_INTEGER:(s.splice(e,0,Number.MAX_SAFE_INTEGER),s.pop());for(let a=0;a<s.length;a++)s[a]=ot(0,s[a],r[a]);return s}function ra(t,e,n){let r=t[e];return(n&1<<e||null==r)&&(r=1),r}function sa(t,e,n,r,s,a){let i=e[s];(t&1<<s||a&1<<s||null==i)&&(i=(n[s]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const o=r[s];return i<0&&(i+=o),i=ot(0,i,o-1),i}function aa(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=o>0?ot(0,i,u):ot(-1,i,u-1),i}function ia(t,e,n){let r=n.length;for(let s=0;s<n.length;s++)if(n[s]>1){r=s;break}for(let s=r+1;s<n.length;s++)if(e[s]>0||n[s]!==t[s])return!1;return!0}function oa(t,e){let n=t.length>0?t[t.length-1]:1;for(let r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}const ua=ze({slice_:function(t,e,n){const r=Oe(t,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");let s,a;s="number"==typeof e?[e,...new Array(r.rank-1).fill(0)]:e.length<r.rank?e.concat(new Array(r.rank-e.length).fill(0)):e.slice(),s.forEach(t=>{dt(-1!==t,()=>"slice() does not support negative begin indexing.")}),a=null==n?new Array(r.rank).fill(-1):"number"==typeof n?[n,...new Array(r.rank-1).fill(-1)]:n.length<r.rank?n.concat(new Array(r.rank-n.length).fill(-1)):n,a=a.map((t,e)=>t>=0?t:(dt(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${e}.`),r.shape[e]-s[e])),Js(r,s,a);const i=r.shape;return Ie.runKernelFunc(t=>t.slice(r,s,a),{x:r},t=>{const e=[];for(let n=0;n<t.rank;n++)e.push([s[n],i[n]-s[n]-a[n]]);return{x:()=>Ys(t,e)}},"Slice",{begin:s,size:a})}}),la=ze({slice1d_:function(t,e,n){const r=Oe(t,"x","slice1d");return dt(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),ua(r,[e],[n])}}),ca=ze({slice2d_:function(t,e,n){const r=Oe(t,"x","slice2d");return dt(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),ua(r,e,n)}}),ha=ze({slice3d_:function(t,e,n){const r=Oe(t,"x","slice3d");return dt(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),ua(r,e,n)}}),da=ze({slice4d_:function(t,e,n){const r=Oe(t,"x","slice4d");return dt(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),ua(r,e,n)}}),pa=[De,{kernelName:"AddN",saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach((e,r)=>{n[r]=()=>t.clone()}),n}},vr,zr,Or,Br,Wr,Vr,Gr,jr,Xr,Zr,es,ss,as,is,os,cs,hs,{kernelName:"Identity",gradFunc:t=>({x:()=>t.toFloat()})},ps,$s,Es,Hs,fs,qs,fs,ys,vs,xs,Ns,Is,ks,$s,Es,zs,Ls,Ps,Bs,Us,qs,Hs,js,Ks,{kernelName:"Tile",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{reps:s}=n;return{x:()=>{let e=an(r);if(1===r.rank)for(let n=0;n<s[0];++n)e=Le(e,ua(t,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)e=Le(e,ua(t,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)e=Le(e,ua(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)e=Le(e,ua(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},{kernelName:"Transpose",gradFunc:(t,e,n)=>{const r=n,{perm:s}=r,a=$n(s);return{x:()=>Qr(t,a)}}},Xs];for(const Jx of pa)st(Jx);let fa;j().get("IS_BROWSER")&&j().setPlatform("browser",new class{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}),j().get("IS_NODE")&&j().setPlatform("node",new class{constructor(){this.util=n(5),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=j().global.fetch?j().global.fetch(t,e):(null==fa&&(fa=n(4)),fa(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}});const ma={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function ga(t,e){const n=[],r=[],s=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(t)?t[a].tensor:t[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const t=new Promise(async t=>{const e=await o.bytes(),n=e.reduce((t,e)=>t+e.length,0)+4*e.length,r=new Uint8Array(n);let s=0;for(let a=0;a<e.length;a++){const t=e[a],n=new Uint8Array(new Uint32Array([t.length]).buffer);r.set(n,s),s+=4,r.set(t,s),s+=t.length}t(r)});r.push(t)}else r.push(o.data());null!=e&&(u.group=e),n.push(u)}return{data:ba(await Promise.all(r)),specs:n}}function ya(t,e){const n={};let r,s=0;for(const a of e){const e=a.name,i=a.dtype,o=a.shape,u=gt(o);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=ma[n.dtype],c=t.slice(s,s+u*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(h.length);for(let t=0;t<h.length;t++)l[t]=h[t]*n.scale+n.min}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Na()),l=r(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(h.length);for(let t=0;t<h.length;t++)l[t]=Math.round(h[t]*n.scale+n.min)}s+=u*o}else if("string"===i){const e=gt(a.shape);l=[];for(let n=0;n<e;n++){const e=new Uint32Array(t.slice(s,s+4))[0];s+=4;const n=new Uint8Array(t.slice(s,s+e));l.push(n),s+=e}}else{const r=ma[i],a=t.slice(s,s+u*r);if("float32"===i)l=new Float32Array(a);else if("int32"===i)l=new Int32Array(a);else if("bool"===i)l=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);{l=new Float32Array(a);const t=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let e=0;e<t.length;e++)t[e]=l[2*e],r[e]=l[2*e+1];const s=Ge(t,o,"float32"),i=Ge(r,o,"float32");n[e]=We(s,i)}}s+=u*r}"complex64"!==i&&(n[e]=Ge(l,o,i))}return n}function ba(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));let e=0;const n=[];t.forEach(t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)});const r=new Uint8Array(e);let s=0;return n.forEach(t=>{r.set(new Uint8Array(t.buffer),s),s+=t.byteLength}),r.buffer}const xa="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function wa(t){return xa?Buffer.byteLength(t):new Blob([t]).size}function va(t){if(1===t.length)return t[0];let e=0;t.forEach(t=>{e+=t.byteLength});const n=new Uint8Array(e);let r=0;return t.forEach(t=>{n.set(new Uint8Array(t),r),r+=t.byteLength}),n.buffer}function Ca(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);const e=t.split("/");return e[e.length-1]}function Sa(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:wa(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:wa(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function Na(){const t=function(){const t=t=>{let e=t<<13,n=0;for(;0==(8388608&e);)n-=8388608,e<<=1;return e&=-8388609,n+=947912704,e|n},e=new Uint32Array(2048);e[0]=0;for(let n=1;n<1024;n++)e[n]=t(n);for(let n=1024;n<2048;n++)e[n]=939524096+(n-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let e=1;e<31;e++)t[e]=e<<23;for(let e=33;e<63;e++)t[e]=2147483648+(e-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let e=0;e<64;e++)t[e]=1024;return t[0]=t[32]=0,t}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let i=0;i<r.length;i++){const s=r[i];a[i]=t[n[s>>10]+(1023&s)]+e[s>>10]}return new Float32Array(s)}}class Ia{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Ia.instance&&(Ia.instance=new Ia),Ia.instance}static registerSaveRouter(t){Ia.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Ia.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Ia.getHandlers(t,"save")}static getLoadHandlers(t,e){return Ia.getHandlers(t,"load",e)}static getHandlers(t,e,n){const r=[];return("load"===e?Ia.getInstance().loadRouters:Ia.getInstance().saveRouters).forEach(e=>{const s=e(t,n);null!==s&&r.push(s)}),r}}const ka=t=>Ia.registerSaveRouter(t),$a=t=>Ia.registerLoadRouter(t),Ea=t=>Ia.getSaveHandlers(t),Aa=(t,e)=>Ia.getLoadHandlers(t,e);class Ra{constructor(){this.managers={}}static getInstance(){return null==Ra.instance&&(Ra.instance=new Ra),Ra.instance}static registerManager(t,e){dt(null!=t,()=>"scheme must not be undefined or null."),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),dt(t.length>0,()=>"scheme must not be an empty string.");const n=Ra.getInstance();dt(null==n.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}function Ta(t){if(-1===t.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+Ra.getSchemes().join(","));return{scheme:t.split("://")[0],path:t.split("://")[1]}}async function Da(t,e,n=!1){dt(t!==e,()=>`Old path and new path are the same: '${t}'`);const r=Ia.getLoadHandlers(t);dt(r.length>0,()=>`Copying failed because no load handler is found for source URL ${t}.`),dt(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${t}.`);const s=r[0],a=Ia.getSaveHandlers(e);dt(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${e}.`),dt(a.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${e}.`);const i=a[0],o=Ta(t).scheme,u=Ta(t).path,l=o===Ta(t).scheme,c=await s.load();n&&l&&await Ra.getManager(o).removeModel(u);const h=await i.save(c);return n&&!l&&await Ra.getManager(o).removeModel(u),h.modelArtifactsInfo}async function Fa(){const t=Ra.getSchemes(),e={};for(const n of t){const t=await Ra.getManager(n).listModels();for(const r in t)e[n+"://"+r]=t[r]}return e}async function _a(t){const e=Ta(t);return Ra.getManager(e.scheme).removeModel(e.path)}async function Oa(t,e){return Da(t,e,!1)}async function Ma(t,e){return Da(t,e,!0)}function za(){if(!j().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function La(t){const e=t.result;e.createObjectStore("models_store",{keyPath:"modelPath"}),e.createObjectStore("model_info_store",{keyPath:"modelPath"})}class Ba{constructor(t){if(this.indexedDB=za(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>La(r),r.onsuccess=()=>{const s=r.result;if(null==e){const e=s.transaction("models_store","readonly"),r=e.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(r.result.modelArtifacts)},r.onerror=t=>(s.close(),n(r.error)),e.oncomplete=()=>s.close()}else{const r=Sa(e),a=s.transaction("model_info_store","readwrite");let i=a.objectStore("model_info_store");const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;o.onsuccess=()=>{u=s.transaction("models_store","readwrite");const o=u.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:r});o.onsuccess=()=>t({modelArtifactsInfo:r}),o.onerror=t=>{i=a.objectStore("model_info_store");const e=i.delete(this.modelPath);e.onsuccess=()=>(s.close(),n(o.error)),e.onerror=t=>(s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=t=>n(r.error)})}}Ba.URL_SCHEME="indexeddb://";const Pa=t=>{return j().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Ba.URL_SCHEME)?(e=t.slice(Ba.URL_SCHEME.length),new Ba(e)):null;var e};Ia.registerSaveRouter(Pa),Ia.registerLoadRouter(Pa);class Wa{constructor(){this.indexedDB=za()}async listModels(){return new Promise((t,e)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>La(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const e={};for(const t of a.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},a.onerror=t=>(r.close(),e(a.error)),s.oncomplete=()=>r.close()},n.onerror=t=>e(n.error)})}async removeModel(t){var e;return t=(e=t).startsWith(Ba.URL_SCHEME)?e.slice(Ba.URL_SCHEME.length):e,new Promise((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>La(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),i=a.objectStore("model_info_store"),o=i.get(t);let u;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const r=i.delete(t),a=()=>{u=s.transaction("models_store","readwrite");const r=u.objectStore("models_store").delete(t);r.onsuccess=()=>e(o.result.modelArtifactsInfo),r.onerror=t=>n(o.error)};r.onsuccess=a,r.onerror=t=>(a(),s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=t=>n(r.error)})}}if(j().getBool("IS_BROWSER"))try{Ra.registerManager(Ba.URL_SCHEME,new Wa)}catch(Yx){}const Va="tensorflowjs_models",Ua="info",Ga="model_topology",qa="weight_specs",Ha="weight_data",ja="model_metadata";function Ka(t){return{info:[Va,t,Ua].join("/"),topology:[Va,t,Ga].join("/"),weightSpecs:[Va,t,qa].join("/"),weightData:[Va,t,Ha].join("/"),modelMetadata:[Va,t,ja].join("/")}}function Xa(t){const e=t.split("/");if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join("/")}class Ya{constructor(t){if(!j().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=Ka(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=Sa(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(xa)return Buffer.from(t).toString("base64");const e=new Uint8Array(t);let n="";for(let r=0,s=e.length;r<s;r++)n+=String.fromCharCode(e[r]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:r}}catch(Yx){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const t=JSON.parse(s);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,e.userDefinedMetadata=t.userDefinedMetadata}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=function(t){if(xa){const e=Buffer.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}const e=atob(t),n=new Uint8Array(e.length);for(let r=0;r<e.length;++r)n.set([e.charCodeAt(r)],r);return n.buffer}(a),e}}Ya.URL_SCHEME="localstorage://";const Ja=t=>{return j().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Ya.URL_SCHEME)?(e=t.slice(Ya.URL_SCHEME.length),new Ya(e)):null;var e};Ia.registerSaveRouter(Ja),Ia.registerLoadRouter(Ja);class Za{constructor(){dt(j().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),dt("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const t={},e=Va+"/",n="/"+Ua;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);s.startsWith(e)&&s.endsWith(n)&&(t[Xa(s)]=JSON.parse(this.LS.getItem(s)))}return t}async removeModel(t){var e;const n=Ka(t=(e=t).startsWith(Ya.URL_SCHEME)?e.slice(Ya.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}if(j().getBool("IS_BROWSER"))try{Ra.registerManager(Ya.URL_SCHEME,new Za)}catch(Yx){}function Qa(t){return new Promise(t=>setTimeout(t)).then(t)}class ti{constructor(t){if(!j().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(ti.URL_SCHEME)&&(t=t.slice(ti.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=window.URL.createObjectURL(new Blob([JSON.stringify({modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}]})],{type:"application/json"})),r=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(r.download=this.modelTopologyFileName,r.href=n,await Qa(()=>r.dispatchEvent(new MouseEvent("click"))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await Qa(()=>t.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Sa(t)}}}}ti.URL_SCHEME="downloads://";class ei{constructor(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}async load(){const t=this.files[0],e=this.files.slice(1);return new Promise((n,r)=>{const s=new FileReader;s.onload=s=>{const a=JSON.parse(s.target.result),i=a.modelTopology;if(null==i)return void r(new Error("modelTopology field is missing from file "+t.name));0===e.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void r(new Error("weightManifest field is missing from file "+t.name));let u;try{u=this.checkManifestAndWeightFiles(o,e)}catch(Yx){return void r(Yx)}const l=[],c=[],h=[];o.forEach(t=>{t.paths.forEach(t=>{c.push(t),h.push(null)}),l.push(...t.weights)}),o.forEach(t=>{t.paths.forEach(t=>{const e=new FileReader;e.onload=e=>{const r=e.target.result,s=c.indexOf(t);h[s]=r,-1===h.indexOf(null)&&n({modelTopology:i,weightSpecs:l,weightData:va(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},e.onerror=e=>r(`Failed to weights data from file of path '${t}'.`),e.readAsArrayBuffer(u[t])})})},s.onerror=e=>r(`Failed to read model topology and weights manifest JSON from file '${t.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),s.readAsText(t)})}checkManifestAndWeightFiles(t,e){const n=[],r=e.map(t=>Ca(t.name)),s={};for(const a of t)a.paths.forEach(t=>{const a=Ca(t);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===r.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[t]=e[r.indexOf(a)]});if(n.length!==e.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${e.length}).`);return s}}function ni(t){return new ei(t)}function ri(t,e,n,r){!function(t){dt(null!=t&&Array.isArray(t)&&t.length>0,()=>"promises must be a none empty array")}(t),function(t,e){dt(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+t),dt(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+e),dt(e>=t,()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction `+e)}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(t.map(a=>(a.then(a=>{const i=n+ ++s/t.length*(r-n);return e(i),a}),a)))}async function si(t,e){null==e&&(e={});const n=null==e.fetchFunc?j().platform.fetch:e.fetchFunc,r=t.map(t=>n(t,e.requestInit,{isBinary:!0})),s=(null==e.onProgress?await Promise.all(r):await ri(r,e.onProgress,0,.5)).map(t=>t.arrayBuffer());return null==e.onProgress?await Promise.all(s):await ri(s,e.onProgress,.5,1)}async function ai(t,e="",n,r){return ii(t=>si(t,{requestInit:r}))(t,e,n)}function ii(t){return async(e,n="",r)=>{const s=e.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],o=[];if(e.forEach((t,e)=>{let n=0;t.weights.forEach(t=>{const u=ma["quantization"in t?t.quantization.dtype:t.dtype]*gt(t.shape),l=()=>{s[e]=!0,null==a[e]&&(a[e]=[]),a[e].push({manifestEntry:t,groupOffset:n,sizeBytes:u})};null!=r?r.forEach((e,n)=>{e===t.name&&(l(),i[n]=!0)}):l(),o.push(t.name),n+=u})}),!i.every(t=>t)){const t=r.filter((t,e)=>!i[e]);throw new Error("Could not find weights in manifest with names: "+t.join(", ")+". \nManifest JSON has weights with names: "+o.join(", ")+".")}const u=s.reduce((t,e,n)=>(e&&t.push(n),t),[]),l=[];u.forEach(t=>{e[t].paths.forEach(t=>{const e=n+(n.endsWith("/")?"":"/")+t;l.push(e)})});const c=await t(l),h={};let d=0;return u.forEach(t=>{const n=e[t].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[d+e].byteLength;const s=new ArrayBuffer(r),i=new Uint8Array(s);let o=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[d+e]);i.set(t,o),o+=t.byteLength}a[t].forEach(t=>{const e=ya(s.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(const n in e)h[n]=e[n]}),d+=n}),h}}Ia.registerSaveRouter(t=>j().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(ti.URL_SCHEME)?function(t="model"){return new ti(t)}(t.slice(ti.URL_SCHEME.length)):null);class oi{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(dt("function"==typeof e.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=j().platform.fetch,dt(null!=t&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&dt(2===t.length,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData,e.body.append("model.json",new Blob([JSON.stringify({modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:[{paths:["./model.weights.bin"],weights:t.weightSpecs}]})],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const n=await this.fetch(this.path,e);if(n.ok)return{modelArtifactsInfo:Sa(t),responses:[n]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+n.status+".")}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code `+t.status+". Please verify this URL points to the model JSON of the model to load.");let e;try{e=await t.json()}catch(c){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=e.modelTopology,r=e.weightsManifest,s=e.generatedBy,a=e.convertedBy,i=e.format,o=e.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,l;if(null!=r){const t=await this.loadWeights(r);[u,l]=t}return{modelTopology:n,weightSpecs:u,weightData:l,userDefinedMetadata:o,generatedBy:s,convertedBy:a,format:i}}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?");return[t.substring(0,e)+"/",n>e?t.substring(n):""]}(e),s=this.weightPathPrefix||n,a=[];for(const o of t)a.push(...o.weights);const i=[];return t.forEach(t=>{t.paths.forEach(t=>{i.push(s+t+r)})}),[a,va(await si(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function ui(t){return null!=t.match(oi.URL_SCHEME_REGEX)}oi.URL_SCHEME_REGEX=/^https?:\/\//;const li=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every(t=>ui(t)):ui(t),n)return ci(t,e)}return null};function ci(t,e){return new oi(t,e)}function hi(t,e){return ci(t,e)}Ia.registerSaveRouter(li),Ia.registerLoadRouter(li);class di{constructor(t){this.modelArtifacts=t}async load(){return this.modelArtifacts}}class pi{constructor(t){this.saveHandler=t}async save(t){return this.saveHandler(t)}}function fi(t,e,n,r){return 1===arguments.length?null!=t.modelTopology||null!=t.weightSpecs?new di(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new di({modelTopology:t})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new di({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r}))}function mi(t){return new pi(t)}const gi=ze({oneHot_:function(t,e,n=1,r=0){if(e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);let s=Oe(t,"indices","oneHot","int32");const a=[...s.shape,e];return s=s.flatten(),Ie.runKernelFunc((t,i)=>(i([s]),dn(t.oneHot(s,e,n,r),a)),{indices:s},null,"OneHot",{depth:e,onValue:n,offValue:r})}});let yi;async function bi(t,e){let n=Oe(t,"img","toPixels");if(!(t instanceof le)){const t=n;n=t.toInt(),t.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);const i=await n.data(),o=n.min(),u=n.max(),l=await Promise.all([o.data(),u.data()]),c=l[0][0],h=l[1][0];if(o.dispose(),u.dispose(),"float32"===n.dtype){if(c<0||h>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [${c} - ${h}].`)}else{if("int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);if(c<0||h>255)throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [${c} - ${h}].`)}const d="float32"===n.dtype?255:1,p=new Uint8ClampedArray(s*r*4);for(let f=0;f<r*s;++f){let t,e,n,r;1===a?(t=i[f]*d,e=i[f]*d,n=i[f]*d,r=255):3===a?(t=i[3*f]*d,e=i[3*f+1]*d,n=i[3*f+2]*d,r=255):4===a&&(t=i[4*f]*d,e=i[4*f+1]*d,n=i[4*f+2]*d,r=i[4*f+3]*d);const s=4*f;p[s+0]=Math.round(t),p[s+1]=Math.round(e),p[s+2]=Math.round(n),p[s+3]=Math.round(r)}if(null!=e){e.width=s,e.height=r;const t=e.getContext("2d"),n=new ImageData(p,s,r);t.putImageData(n,0,0)}return n!==t&&n.dispose(),p}ze({confusionMatrix_:function(t,e,n){const r=Oe(t,"labels","confusionMatrix"),s=Oe(e,"predictions","confusionMatrix");dt(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, but got "+n),dt(1===r.rank,()=>"Expected the rank of labels to be 1, but got "+r.rank),dt(1===s.rank,()=>"Expected the rank of predictions to be 1, but got "+s.rank),dt(r.shape[0]===s.shape[0],()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`),dt(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+n);const a=gi(r.asType("int32"),n),i=gi(s.asType("int32"),n);return a.transpose().matMul(i).asType("int32")}});const xi=ze({fromPixels_:function(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);i=!0}if(s){const e=2;if(s&&t.readyState<e)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=tt("FromPixels",Ie.backendName))return Ie.runKernel("FromPixels",{pixels:t},{numChannels:e});const[o,u]=s?[t.videoWidth,t.videoHeight]:[t.width,t.height];let l,c;if(i?l=t.getContext("2d").getImageData(0,0,o,u).data:r||n?l=t.data:(a||s)&&(null==yi&&(yi=document.createElement("canvas").getContext("2d")),yi.canvas.width=o,yi.canvas.height=u,yi.drawImage(t,0,0,o,u),l=yi.getImageData(0,0,o,u).data),4===e)c=new Int32Array(l);else{const t=o*u;c=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)c[n*e+t]=l[4*n+t]}return Xe(c,[u,o,e],"int32")}});function wi(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,r=n[n.length-1];let s=1;for(let l=0;l<n.length-1;++l)s*=n[l];const a=t.shape,i=n.slice();i.pop();let o=1;for(let l=r;l<t.rank;++l)o*=a[l],i.push(a[l]);const u=[...Vt(t.shape).map(t=>t/o),1].slice(0,r);return[i,s,o,u]}function vi(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${e.shape}, shape: ${t}`+`, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(t.length<r+(n.rank-s))throw new Error(a+" Output shape length < "+(r+(n.rank-s)));if(n.rank!==s+t.length-r)throw new Error(a+" update.rank != "+(s+t.length-r));for(let i=0;i<s;++i)if(n.shape[i]!==e.shape[i])throw new Error(a+` updates.shape[${i}] (${n.shape[i]}) != indices.shape[${i}] (${e.shape[i]}).`);for(let i=0;i<n.rank-s;++i)if(n.shape[i+s]!==t[i+r])throw new Error(a+` updates.shape[${i+s}] (${n.shape[i+s]}) != shape[${i+s}] (${t[i+s]})`)}function Ci(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}vi(n,e,t)}function Si(t,e,n){const r=e.shape.length,s=r>1?e.shape[r-1]:1,a=n.length;let i=1;for(let u=s;u<a;++u)i*=n[u];const o=s<1?1:s;return{sliceRank:s,numUpdates:gt(e.shape)/o,sliceSize:i,strides:[...Vt(n.slice(0,s)),1],outputSize:gt(n)}}class Ni{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class Ii{constructor(){this.classNameMap={}}static getMap(){return null==Ii.instance&&(Ii.instance=new Ii),Ii.instance}static register(t){Ii.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function ki(t){dt(null!=t.className,()=>"Class being registered does not have the static className property defined."),dt("string"==typeof t.className,()=>"className is required to be a string, but got type "+typeof t.className),dt(t.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),Ii.register(t)}function $i(t){j().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Ei(){return Ie}function Ai(){return Ie.memory()}function Ri(t,e){return Ie.tidy(t,e)}function Ti(t){Ce(t).forEach(t=>t.dispose())}function Di(t){return Ie.keep(t)}function Fi(t,e,n=1){return Ie.registerBackend(t,e,n)}ue=$i;const _i=ze({addN_:function(t){dt(Array.isArray(t),()=>"The argument passed to tf.addN() must be a list of tensors"),dt(t.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+t.length);const e=t.map((t,e)=>Oe(t,"tensors"+e,"addN")),n=e[0];return e.forEach(t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(t=>{if(!bt(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}),Ie.runKernelFunc((t,n)=>{const r=t.addN(e);return n(e),r},e,null,"AddN")}}),Oi=ze({atan2_:function(t,e){let n=Oe(t,"a","atan2"),r=Oe(e,"b","atan2");return[n,r]=xe(n,r),Ie.runKernelFunc((t,e)=>{const s=t.atan2(n,r);return e([n,r]),s},{a:n,b:r},null,"Atan2")}}),Mi=ze({avgPool_:function(t,e,n,r,s){const a=Oe(t,"x","avgPool","float32");dt(Dr(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=dn(a,[1,a.shape[0],a.shape[1],a.shape[2]])),dt(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),null!=s&&dt(xt(r),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);let u=Ie.runKernelFunc((t,a)=>{const o=Cr(i.shape,e,n,1,r,s);return a([i]),1===o.filterWidth&&1===o.filterHeight&&bt(o.inShape,o.outShape)?i.clone():t.avgPool(i,o)},{x:i},null,"AvgPool",{filterSize:e,strides:n,pad:r,dimRoundingMode:s});return u=cn(u,a.dtype),o?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),zi=ze({avgPool3d_:function(t,e,n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:$i("dilations is deprecated, this field will be gone in v3.0.0.");const o=Oe(t,"x","avgPool3d","float32");let u=o,l=!1;4===o.rank&&(l=!0,u=dn(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),dt(5===u.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${u.rank}.`),dt("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),dt(Dr(n,i),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&dt(xt(r),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);let c=Ie.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const l=Sr(u.shape,e,n,i,r,s,a);return o([u]),t.avgPool3d(u,l)},{x:u},null,"AvgPool3D",{filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i});return c=cn(c,u.dtype),l?c.as4D(c.shape[1],c.shape[2],c.shape[3],c.shape[4]):c}});function Li(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}const Bi=ze({batchNorm_:function(t,e,n,r,s,a){null==a&&(a=.001);const i=Oe(t,"x","batchNorm"),o=Oe(e,"mean","batchNorm"),u=Oe(n,"variance","batchNorm");let l,c;null!=s&&(l=Oe(s,"scale","batchNorm")),null!=r&&(c=Oe(r,"offset","batchNorm")),dt(o.rank===u.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),dt(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),dt(null==l||o.rank===l.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(t){let e;return e=0===t.rank||1===t.rank?t.as4D(1,1,1,t.size):2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t,e}(i),d=Ie.runKernelFunc((t,e)=>(e([h,o,u,l]),t.batchNorm(h,Li(o),Li(u),Li(c),Li(l),a)),{x:h,scale:l,offset:c,mean:o,variance:u},null,"FusedBatchNorm",{varianceEpsilon:a});return dn(d,i.shape)}}),Pi=ze({batchNorm2d_:function(t,e,n,r,s,a){const i=Oe(t,"x","batchNorm"),o=Oe(e,"mean","batchNorm"),u=Oe(n,"variance","batchNorm");let l,c;return null!=s&&(l=Oe(s,"scale","batchNorm")),null!=r&&(c=Oe(r,"offset","batchNorm")),dt(2===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),dt(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),dt(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=l&&dt(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=c&&dt(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Bi(i,o,u,c,l,a)}}),Wi=ze({batchNorm3d_:function(t,e,n,r,s,a){const i=Oe(t,"x","batchNorm"),o=Oe(e,"mean","batchNorm"),u=Oe(n,"variance","batchNorm");let l,c;return null!=s&&(l=Oe(s,"scale","batchNorm")),null!=r&&(c=Oe(r,"offset","batchNorm")),dt(3===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),dt(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),dt(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=l&&dt(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=c&&dt(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Bi(i,o,u,c,l,a)}}),Vi=ze({batchNorm4d_:function(t,e,n,r,s,a){const i=Oe(t,"x","batchNorm"),o=Oe(e,"mean","batchNorm"),u=Oe(n,"variance","batchNorm");let l,c;return null!=s&&(l=Oe(s,"scale","batchNorm")),null!=r&&(c=Oe(r,"offset","batchNorm")),dt(4===i.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+i.rank+"."),dt(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),dt(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=l&&dt(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=c&&dt(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Bi(i,o,u,c,l,a)}}),Ui=ze({clone_:function(t){const e=Oe(t,"x","clone",null);return Ie.runKernelFunc(()=>Ie.makeTensorFromDataId(e.dataId,e.shape,e.dtype),{x:e},null,"Identity")}}),Gi=ze({broadcastTo_:function(t,e){let n=Oe(t,"broadcastTo","x");const r=n.shape;if(e.some(t=>!(t>0)||t%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=dn(n,t)}const s=n.shape,a=Array.from(e);for(let i=e.length-1;i>=0;i--)if(s[i]===e[i])a[i]=1;else if(1!==n.shape[i])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);return 0===a.map((t,e)=>t>1?e:-1).filter(t=>t>=0).length?Ui(n):Ie.runKernelFunc(t=>t.tile(n,a),{x:n},null,"BroadcastTo",{shape:e,inputShape:s})}}),qi=ze({concat1d_:function(t){return on(t,0)}}),Hi=ze({concat2d_:function(t,e){return on(t,e)}}),ji=ze({concat3d_:function(t,e){return on(t,e)}}),Ki=ze({concat4d_:function(t,e){return on(t,e)}}),Xi=ze({conv1d_:function(t,e,n,r,s="NWC",a=1,i){const o=Oe(t,"x","conv1d"),u=Oe(e,"filter","conv1d");let l=o,c=!1;2===o.rank&&(c=!0,l=dn(o,[1,o.shape[0],o.shape[1]])),dt(3===l.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`),dt(3===u.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."),null!=i&&dt(xt(r),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),dt(l.shape[2]===u.shape[1],()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`),dt(Dr(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),dt("NWC"===s,()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const h=dn(u,[1,u.shape[0],u.shape[1],u.shape[2]]),d=dn(l,[l.shape[0],1,l.shape[1],l.shape[2]]),p=Kr(d,h,[1,n],r,"NHWC",[1,a],i);return dn(p,c?[p.shape[2],p.shape[3]]:[p.shape[0],p.shape[2],p.shape[3]])}}),Yi=ze({conv2dTranspose_:function(t,e,n,r,s,a){const i=Oe(t,"x","conv2dTranspose"),o=Oe(e,"filter","conv2dTranspose");return Hr(n,i,o,r,s,"NHWC",a)}}),Ji=ze({conv3d_:function(t,e,n,r,s="NDHWC",a=[1,1,1]){const i=Oe(t,"x","conv3d"),o=Oe(e,"filter","conv3d");let u=i,l=!1;4===i.rank&&(l=!0,u=dn(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),dt(5===u.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`),dt(5===o.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+"."),dt(u.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${o.shape[3]}.`),dt(Dr(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),dt("NDHWC"===s,()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`);const c=Ie.runKernelFunc((t,e)=>{const s=Ir(u.shape,o.shape,n,a,r),i=t.conv3d(u,o,s);return e([u,o]),i},{x:u,filter:o},null,"Conv3D",{strides:n,pad:r,dataFormat:s,dilations:a});return l?c.as4D(c.shape[1],c.shape[2],c.shape[3],c.shape[4]):c}}),Zi=ze({conv3dTranspose_:function(t,e,n,r,s){const a=Oe(t,"x","conv3dTranspose"),i=Oe(e,"filter","conv3dTranspose");return Jr(n,a,i,r,s)}}),Qi=ze({depthToSpace_:function(t,e,n="NHWC"){const r=Oe(t,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];return dt(s*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${e}  for depthToSpace with input shape\n    ${r.shape}`),dt(a*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${e} for depthToSpace with input shape\n        ${r.shape}`),dt(i%(e*e)==0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${i} for depthToSpace with input shape ${r.shape}`),Ie.runKernelFunc(t=>t.depthToSpace(r,e,n),{x:r},null,"DepthToSpace",{blockSize:e,dataFormat:n})}}),to=ze({depthwiseConv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Oe(t,"x","depthwiseConv2d"),u=Oe(e,"filter","depthwiseConv2d");let l=o,c=!1;3===o.rank&&(c=!0,l=dn(o,[1,o.shape[0],o.shape[1],o.shape[2]])),dt(4===l.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`),dt(4===u.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+"."),dt(l.shape[3]===u.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),null!=i&&dt(xt(r),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h=Ie.runKernelFunc((t,e)=>{null==a&&(a=[1,1]),dt(Dr(n,a),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const s=Nr(l.shape,u.shape,n,a,r,i,!0),o=t.depthwiseConv2D(l,u,s);return e([l,u]),o},{x:l,filter:u},null,"DepthwiseConv2dNative",{strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i});return c?dn(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),eo=ze({diag_:function(t){const e=Oe(t,"x","diag").flatten();return Ie.runKernelFunc(n=>{const r=n.diag(e),s=[...t.shape,...t.shape];return dn(r,s)},{x:e},null,"Diag")}}),no=ze({divNoNan_:function(t,e){let n=Oe(t,"a","div"),r=Oe(e,"b","div");[n,r]=xe(n,r);const s=bn(n,r),a=an(s),i=r.equal(a);return _s(i,a,s)}}),ro=ze({dot_:function(t,e){const n=Oe(t,"t1","dot"),r=Oe(e,"t2","dot");dt(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(dt(s===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`),1===n.rank&&1===r.rank){const t=dn(n,[1,-1]),e=dn(r,[-1,1]),s=Lr(t,e);return dn(s,[])}if(1===n.rank&&2===r.rank){const t=dn(n,[1,-1]),e=dn(r,[r.shape[0],r.shape[1]]),s=Lr(t,e);return dn(s,[s.size])}if(2===n.rank&&1===r.rank){const t=dn(r,[-1,1]),e=Lr(n,t);return dn(e,[e.size])}{const t=dn(r,[r.shape[0],r.shape[1]]);return Lr(n,t)}}}),so=ze({elu_:function(t){const e=Oe(t,"x","elu");return Ie.runKernelFunc((t,n)=>{const r=t.elu(e);return n([r]),r},{x:e},null,"Elu")}}),ao=ze({equal_:function(t,e){let n=Oe(t,"a","equal"),r=Oe(e,"b","equal");return[n,r]=xe(n,r),Te(n.shape,r.shape),Ie.runKernelFunc(t=>t.equal(n,r),{a:n,b:r},null,"Equal")}}),io=ze({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const s=un([t,e],r),a=t<=e?t:e;for(let o=0;o<a;++o)s.set(1,o,o);const i=s.toTensor().as2D(t,e);if(null==n)return i;if(1===n.length)return ls(hn(i,0),[n[0],1,1]);if(2===n.length)return ls(hn(hn(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return ls(hn(hn(hn(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function oo(t,e,n){return Ie.runKernelFunc(r=>r.fill(t,e,n),{},null,"Fill",{shape:t,value:e,dtype:n})}const uo=ze({maximum_:function(t,e){let n=Oe(t,"a","maximum"),r=Oe(e,"b","maximum");return[n,r]=xe(n,r),"bool"===n.dtype&&(n=cn(n,"int32"),r=cn(r,"int32")),Te(n.shape,r.shape),Ie.runKernelFunc((t,e)=>{const s=t.maximum(n,r);return e([n,r]),s},{a:n,b:r},null,"Maximum")}}),lo=ze({leakyRelu_:function(t,e=.2){const n=Oe(t,"x","leakyRelu");return uo(xn(He(e),n),n)}}),co=ze({localResponseNormalization_:function(t,e=5,n=1,r=1,s=.5){const a=Oe(t,"x","localResponseNormalization");dt(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),dt(xt(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=dn(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u=Ie.runKernelFunc((t,a)=>{const o=t.localResponseNormalization4D(i,e,n,r,s);return a([i,o]),o},{x:i},null,"LRN",{depthRadius:e,bias:n,alpha:r,beta:s});return o?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),ho=ze({max_:function(t,e=null,n=!1){const r=Oe(t,"x","max"),s=Ie.runKernelFunc((t,n)=>{let s=kt(e,r.shape);const a=kn(s,r.rank);let i=r;null!=a&&(i=Qr(r,a),s=En(s.length,i.rank));const o=t.max(i,s);return n([r,o]),null!=a&&t.disposeData(i.dataId),o},{x:r},null,"Max",{reductionIndices:e,keepDims:n});return n?dn(s,Nn(s.shape,kt(e,r.shape))):s}}),po=ze({maxPool_:function(t,e,n,r,s){const a=Oe(t,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=dn(a,[1,a.shape[0],a.shape[1],a.shape[2]])),dt(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),dt(Dr(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),null!=s&&dt(xt(r),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const u=Ie.runKernelFunc((t,a)=>{const o=Cr(i.shape,e,n,1,r,s);let u;return u=1===o.filterWidth&&1===o.filterHeight&&bt(o.inShape,o.outShape)?i.clone():t.maxPool(i,o),a([i,u]),u},{x:i},null,"MaxPool",{filterSize:e,strides:n,pad:r,dimRoundingMode:s});return o?dn(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),fo=ze({maxPool3d_:function(t,e=[1,1,1],n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:$i("dilations is deprecated, this field will be gone in v3.0.0.");const o=Oe(t,"x","maxPool3d");let u=o,l=!1;4===o.rank&&(l=!0,u=o.as5D(1,o.shape[0],o.shape[1],o.shape[2],o.shape[3])),dt(5===u.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${u.rank}.`),dt("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),dt(Dr(n,i),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&dt(xt(r),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const c=Ie.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const l=Sr(u.shape,e,n,i,r,s,a),c=t.maxPool3d(u,l);return o([u,c]),c},{x:u},null,"MaxPool3D",{filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i});return l?dn(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),mo=ze({maxPoolWithArgmax_:function(t,e,n,r,s=!1){const a=Oe(t,"x","maxPoolWithArgmax"),i=Ie.runKernel("MaxPoolWithArgmax",{x:a},{filterSize:e,strides:n,pad:r,includeBatchInIndex:s});return{result:i[0],indexes:i[1]}}}),go=ze({minimum_:function(t,e){let n=Oe(t,"a","minimum"),r=Oe(e,"b","minimum");return[n,r]=xe(n,r),"bool"===n.dtype&&(n=cn(n,"int32"),r=cn(r,"int32")),Te(n.shape,r.shape),Ie.runKernelFunc((t,e)=>{const s=t.minimum(n,r);return e([n,r]),s},{a:n,b:r},null,"Minimum")}}),yo=ze({mod_:function(t,e){let n=Oe(t,"a","mod"),r=Oe(e,"b","mod");return[n,r]=xe(n,r),Ie.runKernelFunc((t,e)=>{const s=t.mod(n,r);return e([n,r]),s},{a:n,b:r},null,"Mod")}}),bo=ze({multinomial_:function(t,e,n,r=!1){const s=Oe(t,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();const o=1===i?s.as2D(1,-1):s,u=Ie.runKernelFunc(t=>t.multinomial(o,r,e,n),{logits2D:o});return 1===i?u.as1D():u}}),xo=ze({notEqual_:function(t,e){let n=Oe(t,"a","notEqual"),r=Oe(e,"b","notEqual");return[n,r]=xe(n,r),Te(n.shape,r.shape),Ie.runKernelFunc(t=>t.notEqual(n,r),{a:n,b:r},null,"NotEqual")}}),wo=ze({outerProduct_:function(t,e){const n=Oe(t,"v1","outerProduct"),r=Oe(e,"v2","outerProduct");dt(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`);const s=dn(n,[-1,1]),a=dn(r,[1,-1]);return Lr(s,a)}}),vo=ze({pad1d_:function(t,e,n=0){return dt(2===e.length,()=>"Invalid number of paddings. Must be length of 2."),Ys(t,[e],n)}}),Co=ze({pad2d_:function(t,e,n=0){return dt(2===e.length&&2===e[0].length&&2===e[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),Ys(t,e,n)}}),So=ze({pad3d_:function(t,e,n=0){return dt(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),Ys(t,e,n)}}),No=ze({pad4d_:function(t,e,n=0){return dt(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),Ys(t,e,n)}}),Io=ze({pool_:function(t,e,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Oe(t,"x","maxPool");let o=i,u=!1;3===i.rank&&(u=!0,o=dn(i,[1,i.shape[0],i.shape[1],i.shape[2]])),dt(Dr(a,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`);const l=Cr(o.shape,e,a,s,r),c=[l.dilationHeight,l.dilationWidth];let h;h="same"===r?function(t,e){const n=t.map((t,n)=>t+(t-1)*(e[n]-1)).map(t=>t-1),r=n.map(t=>Math.floor(t/2)),s=n.map((t,e)=>t-r[e]);return n.map((t,e)=>[r[e],s[e]])}([l.filterHeight,l.filterWidth],c):[[0,0],[0,0]];const d=1===c[0]&&1===c[1],[p,f]=function(t,e,n){const r=n.map(t=>t[0]),s=n.map(t=>t[1]),a=t.concat(r,s),i=e.map((t,e)=>(t-a[e]%t)%t),o=s.map((t,e)=>t+i[e]);return[e.map((t,e)=>[r[e],o[e]]),e.map((t,e)=>[0,i[e]])]}([l.inHeight,l.inWidth],c,h),m=d?r:"valid",g=d?o:Pr(o,c,p),y=("avg"===n?()=>Mi(g,e,a,m):()=>po(g,e,a,m))(),b=d?y:Gs(y,c,f);return u?dn(b,[b.shape[1],b.shape[2],b.shape[3]]):b}}),ko=ze({prelu_:function(t,e){const n=Oe(t,"x","prelu"),r=Oe(e,"alpha","prelu");return Ie.runKernelFunc((t,e)=>{const s=t.prelu(n,r);return e([n,r]),s},{x:n,alpha:r},null,"Prelu")}}),$o=ze({rand_:function(t,e,n){const r=gt(t);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);s=new Uint8Array(r)}for(let a=0;a<r;a++)s[a]=e();return Ie.makeTensor(s,t,n)}});var Eo=n("YSVl");class Ao{constructor(t,e,n,r,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Eo.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class Ro{constructor(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;const s=r||Math.random();this.randu=Eo.alea(s.toString()),this.randn=new Ao(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,n=.5*t+this.d*(1-a+Math.log(a)),s=this.randu(),s<e||Math.log(s)<n)break}return a*=1/this.beta*this.d,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class To{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Eo.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Do=ze({randomGamma_:function(t,e,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);const a=new Ro(e,n,r,s),i=un(t,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),Fo=ze({randomNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const a=new Ao(e,n,r,!1,s),i=un(t,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),_o=ze({randomUniform_:function(t,e=0,n=1,r="float32",s){const a=un(t,r),i=new To(e,n,null,s);for(let o=0;o<a.values.length;o++)a.values[o]=i.nextValue();return a.toTensor()}}),Oo=ze({relu_:function(t){const e=Oe(t,"x","relu");return Ie.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?e.toInt():t.relu(e)),{x:e},null,"Relu")}}),Mo=ze({relu6_:function(t){const e=Oe(t,"x","relu6");return Ie.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?cn(e,"int32"):t.relu6(e)),{x:e},null,"Relu6")}}),zo=ze({selu_:function(t){const e=Oe(t,"x","selu");return Ie.runKernelFunc((t,n)=>{const r=t.selu(e);return n([e]),r},{x:e},null,"Selu")}}),Lo=ze({separableConv2d_:function(t,e,n,r,s,a=[1,1],i="NHWC"){const o=Oe(t,"x","separableConv2d"),u=Oe(e,"depthwiseFilter","separableConv2d"),l=Oe(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");dt(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),dt(4===u.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`),dt(4===l.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`),dt(1===l.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`),dt(1===l.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`);const d=u.shape[2],p=u.shape[3];dt(l.shape[2]===d*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${l.shape[2]}.`);const f=to(c,u,r,s,i,a),m=Kr(f,l,1,"valid",i);return h?m.as3D(m.shape[1],m.shape[2],m.shape[3]):m}}),Bo=ze({squaredDifference_:function(t,e){let n=Oe(t,"a","squaredDifference"),r=Oe(e,"b","squaredDifference");return[n,r]=xe(n,r),Te(n.shape,r.shape),Ie.runKernelFunc((t,e)=>{const s=t.squaredDifference(n,r);return e([n,r]),s},{a:n,b:r},null,"SquaredDifference",{})}}),Po=ze({truncatedNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Ao(e,n,r,!0,s),i=un(t,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),Wo=30;function Vo(t){return t<=Wo?t:Wt(t,Math.floor(Math.sqrt(t)))}function Uo(t,e){let n,r=!1;for(t<=Wo?(n=t,r=!0):n=Wt(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=Wt(t,n+1);return n}function Go(t,e,n){const r=[],s=t.length;for(let a=0;a<s;a++)r.push(a!==e?t[a]:n);return r}function qo(t,e,n){const r=t.shape[n],s=[];let a=1,i=1;for(let o=0;o<n;o++)s.push(t.shape[o]),a*=t.shape[o];for(let o=0;o<e.rank;o++)s.push(e.shape[o]);for(let o=n+1;o<t.rank;o++)s.push(t.shape[o]),i*=t.shape[o];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:s}}function Ho(t,e){const n=[];for(let r=t;r<e;++r)n.push(r);return n}function jo(t){const e=[];for(let n=0;n<t.length;++n)for(let r=0;r<t[n].length;++r)e.push(t[n][r]);return e}const Ko=ze({gather_:function(t,e,n=0){const r=Oe(t,"x","gather"),s=Oe(e,"indices","gather","int32");n=kt(n,r.shape)[0];const a=qo(r,s,n);return Ie.runKernelFunc((t,e)=>{const a=t.gather(r,s.flatten(),n);return e([s]),a},{x:r,indices:s},(t,e)=>{const[s]=e;return{x:()=>{const e=r.shape,a=s.size,i=e.slice(0,n),o=i.length,u=e.slice(n,e.length).slice(1),l=u.length,c=Ho(0,o),h=Ho(o+1,o+1+l),d=jo([i,[a],u]),p=t.reshape(d),f=s.reshape([a]),m=jo([[o],c,h]),g=p.transpose(m);let y=Xo(g,f,r.shape[n]);const b=$n(m);return y=y.transpose(b),y},indices:()=>s}},"Gather",{axis:n}).reshape(a.outputShape)}}),Xo=ze({unsortedSegmentSum_:function(t,e,n){const r=Oe(t,"x","unsortedSegmentSum"),s=Oe(e,"segmentIds","unsortedSegmentSum","int32");return dt(xt(n),()=>"numSegments must be of dtype int"),Ie.runKernelFunc((t,e)=>{const a=t.unsortedSegmentSum(r,s,n);return e([s]),a},{$x:r},(t,e)=>{const[n]=e;return{$x:()=>function(t,e){const n=uo(e,an(e)),r=Ko(t,n);let s=ms(e,He(0,"int32"));const a=r.rank-s.rank;for(let o=0;o<a;++o)s=hn(s,o+1);s=Rs(s,tn(r.shape,"bool"));const i=an(r);return _s(s,r,i)}(t,n)}})}}),Yo=async function(t,e,n){const r=Oe(t,"tensor","boolMask"),s=Oe(e,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,o=r.shape;dt(i>0,()=>"mask cannot be scalar"),pt(o.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let m=a;m<a+i;m++)u*=o[m];const l=o.slice(0,a).concat([u],o.slice(a+i)),c=r.reshape(l),h=s.reshape([-1]),d=await Os(h),p=d.squeeze([1]),f=Ko(c,p,a);return t!==r&&r.dispose(),e!==s&&s.dispose(),p.dispose(),c.dispose(),h.dispose(),d.dispose(),f},Jo=ze({reverse_:function(t,e){const n=Oe(t,"x","reverse");if(0===n.rank)return n.clone();const r=kt(e,n.shape);return Ie.runKernelFunc(t=>t.reverse(n,r),{$x:n},t=>({$x:()=>t.reverse(r)})).reshapeAs(n)}}),Zo=ze({reverse1d_:function(t){const e=Oe(t,"x","reverse");return dt(1===e.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`),Jo(e,0)}}),Qo=ze({reverse2d_:function(t,e){const n=Oe(t,"x","reverse");return dt(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),Jo(n,e)}}),tu=ze({reverse3d_:function(t,e){const n=Oe(t,"x","reverse");return dt(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),Jo(n,e)}}),eu=ze({reverse4d_:function(t,e){const n=Oe(t,"x","reverse");return dt(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),Jo(n,e)}}),nu=ze({equalStrict_:function(t,e){$i("strict variants of ops have been deprecated and will be removed in future");const n=Oe(t,"a","equalStrict"),r=Oe(e,"b","equalStrict");return pt(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),ru=ze({greaterEqualStrict_:function(t,e){$i("strict variants of ops have been deprecated and will be removed in future");const n=Oe(t,"a","greaterEqualStrict"),r=Oe(e,"b","greaterEqualStrict");return pt(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),su=ze({greaterStrict_:function(t,e){$i("strict variants of ops have been deprecated and will be removed in future");const n=Oe(t,"a","greaterStrict"),r=Oe(e,"b","greaterStrict");return pt(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),au=ze({lessEqualStrict_:function(t,e){$i("strict variants of ops have been deprecated and will be removed in future");const n=Oe(t,"a","lessEqualStrict"),r=Oe(e,"b","lessEqualStrict");return pt(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),iu=ze({lessStrict_:function(t,e){$i("strict variants of ops have been deprecated and will be removed in future");const n=Oe(t,"a","lessStrict"),r=Oe(e,"b","lessStrict");return pt(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),ou=ze({notEqualStrict_:function(t,e){$i("strict variants of ops have been deprecated and will be removed in future");const n=Oe(t,"a","notEqualStrict"),r=Oe(e,"b","notEqualStrict");return pt(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}}),uu=ze({addStrict_:function(t,e){$i("strict variants of ops have been deprecated and will be removed in future");const n=Oe(t,"a","addStrict"),r=Oe(e,"b","addStrict");return pt(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),lu=ze({divStrict_:function(t,e){$i("strict variants of ops have been deprecated and will be removed in future");const n=Oe(t,"a","div"),r=Oe(e,"b","div");return pt(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),cu=ze({maximumStrict_:function(t,e){$i("strict variants of ops have been deprecated and will be removed in future");const n=Oe(t,"a","maximumStrict"),r=Oe(e,"b","maximumStrict");return pt(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),hu=ze({minimumStrict_:function(t,e){$i("strict variants of ops have been deprecated and will be removed in future");const n=Oe(t,"a","minimumStrict"),r=Oe(e,"b","minimumStrict");return pt(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),du=ze({modStrict_:function(t,e){$i("strict variants of ops have been deprecated and will be removed in future");const n=Oe(t,"a","modStrict"),r=Oe(e,"b","modStrict");return pt(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),pu=ze({mulStrict_:function(t,e){$i("strict variants of ops have been deprecated and will be removed in future");const n=Oe(t,"a","mul"),r=Oe(e,"b","mul");return pt(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),fu=ze({powStrict_:function(t,e){return $i("strict variants of ops have been deprecated and will be removed in future"),pt(t.shape,e.shape,"Error in powStrict: "),t.pow(e)}}),mu=ze({squaredDifferenceStrict_:function(t,e){$i("strict variants of ops have been deprecated and will be removed in future");const n=Oe(t,"a","squaredDifferenceStrict"),r=Oe(e,"b","squaredDifferenceStrict");return pt(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),gu=ze({subStrict_:function(t,e){$i("strict variants of ops have been deprecated and will be removed in future");const n=Oe(t,"a","subStrict"),r=Oe(e,"b","subStrict");return pt(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}}),yu=ze({softmax_:function(t,e=-1){const n=Oe(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);return Ie.runKernelFunc((t,r)=>{const s=t.softmax(n,e);return r([s]),s},{logits:n},(t,n)=>{const[r]=n,s=t.mul(r);return{logits:()=>s.sub(s.sum([e],!0).mul(r))}},"Softmax",{dim:e},[],[!0])}}),bu=ze({logSoftmax_:function(t,e=-1){const n=Oe(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);return wn((t,n)=>{const r=t.max(e,!0),s=t.sub(r),a=s.toFloat().sub(s.exp().sum(e,!0).log());return n([a]),{value:a,gradFunc:(t,n)=>{const[r]=n,s=r.exp();return t.sub(t.sum(e,!0).mul(s))}}})(n)}}),xu=ze({norm_:function(t,e="euclidean",n=null,r=!1){const s=function t(e,n,r=null){if(0===e.rank)return e.abs();if(1!==e.rank&&null===r)return t(e.reshape([-1]),n,r);if(1===e.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return e.abs().sum(r);if(n===1/0)return e.abs().max(r);if(n===-1/0)return e.abs().min(r);if("euclidean"===n||2===n)return e.abs().pow(He(2,"int32")).sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return e.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return e.abs().sum(r[1]).max(r[0]);if(n===-1/0)return e.abs().sum(r[1]).min(r[0]);if("fro"===n||"euclidean"===n)return e.square().sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(t=Oe(t,"x","norm"),e,n);let a=s.shape;if(r){const e=kt(n,t.shape);a=Nn(s.shape,e)}return s.reshape(a)}}),wu=ze({basicLSTMCell_:function(t,e,n,r,s,a){const i=Oe(t,"forgetBias","basicLSTMCell"),o=Oe(e,"lstmKernel","basicLSTMCell"),u=Oe(n,"lstmBias","basicLSTMCell"),l=Oe(r,"data","basicLSTMCell"),c=Oe(s,"c","basicLSTMCell"),h=Oe(a,"h","basicLSTMCell"),d=l.concat(h,1).matMul(o).add(u),p=d.shape[1]/4,f=[d.shape[0],p],m=d.slice([0,0],f),g=d.slice([0,p],f),y=d.slice([0,2*p],f),b=d.slice([0,3*p],f),x=m.sigmoid().mul(g.tanh()).add(c.mul(i.add(y).sigmoid())),w=x.tanh().mul(b.sigmoid());return[x,w]}}),vu=ze({multiRNNCell_:function(t,e,n,r){const s=Oe(e,"data","multiRNNCell"),a=Me(n,"c","multiRNNCell"),i=Me(r,"h","multiRNNCell");let o=s;const u=[];for(let h=0;h<t.length;h++){const e=t[h](o,a[h],i[h]);u.push(e[0]),u.push(e[1]),o=e[1]}const l=[],c=[];for(let h=0;h<u.length;h+=2)l.push(u[h]),c.push(u[h+1]);return[l,c]}}),Cu=ze({movingAverage_:function(t,e,n,r,s=!0){const a=Oe(t,"v","movingAverage"),i=Oe(e,"x","movingAverage"),o=Oe(n,"decay","movingAverage");we(a,i),dt(bt(a.shape,i.shape),()=>"Shape mismatch in v and x");const u=He(1),l=u.sub(o);let c=i.sub(a).mul(l);if(s){dt(null!=r,()=>"When using zeroDebias: true, step is required.");const t=Oe(r,"step","movingAverage");c=c.div(u.sub(Ms(o,t)))}return a.add(c)}}),Su=ze({stridedSlice_:function(t,e,n,r,s=0,a=0,i=0,o=0,u=0){null==r&&(r=new Array(e.length));const l=Zs(i);if(l.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");let c=Oe(t,"x","stridedSlice");const h=c.rank-e.length,d=Zs(o),p=c.shape.slice();d.forEach(t=>{e[t]=0,n[t]=1,p.splice(t,0,1)}),c=c.reshape(p);for(let y=0;y<c.rank;y++)e[y]=sa(s,e,r,c.shape,y,i),n[y]=aa(a,n,r,c.shape,y,i),r[y]=ra(r,y,i);if(l.length&&h>0){const t=l[0],s=h+1;e=ea(e,t,s),n=na(n,t,s,c.shape),r=ta(r,t,s)}const f=Zs(u);f.forEach(t=>{n[t]=e[t]+1,r[t]=1});const m=Qs(e,n,r),g=m.filter((t,e)=>-1===f.indexOf(e));return r.every(t=>1===t)?ua(c,e,m).reshape(g):Ie.runKernelFunc(t=>t.stridedSlice(c,e,n,r),{$x:c}).reshape(g)}}),Nu=ze({topk_:function(t,e=1,n=!0){const r=Oe(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got `+e);const[a,i]=Ie.runKernelFunc(t=>t.topk(r,e,n),{$x:r});return{values:a,indices:i}}}),Iu=ze({scatterND_:function(t,e,n){const r=Oe(t,"indices","scatterND","int32"),s=Oe(e,"updates","scatterND");return Ci(s,r,n),Ie.runKernelFunc(t=>t.scatterND(r,s,n),{indices:r,updates:s},null,"ScatterNd",{shape:n})}}),ku=ze({fft_:function(t){dt("complex64"===t.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`);const e=t.shape[t.shape.length-1],n=t.as2D(t.size/e,e);return Ie.runKernelFunc(t=>t.fft(n),{input:t}).reshape(t.shape)}}),$u=ze({ifft_:function(t){dt("complex64"===t.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`);const e=t.shape[t.shape.length-1],n=t.as2D(t.size/e,e);return Ie.runKernelFunc(t=>t.ifft(n),{input:t}).reshape(t.shape)}}),Eu=ze({rfft_:function(t,e){dt("float32"===t.dtype,()=>"The dtype for rfft() must be real value but got "+t.dtype);let n=t.shape[t.shape.length-1];const r=t.size/n;let s;if(null!=e&&e<n){const r=t.shape.map(t=>0),a=t.shape.map(t=>t);a[t.shape.length-1]=e,s=t.slice(r,a),n=e}else if(null!=e&&e>n){const r=t.shape.map(t=>t);r[t.shape.length-1]=e-n,s=t.concat(en(r),t.shape.length-1),n=e}else s=t;const a=s.zerosLike(),i=We(s,a).as2D(r,n),o=ku(i),u=Math.floor(n/2)+1,l=Ue(o),c=Ve(o),h=l.split([u,n-u],l.shape.length-1),d=c.split([u,n-u],c.shape.length-1),p=s.shape.slice();return p[s.shape.length-1]=u,We(h[0],d[0]).reshape(p)}}),Au=ze({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;if(e<=2){const r=t.as2D(n,e),s=$u(r);return Ue(s)}{const r=[n,2*(e-1)],s=Ue(t).as2D(n,e),a=Ve(t).as2D(n,e),i=s.slice([0,1],[n,e-2]).reverse(1),o=a.slice([0,1],[n,e-2]).reverse(1).mul(He(-1)),u=s.concat(i,1),l=a.concat(o,1),c=We(u,l).as2D(r[0],r[1]),h=$u(c);return Ue(h)}}}),Ru=ze({sparseToDense_:function(t,e,n,r=0){const s=Oe(t,"sparseIndices","sparseToDense","int32"),a=Oe(e,"sparseValues","sparseToDense"),i=Oe(r,"defaultValue","sparseToDense",a.dtype);return function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const s=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);if(0!==e.rank&&(1!==e.rank||e.size!==s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i),Ie.runKernelFunc(t=>t.sparseToDense(s,a,n,i),{$sparseIndices:s,$sparseValues:a,$defaultValue:i})}}),Tu=ze({gatherND_:function(t,e){const n=Oe(e,"indices","gatherND","int32"),r=Oe(t,"x","gatherND");return Ie.runKernelFunc(t=>t.gatherND(r,n),{params:r,indices:n},null,"GatherNd")}}),Du=ze({dropout_:function(t,e,n,r){const s=Oe(t,"x","dropout");if(dt("float32"===s.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),dt(e>=0&&e<1,()=>`rate must be a float in the range [0, 1), but got ${e}.`),0===e)return t instanceof le?s.clone():s;const a=function(t,e){if(null==e)return t.shape.slice();if(bt(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let r=0;r<t.shape.length;r++)n.push(null==e[r]&&null!=t.shape[r]?t.shape[r]:e[r]);return n}return e}(s,n),i=1-e,o=_o(a,0,1,"float32",r).add(i).floor().div(i);return s.mul(o)}});function Fu(t,e,n){const r=1-t%2,s=new Float32Array(t);for(let a=0;a<t;++a){const i=2*Math.PI*a/(t+r-1);s[a]=e-n*Math.cos(i)}return je(s,"float32")}const _u=ze({hannWindow_:function(t){return Fu(t,.5,.5)}}),Ou=ze({hammingWindow_:function(t){return Fu(t,.54,.46)}}),Mu=ze({frame_:function(t,e,n,r=!1,s=0){let a=0;const i=[];for(;a+e<=t.size;)i.push(ua(t,a,e)),a+=n;if(r)for(;a<t.size;){const r=a+e-t.size,o=on([ua(t,a,e-r),oo([r],s)]);i.push(o),a+=n}return 0===i.length?Ke([],[0,e]):on(i).as2D(i.length,e)}}),zu=ze({stft_:function(t,e,n,r,s=_u){null==r&&(r=Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2)))));const a=Mu(t,e,n),i=xn(a,s(e)),o=[];for(let u=0;u<a.shape[0];u++)o.push(Eu(i.slice([u,0],[1,e]),r));return on(o)}}),Lu=async function(t,e,n=1){const r=Oe(t,"predictions","inTopK"),s=Oe(e,"targets","inTopK");dt(r.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank),dt(r.rank-1===s.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`),pt(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];dt(n>0&&n<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);const i=await r.data(),o=await s.data(),[u,l]=[i.length/a,a],c=Et("bool",u);for(let h=0;h<u;h++){const t=h*l,e=i.subarray(t,t+l),r=[];for(let n=0;n<e.length;n++)r.push({value:e[n],index:n});r.sort((t,e)=>e.value-t.value),c[h]=0;for(let s=0;s<n;s++)if(r[s].index===o[h]){c[h]=1;break}}return t!==r&&r.dispose(),e!==s&&s.dispose(),Ge(c,s.shape,"bool")};var Bu;!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Bu||(Bu={}));const Pu=ze({absoluteDifference_:function(t,e,n,r=Bu.SUM_BY_NONZERO_WEIGHTS){const s=Oe(t,"labels","absoluteDifference"),a=Oe(e,"predictions","absoluteDifference");let i=null;null!=n&&(i=Oe(n,"weights","absoluteDifference")),pt(s.shape,a.shape,"Error in absoluteDifference: ");const o=s.sub(a).abs();return Wu(o,i,r)}}),Wu=ze({computeWeightedLoss_:function(t,e,n=Bu.SUM_BY_NONZERO_WEIGHTS){const r=Oe(t,"losses","computeWeightedLoss");let s=null;null!=e&&(s=Oe(e,"weights","computeWeightedLoss"));const a=null==s?r:r.mul(s);if(n===Bu.NONE)return a;if(n===Bu.SUM)return a.sum();if(n===Bu.MEAN){if(null==s)return a.mean();{const t=r.size/s.size,e=a.sum().div(s.sum());return t>1?e.div(He(t)):e}}if(n===Bu.SUM_BY_NONZERO_WEIGHTS){if(null==s)return a.sum().div(He(r.size));{const t=s.mul(tn(r.shape)).notEqual(He(0)).sum().toFloat();return a.sum().div(t)}}throw Error("Unknown reduction: "+n)}}),Vu=ze({cosineDistance_:function(t,e,n,r,s=Bu.SUM_BY_NONZERO_WEIGHTS){const a=Oe(t,"labels","cosineDistance"),i=Oe(e,"predictions","cosineDistance");let o=null;null!=r&&(o=Oe(r,"weights","cosineDistance")),pt(a.shape,i.shape,"Error in cosineDistance: ");const u=He(1).sub(a.mul(i).sum(n,!0));return Wu(u,o,s)}}),Uu=ze({hingeLoss_:function(t,e,n,r=Bu.SUM_BY_NONZERO_WEIGHTS){let s=Oe(t,"labels","hingeLoss");const a=Oe(e,"predictions","hingeLoss");let i=null;null!=n&&(i=Oe(n,"weights","hingeLoss")),pt(s.shape,a.shape,"Error in hingeLoss: ");const o=He(1);s=He(2).mul(s).sub(o);const u=o.sub(s.mul(a)).relu();return Wu(u,i,r)}}),Gu=ze({huberLoss_:function(t,e,n,r=1,s=Bu.SUM_BY_NONZERO_WEIGHTS){const a=Oe(t,"labels","huberLoss"),i=Oe(e,"predictions","huberLoss");let o=null;null!=n&&(o=Oe(n,"weights","huberLoss")),pt(a.shape,i.shape,"Error in huberLoss: ");const u=He(r),l=i.sub(a).abs(),c=go(l,u),h=l.sub(c),d=He(.5).mul(c.square()).add(u.mul(h));return Wu(d,o,s)}}),qu=ze({logLoss_:function(t,e,n,r=1e-7,s=Bu.SUM_BY_NONZERO_WEIGHTS){const a=Oe(t,"labels","logLoss"),i=Oe(e,"predictions","logLoss");let o=null;null!=n&&(o=Oe(n,"weights","logLoss")),pt(a.shape,i.shape,"Error in logLoss: ");const u=He(1),l=He(r),c=a.mul(i.add(l).log()).neg().sub(u.sub(a).mul(u.sub(i).add(l).log()));return Wu(c,o,s)}}),Hu=ze({meanSquaredError_:function(t,e,n,r=Bu.SUM_BY_NONZERO_WEIGHTS){const s=Oe(t,"labels","meanSquaredError"),a=Oe(e,"predictions","meanSquaredError");let i=null;null!=n&&(i=Oe(n,"weights","meanSquaredError")),pt(s.shape,a.shape,"Error in meanSquaredError: ");const o=s.squaredDifference(a);return Wu(o,i,r)}}),ju=ze({sigmoidCrossEntropy_:function(t,e,n,r=0,s=Bu.SUM_BY_NONZERO_WEIGHTS){let a=Oe(t,"multiClassLabels","sigmoidCrossEntropy");const i=Oe(e,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Oe(n,"weights","sigmoidCrossEntropy")),pt(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const t=He(r),e=He(1),n=He(.5);a=a.mul(e.sub(t)).add(n.mul(t))}const u=function(t,e){const n=Oe(t,"labels","sigmoidCrossEntropyWithLogits"),r=Oe(e,"logits","sigmoidCrossEntropyWithLogits");pt(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=r.relu(),a=r.mul(n),i=r.abs().neg().exp().log1p();return s.sub(a).add(i)}(a,i);return Wu(u,o,s)}}),Ku=ze({softmaxCrossEntropy_:function(t,e,n,r=0,s=Bu.SUM_BY_NONZERO_WEIGHTS){let a=Oe(t,"onehotLabels","softmaxCrossEntropy");const i=Oe(e,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Oe(n,"weights","softmaxCrossEntropy")),pt(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const t=He(r),e=He(1),n=He(a.shape[1]);a=a.mul(e.sub(t)).add(t.div(n))}const u=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was `+n);return wn((t,e,r)=>{const s=e.logSumExp([n],!0),a=e.toFloat().sub(s);return r([t,a]),{value:a.mul(t).neg().sum([n]),gradFunc:(t,e)=>{const[r,s]=e,a=Nn(t.shape,[n]);return[t.reshape(a).mul(r.toFloat().sub(s.exp())),t.reshape(a).mul(s.exp().sub(r.toFloat()))]}}})(t,e)}(a,i);return Wu(u,o,s)}});function Xu(t,e=!1){return Ie.tidy(()=>{if(2!==t.shape.length)throw new Error(`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`);const n=t.shape[0],r=t.shape[1];let s=io(n),a=t.clone();const i=Ke([[1]],[1,1]);let o=i.clone();const u=n>=r?r:n;for(let t=0;t<u;++t){const e=a,u=o,l=s;[o,a,s]=Ie.tidy(()=>{const e=a.slice([t,t],[n-t,1]),u=e.norm(),l=a.slice([t,t],[1,1]),c=Ke([[-1]]).where(l.greater(0),Ke([[1]])),h=l.sub(c.mul(u)),d=e.div(h);o=1===d.shape[0]?i.clone():i.concat(d.slice([1,0],[d.shape[0]-1,d.shape[1]]),0);const p=c.matMul(h).div(u).neg(),f=a.slice([t,0],[n-t,r]),m=p.mul(o),g=o.transpose();if(0===t)a=f.sub(m.matMul(g.matMul(f)));else{const e=f.sub(m.matMul(g.matMul(f)));a=a.slice([0,0],[t,r]).concat(e,0)}const y=m.transpose(),b=s.slice([0,t],[n,s.shape[1]-t]);if(0===t)s=b.sub(b.matMul(o).matMul(y));else{const e=b.sub(b.matMul(o).matMul(y));s=s.slice([0,0],[n,t]).concat(e,1)}return[o,a,s]}),Ti([e,u,l])}return!e&&n>r&&(s=s.slice([0,0],[n,r]),a=a.slice([0,0],[r,r])),[s,a]})}const Yu=ze({bandPart_:function(t,e,n){if(e%1!=0)throw new Error(`bandPart(): numLower must be an integer, got ${e}.`);if(n%1!=0)throw new Error(`bandPart(): numUpper must be an integer, got ${n}.`);const r=Oe(t,"a","bandPart");if(r.rank<2)throw new Error(`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[a,i]=r.shape.slice(-2);if(!(e<=a))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);e<0&&(e=a),n<0&&(n=i);const o=rn(0,a,1,"int32").reshape([-1,1]),u=rn(0,i,1,"int32"),l=us(o,u),c=Rs(l.lessEqual(He(+e,"int32")),l.greaterEqual(He(-n,"int32"))),h=en([a,i],r.dtype);return fn(mn(r.reshape([-1,a,i])).map(t=>_s(c,t,h))).reshape(s)}}),Ju=ze({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,dt(null!=t&&t.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=t[0].shape[0];for(let e=1;e<t.length;++e)dt(t[e].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`)}else e=!0,t=Ur(t,t.shape[0],0).map(t=>pn(t,[0]));dt(t.length<=t[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`);const n=[],r=t;for(let s=0;s<t.length;++s)n.push(Ie.tidy(()=>{let t=r[s];if(s>0)for(let e=0;e<s;++e){const r=Ln(n[e].mul(t)).mul(n[e]);t=t.sub(r)}return t.div(xu(t,"euclidean"))}));return e?fn(n,0):n}}),Zu=ze({qr_:function(t,e=!1){if(t.rank<2)throw new Error("qr() requires input tensor to have a rank >= 2, but got rank "+t.rank);if(2===t.rank)return Xu(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce((t,e)=>t*e),r=mn(t.reshape([n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],a=[];return r.forEach(t=>{const[n,r]=Xu(t,e);s.push(n),a.push(r)}),[fn(s,0).reshape(t.shape),fn(a,0).reshape(t.shape)]}}});function Qu(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,s=t.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(e,t[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(t,e,n||tl)}(t,e,n);t.splice(r<0?-(r+1):r,0,e)}function tl(t,e){return t>e?1:t<e?-1:0}function el(t,e,n,r,s){const a=rl(t,e,n,r,s,0);return a.selectedScores.dispose(),a.numValidOutputs.dispose(),a.selectedIndices}function nl(t,e,n,r,s,a){const i=rl(t,e,n,r,s,a,!0);return i.numValidOutputs.dispose(),{selectedIndices:i.selectedIndices,selectedScores:i.selectedScores}}function rl(t,e,n,r,s,a,i=!1,o=!1){const u=[];for(let p=0;p<e.length;p++)e[p]>s&&u.push({score:e[p],boxIndex:p,suppressBeginIndex:0});u.sort(il);const l=a>0?-.5/a:0,c=[],h=[];for(;c.length<n&&u.length>0;){const e=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=e;if(n<s)break;let o=!1;for(let u=c.length-1;u>=i;--u){const n=sl(t,a,c[u]);if(n>=r){o=!0;break}if(e.score=e.score*al(r,l,n),e.score<=s)break}e.suppressBeginIndex=c.length,o||(e.score===n?(c.push(a),h.push(e.score)):e.score>s&&Qu(u,e,il))}const d=c.length;return o&&(c.fill(0,d),h.fill(0,d)),{selectedIndices:je(c,"int32"),selectedScores:je(h,"float32"),numValidOutputs:He(d,"int32")}}function sl(t,e,n){const r=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),d=Math.max(s[1],s[3]),p=(o-a)*(u-i),f=(h-l)*(d-c);if(p<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(u,d),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(p+f-x)}function al(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function il(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}function ol(t,e,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=t.shape[0];return n=Math.min(n,i),dt(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),dt(2===t.rank,()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`),dt(4===t.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]),dt(1===e.rank,()=>"scores must be a 1D tensor"),dt(e.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was `+e.shape[0]),dt(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const ul=ze({nonMaxSuppression_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Oe(t,"boxes","nonMaxSuppression"),i=Oe(e,"scores","nonMaxSuppression"),o=ol(a,i,n,r,s);return Ie.runKernelFunc(t=>t.nonMaxSuppression(a,i,n,r,s),{boxes:a,scores:i},null,"NonMaxSuppressionV3",{maxOutputSize:n=o.maxOutputSize,iouThreshold:r=o.iouThreshold,scoreThreshold:s=o.scoreThreshold})}}),ll=ze({resizeBilinear_:function(t,e,n=!1){const r=Oe(t,"images","resizeBilinear");dt(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),dt(2===e.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+e+".");let s=r,a=!1;3===r.rank&&(a=!0,s=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));const[i,o]=e,u=Ie.runKernelFunc((t,e)=>(e([s]),t.resizeBilinear(s,i,o,n)),{x:s},(t,e)=>({x:()=>Ie.runKernelFunc(r=>r.resizeBilinearBackprop(t,e[0],n),{})}),"ResizeBilinear",{alignCorners:n,newHeight:i,newWidth:o});return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),cl=ze({resizeNearestNeighbor_:function(t,e,n=!1){const r=Oe(t,"images","resizeNearestNeighbor");dt(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),dt(2===e.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."),dt("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype");let s=r,a=!1;3===r.rank&&(a=!0,s=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));const[i,o]=e,u=Ie.runKernelFunc((t,e)=>(e([s]),t.resizeNearestNeighbor(s,i,o,n)),{batchImages:s},(t,e)=>({batchImages:()=>Ie.runKernelFunc(r=>r.resizeNearestNeighborBackprop(t,e[0],n),{})}));return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),hl=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Oe(t,"boxes","nonMaxSuppressionAsync"),i=Oe(e,"scores","nonMaxSuppressionAsync"),o=ol(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),l=el(u[0],u[1],n,r,s);return a!==t&&a.dispose(),i!==e&&i.dispose(),l},dl=ze({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Oe(t,"boxes","nonMaxSuppression"),o=Oe(e,"scores","nonMaxSuppression"),u=ol(i,o,n,r,s,a),l=Ie.runKernel("NonMaxSuppressionV5",{boxes:i,scores:o},{maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma});return{selectedIndices:l[0],selectedScores:l[1]}}}),pl=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Oe(t,"boxes","nonMaxSuppressionAsync"),o=Oe(e,"scores","nonMaxSuppressionAsync"),u=ol(i,o,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([i.data(),o.data()]),c=nl(l[0],l[1],n,r,s,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),c},fl=ze({cropAndResize_:function(t,e,n,r,s,a){const i=Oe(t,"image","cropAndResize"),o=Oe(e,"boxes","cropAndResize","float32"),u=Oe(n,"boxInd","cropAndResize","int32");s=s||"bilinear",a=a||0;const l=o.shape[0];return dt(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),dt(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${o.shape}.`),dt(1===u.rank&&u.shape[0]===l,()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${o.shape}.`),dt(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),dt(r[0]>=1&&r[1]>=1,()=>"cropSize must be atleast [1,1], but was "+r),dt("bilinear"===s||"nearest"===s,()=>"method must be bilinear or nearest, but was "+s),Ie.runKernelFunc((t,e)=>t.cropAndResize(i,o,u,r,s,a),{images:i,boxes:o,boxInd:u},null,"CropAndResize",{method:s,extrapolationValue:a,cropSize:r})}}),ml=(t,e)=>!(t>0)||"linear"===e,gl=(t,e,n)=>{if(null==n||"linear"===n)return t;if("relu"===n)return t.mul(e.step());throw new Error(`Gradient for activation ${n} has not been implemented yet.`)},yl=(t,e)=>{let n=e;const r=Re(t.shape,e.shape);return r.length>0&&(n=n.sum(r)),n.reshape(t.shape)},bl=(t,e,n)=>{if("linear"===e)return t;if("relu"===e)return Oo(t);if("elu"===e)return so(t);if("relu6"===e)return Mo(t);if("prelu"===e)return ko(t,n);throw new Error(`Unknown fused activation ${e}.`)},xl=ze({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i}){if(!1===ml(Ie.state.gradientDepth,a)){let o=Lr(t,e,n,r);return null!=s&&(o=Le(o,s)),bl(o,a,i)}let o=Oe(t,"a","fused matMul"),u=Oe(e,"b","fused matMul");[o,u]=xe(o,u);const l=n?o.shape[o.rank-2]:o.shape[o.rank-1],c=r?u.shape[u.rank-1]:u.shape[u.rank-2],h=n?o.shape[o.rank-1]:o.shape[o.rank-2],d=r?u.shape[u.rank-2]:u.shape[u.rank-1],p=o.shape.slice(0,-2),f=u.shape.slice(0,-2),m=gt(p),g=gt(f);dt(o.rank>=2&&u.rank>=2&&o.rank===u.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${u.rank}.`),dt(bt(p,f),()=>`Error in fused matMul: outer dimensions (${p}) and (${f}) of Tensors with shapes ${o.shape} and `+u.shape+" must match."),dt(l===c,()=>`Error in fused matMul: inner shapes (${l}) and (${c}) of Tensors with shapes ${o.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`);const y=o.shape.slice(0,-2).concat([h,d]),b=n?o.as3D(m,l,h):o.as3D(m,h,l),x=r?u.as3D(g,d,c):u.as3D(g,c,d);let w,v;null!=s&&(w=Oe(s,"bias","fused matMul"),[w]=xe(w,o),Te(y,w.shape)),null!=i&&(v=Oe(i,"prelu weights","fused matMul"));const C={a:b,b:x};return null!=s&&(C.bias=w),null!=i&&(C.preluActivationWeights=v),Ie.runKernelFunc((t,e)=>{const s=t.fusedBatchMatMul({a:b,b:x,transposeA:n,transposeB:r,bias:w,activation:a,preluActivationWeights:v});return e([b,x,s]),s},C,(t,e)=>{const[i,o,u]=e,l=gl(t,u,a);let c={};return null!=s&&(c={bias:()=>yl(w,l)}),Object.assign(n||r?!n&&r?{a:()=>l.matMul(o,!1,!1),b:()=>l.matMul(i,!0,!1)}:n&&!r?{a:()=>o.matMul(l,!1,!0),b:()=>i.matMul(l,!1,!1)}:{a:()=>o.matMul(l,!0,!0),b:()=>l.matMul(i,!0,!0)}:{a:()=>l.matMul(o,!1,!0),b:()=>i.matMul(l,!0,!1)},c)},"_FusedMatMul",{transposeA:n,transposeB:r,activation:a},[b,x],[!0]).reshape(y)}}),wl=ze({fusedConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l}){if(!1===ml(Ie.state.gradientDepth,u=u||"linear")){let c=Kr(t,e,n,r,s,a,i);return null!=o&&(c=Le(c,o)),bl(c,u,l)}const c=Oe(t,"x","conv2d"),h=Oe(e,"filter","conv2d");let d=c,p=!1;3===c.rank&&(p=!0,d=c.as4D(1,c.shape[0],c.shape[1],c.shape[2])),dt(4===d.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+d.rank+"."),dt(4===h.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+h.rank+"."),null!=i&&dt(xt(r),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),dt(d.shape[3]===h.shape[2],()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${h.shape[2]}.`),dt(Dr(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),dt("NHWC"===s,()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`);const f=Nr(d.shape,h.shape,n,a,r,i);let m,g;null!=o&&(m=Oe(o,"bias","fused conv2d"),[m]=xe(m,c),Te(f.outShape,m.shape)),null!=l&&(g=Oe(l,"prelu weights","fused conv2d"));const y={x:d,filter:h};null!=o&&(y.bias=m),null!=l&&(y.preluActivationWeights=g);const b=Ie.runKernelFunc((t,e)=>{const n=t.fusedConv2d({input:d,filter:h,convInfo:f,bias:m,activation:u,preluActivationWeights:g});return e([h,d,n]),n},y,(t,e)=>{const[s,i,l]=e,c=gl(t,l,u);dt(Tr(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);let h={};return null!=o&&(h={bias:()=>yl(m,c)}),Object.assign({x:()=>Hr(i.shape,c,s,n,r),filter:()=>qr(i,c,s.shape,n,r)},h)},"FusedConv2D",{convInfo:f,activation:u},[h,d],[!0]);return p?b.as3D(b.shape[1],b.shape[2],b.shape[3]):b}}),vl=ze({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l}){if(!1===ml(Ie.state.gradientDepth,u)){let c=to(t,e,n,r,s,a,i);return null!=o&&(c=Le(c,o)),bl(c,u,l)}const c=Oe(t,"x","depthwiseConv2d"),h=Oe(e,"filter","depthwiseConv2d");let d=c,p=!1;3===c.rank&&(p=!0,d=c.as4D(1,c.shape[0],c.shape[1],c.shape[2])),dt(4===d.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`),dt(4===h.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`),dt(d.shape[3]===h.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),null==a&&(a=[1,1]),dt(Dr(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=i&&dt(xt(r),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${r}.`);const f=Nr(d.shape,h.shape,n,a,r,i,!0);let m,g;null!=o&&(m=Oe(o,"bias","fused conv2d"),[m]=xe(m,c),Te(f.outShape,m.shape)),null!=l&&(g=Oe(l,"prelu weights","fused depthwiseConv2d"));const y={x:d,filter:h};null!=o&&(y.bias=m),null!=l&&(y.preluActivationWeights=g);const b=Ie.runKernelFunc((t,e)=>{const n=t.fusedDepthwiseConv2D({input:d,filter:h,convInfo:f,bias:m,activation:u,preluActivationWeights:g});return e([h,d,n]),n},y,(t,e)=>{dt(Tr(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[n,r,s]=e,i=gl(t,s,u);let l={};return null!=o&&(l={bias:()=>yl(m,i)}),Object.assign({x:()=>rs(r.shape,i,n,f),filter:()=>ns(r,i,n.shape,f)},l)},"FusedDepthwiseConv2D",{convInfo:f,activation:u},[h,d],[!0]);return p?b.as3D(b.shape[1],b.shape[2],b.shape[3]):b}});class Cl extends Ni{minimize(t,e=!1,n){const{value:r,grads:s}=this.computeGradients(t,n);if(null!=n){const t=n.map(t=>({name:t.name,tensor:s[t.name]}));this.applyGradients(t)}else this.applyGradients(s);return Ti(s),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return function(t,e){dt(Pt(t),()=>"The f passed in variableGrads(f) must be a function"),dt(null==e||Array.isArray(e)&&e.every(t=>t instanceof ce),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=e;if(!n){e=[];for(const t in Ie.registeredVariables)e.push(Ie.registeredVariables[t])}const r=n?e.filter(t=>!t.trainable):null,s=e.length;dt((e=e.filter(t=>t.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const{value:a,grads:i}=Ie.gradients(t,e,null,!0);dt(i.some(t=>null!=t),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),dt(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return e.forEach((t,e)=>{null!=i[e]&&(o[t.name]=i[e])}),null!=r&&r.forEach(t=>o[t.name]=null),{value:a,grads:o}}(t,e)}dispose(){null!=this.iterations_&&Ti(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:He(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(Cl,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});class Sl extends Cl{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Ie.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Ie.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:e+"/accum_grad",variable:Ri(()=>an(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:e+"/accum_var",variable:Ri(()=>an(r).variable(!1))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;Ri(()=>{const t=a.mul(this.rho).add(s.square().mul(1-this.rho)),e=i.add(this.epsilon).sqrt().div(a.add(this.epsilon).sqrt()).mul(s),n=i.mul(this.rho).add(e.square().mul(1-this.rho));a.assign(t),i.assign(n);const o=e.mul(-this.learningRate).add(r);r.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Ti(this.accumulatedGrads.map(t=>t.variable)),Ti(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedUpdates=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}Sl.className="Adadelta",ki(Sl);class Nl extends Cl{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Ie.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:e+"/accumulator",variable:Ri(()=>oo(r.shape,this.initialAccumulatorValue).variable(t))}}const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable;Ri(()=>{const t=a.add(s.square());a.assign(t);const e=s.div(t.add(Ie.backend.epsilon()).sqrt()).mul(-this.learningRate).add(r);r.assign(e)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Ti(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t),this.accumulatedGrads=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}Nl.className="Adagrad",ki(Nl);class Il extends Cl{constructor(t,e,n,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Ri(()=>{this.accBeta1=He(e).variable(),this.accBeta2=He(n).variable()}),null==r&&(this.epsilon=Ie.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);Ri(()=>{const n=us(1,this.accBeta1),r=us(1,this.accBeta2);e.forEach((e,s)=>{const a=Ie.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:Ri(()=>an(a).variable(!1))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:e+"/v",variable:Ri(()=>an(a).variable(!1))});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,l=o.mul(this.beta1).add(i.mul(1-this.beta1)),c=u.mul(this.beta2).add(i.square().mul(1-this.beta2)),h=l.div(n),d=c.div(r);o.assign(l),u.assign(c);const p=h.div(d.sqrt().add(this.epsilon)).mul(-this.learningRate).add(a);a.assign(p)}),this.accBeta1.assign(this.accBeta1.mul(this.beta1)),this.accBeta2.assign(this.accBeta2.mul(this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Ti(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&Ti(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t),Ri(()=>{this.accBeta1.assign(Ms(this.beta1,this.iterations_+1)),this.accBeta2.assign(Ms(this.beta2,this.iterations_+1))});const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedSecondMoment=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}Il.className="Adam",ki(Il);class kl extends Cl{constructor(t,e,n,r=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Ri(()=>{this.iteration=He(0).variable(),this.accBeta1=He(e).variable()}),null==r&&(this.epsilon=Ie.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);Ri(()=>{const n=us(1,this.accBeta1),r=bn(-this.learningRate,this.iteration.mul(this.decay).add(1));e.forEach((e,s)=>{const a=Ie.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:an(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:e+"/v",variable:an(a).variable(!1)});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,l=o.mul(this.beta1).add(i.mul(1-this.beta1)),c=u.mul(this.beta2),h=i.abs(),d=c.maximum(h);o.assign(l),u.assign(d);const p=r.div(n).mul(l.div(d.add(this.epsilon))).add(a);a.assign(p)}),this.iteration.assign(this.iteration.add(1)),this.accBeta1.assign(this.accBeta1.mul(this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Ti(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&Ti(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}kl.className="Adamax",ki(kl);class $l extends Cl{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const s=Ie.registeredVariables[e];Ri(()=>{const t=this.c.mul(r).add(s);s.assign(t)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=Di(He(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}$l.className="SGD",ki($l);class El extends $l{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=He(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Ie.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:e+"/momentum",variable:Ri(()=>an(r).variable(t))}}const s=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[e];null!=a&&Ri(()=>{let t;const e=this.m.mul(s).add(a);t=this.useNesterov?this.c.mul(a.add(e.mul(this.m))).add(r):this.c.mul(e).add(r),s.assign(e),r.assign(t)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Ti(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t),this.accumulations=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}El.className="Momentum",ki(El);class Al extends Cl{constructor(t,e=.9,n=0,r=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=Ie.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Ie.registeredVariables[e];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:e+"/rms",variable:Ri(()=>an(r).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:e+"/momentum",variable:Ri(()=>an(r).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:e+"/mg",variable:Ri(()=>an(r).variable(!1))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;Ri(()=>{const t=a.mul(this.decay).add(s.square().mul(1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,o=e.mul(this.decay).add(s.mul(1-this.decay)),u=i.mul(this.momentum).add(s.mul(this.learningRate).div(t.sub(o.square().add(this.epsilon)).sqrt()));a.assign(t),e.assign(o),i.assign(u);const l=r.sub(u);r.assign(l)}else{const t=a.mul(this.decay).add(s.square().mul(1-this.decay)),e=i.mul(this.momentum).add(s.mul(this.learningRate).div(t.add(this.epsilon).sqrt()));a.assign(t),i.assign(e);const n=r.sub(e);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Ti(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&Ti(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&Ti(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2;this.accumulatedMeanSquares=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedMoments=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}Al.className="RMSProp",ki(Al);class Rl{static sgd(t){return new $l(t)}static momentum(t,e,n=!1){return new El(t,e,n)}static rmsprop(t,e=.9,n=0,r=null,s=!1){return new Al(t,e,n,r,s)}static adam(t=.001,e=.9,n=.999,r=null){return new Il(t,e,n,r)}static adadelta(t=.001,e=.95,n=null){return new Sl(t,e,n)}static adamax(t=.002,e=.9,n=.999,r=null,s=0){return new kl(t,e,n,r,s)}static adagrad(t,e=.1){return new Nl(t,e)}}const Tl={sgd:Rl.sgd,momentum:Rl.momentum,adadelta:Rl.adadelta,adagrad:Rl.adagrad,rmsprop:Rl.rmsprop,adamax:Rl.adamax,adam:Rl.adam},Dl="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:t=>t();function Fl(){return new Promise(t=>Dl(()=>t()))}function _l(t,e,n,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(t[0]/n),s=s.concat(t.slice(1));else{s=s.concat(t[0]);const n=e.length;for(let r=0;r<n;++r)s=s.concat([t[r+1]/e[r],e[r]]);s=s.concat(t.slice(n+1))}return s}function Ol(t,e,n=!0){const r=[];if(n){r.push(e);for(let n=e+1;n<t;++n)n<=2*e?(r.push(n),r.push(n-(e+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<t;++r)r>=2*e+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function Ml(t,e,n,r=!0){const s=[];s.push(r?t[0]/n:t[0]*n);for(let a=1;a<t.length;++a)s.push(a<=e.length?r?e[a-1]*t[a]:t[a]/e[a-1]:t[a]);return s}function zl(t,e){const n=[0];for(let r=0;r<e;++r)n.push(t[r][0]);return n}function Ll(t,e,n){const r=t.slice(0,1);for(let s=0;s<n;++s)r.push(t[s+1]-e[s][0]-e[s][1]);return r}const Bl=.3275911,Pl=.254829592,Wl=-.284496736,Vl=1.421413741,Ul=-1.453152027,Gl=1.061405429;function ql(...t){j().getBool("IS_TEST")||console.warn(...t)}function Hl(...t){j().getBool("IS_TEST")||console.log(...t)}function jl(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function Kl(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}function Xl(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let s=0;s<t.length;s+=4)n[Math.floor(s/4)]=t[s],r[Math.floor(s/4)]=t[s+1];return{real:n,imag:r}}function Yl(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let s=2;s<t.length;s+=4)n[Math.floor(s/4)]=t[s],r[Math.floor(s/4)]=t[s+1];return{real:n,imag:r}}function Jl(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Zl(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function Ql(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let s=0;s<Math.ceil(t/2);s++){const a=(e?2:-2)*Math.PI*(s/t);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function tc(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function ec(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=en(t.shape),r=t.toFloat(),s=n.complex(r,e);return e.dispose(),r.dispose(),s}if(!Dt(t.dtype,e))return Ie.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){const r=n.real(t),s=r.cast(e);return r.dispose(),s}if("int32"===e)return n.int(t);if("bool"===e){const e=He(0,t.dtype),r=n.notEqual(t,e);return e.dispose(),r}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function nc(t,e){return Ie.makeTensorFromDataId(t.dataId,e,t.dtype)}function rc(t,e,n){const r=(e-t)/(n-1),s=Ht(n,"float32");s[0]=t;for(let a=1;a<s.length;a++)s[a]=s[a-1]+r;return je(s,"float32")}function sc(t,e,n){const r=new Array(t.rank).fill(0),s=t.shape.slice();return e.map(e=>{const a=[...s];a[n]=e;const i=t.slice(r,a);return r[n]+=e,i})}function ac(t,e){const n=new Array(t.rank);for(let s=0;s<n.length;s++)n[s]=t.shape[s]*e[s];const r=un(n,t.dtype);for(let s=0;s<r.values.length;++s){const e=r.indexToLoc(s),n=new Array(t.rank);for(let r=0;r<n.length;r++)n[r]=e[r]%t.shape[r];const a=t.locToIndex(n);r.values[s]=t.values[a]}return r.toTensor()}function ic(t,e,n,r,s){const a=e[e.length-1],[i,o]=[t.length/a,a],u=Et(n,i*r),l=Et("int32",i*r);for(let h=0;h<i;h++){const e=h*o,n=t.subarray(e,e+o),s=[];for(let t=0;t<n.length;t++)s.push({value:n[t],index:t});s.sort((t,e)=>e.value-t.value);const a=h*r,i=u.subarray(a,a+r),c=l.subarray(a,a+r);for(let t=0;t<r;t++)i[t]=s[t].value,c[t]=s[t].index}const c=e.slice();return c[c.length-1]=r,[Ge(u,c,n),Ge(l,c,"int32")]}class oc{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class uc{time(t){return lc("time")}read(t){return lc("read")}readSync(t){return lc("readSync")}numDataIds(){return lc("numDataIds")}disposeData(t){return lc("disposeData")}write(t,e,n){return lc("write")}move(t,e,n,r){return lc("move")}memory(){return lc("memory")}floatPrecision(){return lc("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,r){return lc("batchMatMul")}fusedBatchMatMul({}){return lc("fusedBatchMatMul")}slice(t,e,n){return lc("slice")}stridedSlice(t,e,n,r){return lc("stridedSlice")}unstack(t,e){return lc("unstack")}reverse(t,e){return lc("reverse")}concat(t,e){return lc("concat")}neg(t){return lc("neg")}add(t,e){return lc("add")}addN(t){return lc("addN")}subtract(t,e){return lc("subtract")}multiply(t,e){return lc("multiply")}realDivide(t,e){return lc("realDivide")}floorDiv(t,e){return lc("floorDiv")}sum(t,e){return lc("sum")}prod(t,e){return lc("prod")}unsortedSegmentSum(t,e,n){return lc("unsortedSegmentSum")}argMin(t,e){return lc("argMin")}argMax(t,e){return lc("argMax")}equal(t,e){return lc("equal")}notEqual(t,e){return lc("notEqual")}less(t,e){return lc("less")}lessEqual(t,e){return lc("lessEqual")}greater(t,e){return lc("greater")}greaterEqual(t,e){return lc("greaterEqual")}logicalNot(t){return lc("logicalNot")}logicalAnd(t,e){return lc("logicalAnd")}logicalOr(t,e){return lc("logicalOr")}where(t){return lc("where")}select(t,e,n){return lc("select")}topk(t,e,n){return lc("topk")}min(t,e){return lc("min")}minimum(t,e){return lc("minimum")}mod(t,e){return lc("mod")}max(t,e){return lc("max")}maximum(t,e){return lc("maximum")}all(t,e){return lc("all")}any(t,e){return lc("any")}squaredDifference(t,e){return lc("squaredDifference")}ceil(t){return lc("ceil")}floor(t){return lc("floor")}round(t){return lc("round")}sign(t){return lc("sign")}isNaN(t){return lc("isNaN")}isInf(t){return lc("isInf")}isFinite(t){return lc("isFinite")}pow(t,e){return lc("pow")}exp(t){return lc("exp")}expm1(t){return lc("expm1")}softmax(t,e){return lc("softmax")}log(t){return lc("log")}log1p(t){return lc("log1p")}sqrt(t){return lc("sqrt")}rsqrt(t){return lc("rsqrt")}square(t){return lc("square")}reciprocal(t){return lc("reciprocal")}relu(t){return lc("relu")}relu6(t){return lc("relu6")}prelu(t,e){return lc("prelu")}elu(t){return lc("elu")}eluDer(t,e){return lc("eluDer")}selu(t){return lc("selu")}int(t){return lc("int")}clip(t,e,n){return lc("clip")}abs(t){return lc("abs")}complexAbs(t){return lc("complexAbs")}sigmoid(t){return lc("sigmoid")}softplus(t){return lc("softplus")}sin(t){return lc("sin")}cos(t){return lc("cos")}tan(t){return lc("tan")}asin(t){return lc("asin")}acos(t){return lc("acos")}atan(t){return lc("atan")}atan2(t,e){return lc("atan2")}sinh(t){return lc("sinh")}cosh(t){return lc("cosh")}tanh(t){return lc("tanh")}asinh(t){return lc("asinh")}acosh(t){return lc("acosh")}atanh(t){return lc("atanh")}erf(t){return lc("erf")}step(t,e){return lc("step")}fusedConv2d({}){return lc("fusedConv2d")}conv2d(t,e,n){return lc("conv2d")}conv2dDerInput(t,e,n){return lc("conv2dDerInput")}conv2dDerFilter(t,e,n){return lc("conv2dDerFilter")}fusedDepthwiseConv2D({}){return lc("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return lc("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return lc("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return lc("depthwiseConv2DDerFilter")}conv3d(t,e,n){return lc("conv3d")}conv3dDerInput(t,e,n){return lc("conv3dDerInput")}conv3dDerFilter(t,e,n){return lc("conv3dDerFilter")}maxPool(t,e){return lc("maxPool")}maxPoolBackprop(t,e,n,r){return lc("maxPoolBackprop")}avgPool(t,e){return lc("avgPool")}avgPoolBackprop(t,e,n){return lc("avgPoolBackprop")}avgPool3d(t,e){return lc("avgPool3d")}avgPool3dBackprop(t,e,n){return lc("avgPool3dBackprop")}maxPool3d(t,e){return lc("maxPool3d")}maxPool3dBackprop(t,e,n,r){return lc("maxPool3dBackprop")}reshape(t,e){return lc("reshape")}cast(t,e){return lc("cast")}tile(t,e){return lc("tile")}pad(t,e,n){return lc("pad")}transpose(t,e){return lc("transpose")}gather(t,e,n){return lc("gather")}gatherND(t,e){return lc("gatherND")}scatterND(t,e,n){return lc("scatterND")}batchToSpaceND(t,e,n){return lc("batchToSpaceND")}spaceToBatchND(t,e,n){return lc("spaceToBatchND")}resizeBilinear(t,e,n,r){return lc("resizeBilinear")}resizeBilinearBackprop(t,e,n){return lc("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,r){return lc("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return lc("resizeNearestNeighborBackprop")}batchNorm(t,e,n,r,s,a){return lc("batchNorm")}localResponseNormalization4D(t,e,n,r,s){return lc("localResponseNormalization4D")}LRNGrad(t,e,n,r,s,a,i){return lc("LRNGrad")}multinomial(t,e,n,r){return lc("multinomial")}oneHot(t,e,n,r){return lc("oneHot")}cumsum(t,e,n,r){return lc("cumsum")}nonMaxSuppression(t,e,n,r,s){return lc("nonMaxSuppression")}fft(t){return lc("fft")}ifft(t){return lc("ifft")}complex(t,e){return lc("complex")}real(t){return lc("real")}imag(t){return lc("imag")}cropAndResize(t,e,n,r,s,a){return lc("cropAndResize")}depthToSpace(t,e,n){return lc("depthToSpace")}split(t,e,n){return lc("split")}sparseToDense(t,e,n,r){return lc("sparseToDense")}diag(t){return lc("diag")}fill(t,e,n){return lc("fill")}onesLike(t){return lc("onesLike")}zerosLike(t){return lc("zerosLike")}linspace(t,e,n){return lc("linspace")}dispose(){return lc("dispose")}}function lc(t){throw new Error(`'${t}' not yet implemented or not found in the registry. Did you forget to import the kernel?`)}let cc;function hc(){return null==cc&&(cc=Ie.backend.epsilon()),cc}le.prototype.add=function(t){return this.throwIfDisposed(),Le(this,t)},le.prototype.atan2=function(t){return this.throwIfDisposed(),Oi(this,t)},le.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),Mi(this,t,e,n,r)},le.prototype.batchNorm=function(t,e,n,r,s){return this.throwIfDisposed(),Bi(this,t,e,n,r,s)},le.prototype.broadcastTo=function(t){return this.throwIfDisposed(),Gi(this,t)},le.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),Gs(this,t,e)},le.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof le&&(t=[t]),on([this,...t],e)},le.prototype.conv1d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Xi(this,t,e,n,r,s,a)},le.prototype.conv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Kr(this,t,e,n,r,s,a)},le.prototype.conv2dTranspose=function(t,e,n,r,s){return this.throwIfDisposed(),Yi(this,t,e,n,r,s)},le.prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),ts(this,t,e,n)},le.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),Qi(this,t,e)},le.prototype.depthwiseConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),to(this,t,e,n,r,s,a)},le.prototype.depthwiseConv2D=function(t,e,n,r,s,a){return $i("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),to(this,t,e,n,r,s,a)},le.prototype.div=function(t){return this.throwIfDisposed(),bn(this,t)},le.prototype.divNoNan=function(t){return this.throwIfDisposed(),no(this,t)},le.prototype.dot=function(t){return this.throwIfDisposed(),ro(this,t)},le.prototype.elu=function(){return this.throwIfDisposed(),so(this)},le.prototype.equal=function(t){return this.throwIfDisposed(),ao(this,t)},le.prototype.floorDiv=function(t){return this.throwIfDisposed(),yn(this,t)},le.prototype.greater=function(t){return this.throwIfDisposed(),Cs(this,t)},le.prototype.greaterEqual=function(t){return this.throwIfDisposed(),ms(this,t)},le.prototype.leakyRelu=function(t){return this.throwIfDisposed(),lo(this,t)},le.prototype.less=function(t){return this.throwIfDisposed(),gs(this,t)},le.prototype.lessEqual=function(t){return this.throwIfDisposed(),Ss(this,t)},le.prototype.localResponseNormalization=function(t,e,n,r){return this.throwIfDisposed(),co(this,t,e,n,r)},le.prototype.matMul=function(t,e,n){return this.throwIfDisposed(),Lr(this,t,e,n)},le.prototype.max=function(t,e){return this.throwIfDisposed(),ho(this,t,e)},le.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),po(this,t,e,n,r)},le.prototype.maximum=function(t){return this.throwIfDisposed(),uo(this,t)},le.prototype.minimum=function(t){return this.throwIfDisposed(),go(this,t)},le.prototype.mod=function(t){return this.throwIfDisposed(),yo(this,t)},le.prototype.mul=function(t){return this.throwIfDisposed(),xn(this,t)},le.prototype.notEqual=function(t){return this.throwIfDisposed(),xo(this,t)},le.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),gi(this,t,e,n)},le.prototype.pad=function(t,e){return this.throwIfDisposed(),Ys(this,t,e)},le.prototype.pool=function(t,e,n,r,s){return this.throwIfDisposed(),Io(this,t,e,n,r,s)},le.prototype.pow=function(t){return this.throwIfDisposed(),Ms(this,t)},le.prototype.prelu=function(t){return this.throwIfDisposed(),ko(this,t)},le.prototype.relu=function(){return this.throwIfDisposed(),Oo(this)},le.prototype.relu6=function(){return this.throwIfDisposed(),Mo(this)},le.prototype.selu=function(){return this.throwIfDisposed(),zo(this)},le.prototype.separableConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Lo(this,t,e,n,r,s,a)},le.prototype.split=function(t,e){return this.throwIfDisposed(),Ur(this,t,e)},le.prototype.squaredDifference=function(t){return this.throwIfDisposed(),Bo(this,t)},le.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),Pr(this,t,e)},le.prototype.sub=function(t){return this.throwIfDisposed(),us(this,t)},le.prototype.tile=function(t){return this.throwIfDisposed(),ls(this,t)},le.prototype.transpose=function(t){return this.throwIfDisposed(),Qr(this,t)},oe=y;class dc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,dc.prototype)}}class pc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,pc.prototype)}}class fc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,fc.prototype)}}class mc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,mc.prototype)}}class gc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,gc.prototype)}}function yc(t,e){if(Array.isArray(t)){let n=[];for(let r=0;r<e;r++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function bc(t,e){if(!t)throw new gc(e)}function xc(t,e){let n=0;for(const r of t)r===e&&n++;return n}function wc(t){return 1===t.length?t[0]:t}function vc(t){return Array.isArray(t)?t:[t]}function Cc(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Sc(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}Error;let Nc={};function Ic(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function kc(t,e={},n={},r="object",s=!1){if("string"==typeof t){const s=t;let a;if(s in n)a=n[s];else if(s in Nc)a=Nc[s];else if(a=e[s],null==a)throw new fc(`Unknown ${r}: ${t}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=t;if(null==a.className||null==a.config)throw new fc(r+": Improper config format: "+JSON.stringify(a)+".\n'className' and 'config' must set.");const i=a.className;let o,u;if(i in n?[o,u]=n[i]:i in Nc?[o,u]=Nc.className:i in e&&([o,u]=e[i]),null==o)throw new fc(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const t={};for(const n of Object.keys(Nc))t[n]=Nc[n];for(const s of Object.keys(n))t[s]=n[s];a.config.customObjects=t;const e=Object.assign({},Nc);for(const s of Object.keys(n))Nc[s]=n[s];!function t(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(e=>t(e));else{const n=Object.keys(e);for(const r of n){const n=e[r];null!=n&&"object"==typeof n&&(Array.isArray(n)||"ndarray"!==n.type||"number"!=typeof n.value?t(n):e[r]=n.value)}}}(a.config);const r=u(o,a.config,n,s);return Nc=Object.assign({},e),r}{const t=Object.assign({},Nc);for(const r of Object.keys(n))Nc[r]=n[r];const e=new o(a.config);return Nc=Object.assign({},t),e}}}function $c(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function Ec(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function Ac(t){if(null==t)throw new fc("Invalid value in obj: "+JSON.stringify(t));for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function Rc(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new fc(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function Tc(t,e,n=0,r=1/0){return bc(n>=0),bc(r>=n),Array.isArray(t)&&t.length>=n&&t.length<=r&&t.every(t=>typeof t===e)}function Dc(t,e){Array.isArray(t)?(r.assert(t.length>0,()=>e+" is unexpectedly an empty array."),t.forEach((t,n)=>Dc(t,`element ${n+1} of ${e}`))):r.assert(Number.isInteger(t)&&t>0,()=>`Expected ${e} to be a positive integer, but got `+function t(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>t(e)).join(",")+"]":"string"==typeof e?`"${e}"`:""+e}(t)+".")}function Fc(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function _c(t,e){return Ri(()=>yr(Ln(xn(t,t),e,!0)))}class Oc extends l.Serializable{getConfig(){return{}}}class Mc extends Oc{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Ri(()=>{const e=_c(t,this.axis),n=Xn(e,0,this.maxValue);return xn(t,bn(n,Le(hc(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Mc.className="MaxNorm",l.registerClass(Mc);class zc extends Oc{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Ri(()=>bn(t,Le(hc(),_c(t,this.axis))))}getConfig(){return{axis:this.axis}}}zc.className="UnitNorm",l.registerClass(zc);class Lc extends Oc{apply(t){return Oo(t)}}Lc.className="NonNeg",l.registerClass(Lc);class Bc extends Oc{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Ri(()=>{const e=_c(t,this.axis),n=Le(xn(this.rate,Xn(e,this.minValue,this.maxValue)),xn(1-this.rate,e));return xn(t,bn(n,Le(hc(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Bc.className="MinMaxNorm",l.registerClass(Bc);const Pc={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Wc(t){return Ic(t)}function Vc(t,e={}){return kc(t,l.SerializationMap.getMap().classNameMap,e,"constraint")}function Uc(t){return null==t?null:"string"==typeof t?Vc({className:t in Pc?Pc[t]:t,config:{}}):t instanceof Oc?t:Vc(t)}const Gc=["channelsFirst","channelsLast"],qc=["valid","same","causal"],Hc=["max","avg"],jc=["sum","mul","concat","ave"],Kc=new Map;function Xc(t){Rc(Gc,"DataFormat",t)}function Yc(t){Rc(qc,"PaddingMode",t)}function Jc(t){Rc(Hc,"PoolMode",t)}const Zc=[];function Qc(t,e){Zc.push(t);try{const t=e();return Zc.pop(),t}catch(n){throw Zc.pop(),n}}function th(t){if(!rh(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===Zc.length?"":Zc.join("/")+"/")+t}function eh(t){if(!rh(t))throw new Error("Not a valid tensor name: '"+t+"'");Kc.has(t)||Kc.set(t,0);const e=Kc.get(t);if(Kc.set(t,Kc.get(t)+1),e>0){const n=`${t}_${e}`;return Kc.set(n,1),n}return t}const nh=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function rh(t){return!!t.match(nh)}function sh(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let r=1;for(let s=e;s<n;++s)r*=t[s];return r}function ah(t){return je(t=Array.isArray(t)?new Float32Array(t):t)}function ih(t){return Mn(ah(t)).dataSync()[0]}function oh(t){return ho(ah(t)).dataSync()[0]}function uh(t,e){if(e<t)throw new fc(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let r=t;r<e;++r)n.push(r);return n}function lh(t,e){return t.asType(e)}function ch(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function hh(t,e,n){return Ri(()=>{switch(t.rank){case 1:return la(t,e,n);case 2:return ca(t,[e,0],[n,t.shape[1]]);case 3:return ha(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return da(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return ua(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return ua(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new fc("sliceAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}})}function dh(t,e,n){return Ri(()=>{switch(t.rank){case 1:return la(t,e,n);case 2:return ca(t,[0,e],[t.shape[0],n]);case 3:return ha(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return da(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new fc("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function ph(t,e,n,r){return Ri(()=>{switch(t.rank){case 1:return la(t,e,n);case 2:switch(r){case 1:return hh(t,e,n);case 2:return dh(t,e,n);default:throw new fc("The axis is not within the rank of the tensor "+r)}case 3:switch(r){case 1:return hh(t,e,n);case 2:return ha(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return dh(t,e,n);default:throw new fc("The axis is not within the rank of the tensor "+r)}case 4:switch(r){case 1:return hh(t,e,n);case 2:return da(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return da(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return dh(t,e,n);default:throw new fc("The axis is not within the rank of the tensor "+r)}default:throw new fc("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function fh(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),on(t,e)}function mh(t,e){switch(t.rank){case 1:return qi([t,e]);case 2:return Hi([t,e],0);case 3:return ji([t,e],0);case 4:return Ki([t,e],0);default:throw new fc("concatAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}function gh(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new fc(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return ls(t,e)}function yh(t,e=0,n=1,r,s){return Fo(t,e,n,r,s)}function bh(t,e,n,r){if(t.rank<2||e.rank<2)throw new mc(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3&&t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new mc(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = `+e.shape);if(2===t.rank&&2===e.rank)return g.matMul({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?vh(t.rank,r,"channelsLast"):null,activation:n});{const s=t.shape.slice(),a=s.pop();t=t.reshape([-1,a]);const i=e.shape.slice(),o=i.pop(),u=i.pop(),l=[...i,o],c=Array.from({length:e.rank},(t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n);e=e.transpose(c).reshape([u,-1]);const h=[...s,...l];return g.matMul({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?vh(t.rank,r,"channelsLast"):null,activation:n}).reshape(h)}}function xh(t,e,n){return Ri(()=>(e=Array.isArray(e)?je(e,"int32"):e.toInt(),Ko(t,e,n)))}function wh(t){return xn(t,t)}function vh(t,e,n){const r=e.shape;if(1!==e.rank&&e.rank!==t)throw new fc("Unexpected bias dimensions: "+e.rank+"; expected it to be 1 or "+t);if(5===t){if("channelsFirst"===n)return e.reshape(1===r.length?[1,r[0],1,1,1]:[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return e.reshape(1===r.length?[1,1,1,1,r[0]]:[1].concat(r))}else if(4===t){if("channelsFirst"===n)return e.reshape(1===r.length?[1,r[0],1,1]:[1,r[2],r[0],r[1]]);if("channelsLast"===n)return e.reshape(1===r.length?[1,1,1,r[0]]:[1].concat(r))}else if(3===t){if("channelsFirst"===n)return e.reshape(1===r.length?[1,r[0],1]:[1,r[1],r[0]]);if("channelsLast"===n)return e.reshape(1===r.length?[1,1,r[0]]:[1].concat(r))}else if(t<3)return e;throw new fc("Unsupported input rank by biasAdd: "+e.rank)}function Ch(t,e,n){return Ri(()=>(null==n&&(n="channelsLast"),Xc(n),t.add(vh(t.rank,e,n))))}function Sh(t,e,n,r){return Ri(()=>Du(t,e,n,r))}function Nh(t,e,n=!1){return n?t():e()}const Ih=["fanIn","fanOut","fanAvg"],kh=["normal","uniform","truncatedNormal"];class $h extends l.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Eh extends $h{apply(t,e){return en(t,e)}}Eh.className="Zeros",l.registerClass(Eh);class Ah extends $h{apply(t,e){return tn(t,e)}}Ah.className="Ones",l.registerClass(Ah);class Rh extends $h{constructor(t){if(super(),"object"!=typeof t)throw new fc("Expected argument of type ConstantConfig but got "+t);if(void 0===t.value)throw new fc("config must have value set but got "+t);this.value=t.value}apply(t,e){return Ri(()=>xn(He(this.value),tn(t,e)))}getConfig(){return{value:this.value}}}Rh.className="Constant",l.registerClass(Rh);class Th extends $h{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return _o(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Th.className="RandomUniform",l.registerClass(Th);class Dh extends $h{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new mc(`randomNormal does not support dType ${e}.`);return yh(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Dh.className="RandomNormal",l.registerClass(Dh);class Fh extends $h{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new mc(`truncatedNormal does not support dType ${e}.`);return Po(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Fh.className="TruncatedNormal",l.registerClass(Fh);class _h extends $h{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return Ri(()=>{if(2!==t.length||t[0]!==t[1])throw new fc("Identity matrix initializer can only be used for 2D square matrices.");return xn(this.gain,io(t[0]))})}getConfig(){return{gain:this.gain}}}_h.className="Identity",l.registerClass(_h);class Oh extends $h{constructor(t){if(super(),t.scale<0)throw new fc("scale must be a positive float. Got: "+t.scale);this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,Rc(Ih,"FanMode",this.mode),this.distribution=null==t.distribution?"normal":t.distribution,function(t){Rc(kh,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e="channelsLast"){let n,r;if(Xc(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=sh(t,2);n=t[1]*e,r=t[0]*e}else if("channelsLast"===e){const e=sh(t,0,t.length-2);n=t[t.length-2]*e,r=t[t.length-1]*e}}else{const e=sh(t);n=Math.sqrt(e),r=Math.sqrt(e)}return[n,r]}(t),r=n[0],s=n[1];let a=this.scale;if(a/="fanIn"===this.mode?Math.max(1,r):"fanOut"===this.mode?Math.max(1,s):Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new mc(`${this.getClassName()} does not support dType ${e}.`);return Po(t,0,n,e,this.seed)}{const n=Math.sqrt(3*a);return _o(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Oh.className="VarianceScaling",l.registerClass(Oh);class Mh extends Oh{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Oh.className}}Mh.className="GlorotUniform",l.registerClass(Mh);class zh extends Oh{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Oh.className}}zh.className="GlorotNormal",l.registerClass(zh);class Lh extends Oh{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Oh.className}}Lh.className="HeNormal",l.registerClass(Lh);class Bh extends Oh{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Oh.className}}Bh.className="HeUniform",l.registerClass(Bh);class Ph extends Oh{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Oh.className}}Ph.className="LeCunNormal",l.registerClass(Ph);class Wh extends Oh{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Oh.className}}Wh.className="LeCunNormal",l.registerClass(Wh);class Vh extends $h{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new mc("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return Ri(()=>{if(2!==t.length)throw new mc("The Orthogonal Initializer does not support non-2D shapes yet.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=yh(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let n=f.gramSchmidt(e);return t[0]>t[1]&&(n=n.transpose()),xn(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}Vh.className="Orthogonal",l.registerClass(Vh);const Uh={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Gh(t,e={}){return kc(t,l.SerializationMap.getMap().classNameMap,e,"initializer")}function qh(t){return Ic(t)}function Hh(t){if("string"==typeof t){const e=t in Uh?Uh[t]:t;if("GlorotNormal"===e)return new zh;if("GlorotUniform"===e)return new Mh;if("HeNormal"===e)return new Lh;if("HeUniform"===e)return new Bh;if("LeCunNormal"===e)return new Ph;if("LeCunUniform"===e)return new Wh;{const t={};return t.className=e,t.config={},Gh(t)}}return t instanceof $h?t:Gh(t)}let jh=0;function Kh(){return jh++}const Xh={};function Yh(t=""){return t in Xh||(Xh[t]=0),Xh[t]+=1,t+Xh[t].toString()}function Jh(t){return Array.isArray(t)&&Array.isArray(t[0])}function Zh(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function Qh(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new fc("Expected Tensor length to be 1; got "+t.length);e=t[0]}else e=t;return e}function td(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new fc("Expected exactly 1 Shape; got "+t.length)}return t}function ed(t){let e=0;for(const n of t)e+=0===n.shape.length?1:n.shape.reduce((t,e)=>t*e);return e}class nd{constructor(t,e="float32",n="Variable",r=!0,s=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=Kh(),this.originalName=th(n=null==n?"Variable":n),this.name=eh(this.originalName),this.trainable_=r,this.constraint=s,this.val=Qe(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function rd(t){return t.map(t=>t.read())}function sd(t){t.forEach(t=>{t[0].write(t[1])})}class ad{constructor(t){this.dtype=t.dtype,this.shape=t.shape,this.ndim=null!=t.shape?t.shape.length:t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class id{constructor(t,e,n,r,s,a,i){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=Kh(),null!=a&&(this.originalName=th(a),this.name=eh(this.originalName)),this.rank=e.length}}let od=0;class ud{constructor(t,e){this.callArgs=e,this.id=od++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const n of t.inboundLayers)null!=n&&n.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)t.push(null!=e?e.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let ld=0;class cd extends l.Serializable{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=ld++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=Cc(t)+"_"+Yh(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}this.initialWeights=null!=t.weights?t.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new pc(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new fc(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return wc(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return wc(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new dc("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new dc("Layer "+this.name+" is not connected, no input to return.");return wc(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new dc("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new dc("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return wc(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=vc(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=vc(this.inputSpec);if(t.length!==e.length)throw new fc(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: `+t);for(let n=0;n<t.length;n++){const r=t[n],s=e[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new fc(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new fc(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new fc(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new fc(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const t=r.shape;for(const e in s.axes){const r=Number(e),a=s.axes[e],i=r>=0?t[r]:t[t.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new fc(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const e=s.shape[t],a=r.shape[t];if(null!=e&&null!=a&&e!==a)throw new fc(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=vc(t);let r=!0;for(const a of n)if(!(a instanceof id)){r=!1;break}let s=!0;for(const a of n)if(a instanceof id){s=!1;break}if(r===s)throw new fc("Arguments to apply() must be all SymbolicTensors or all Tensors");return Qc(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of vc(t))e.push(n.shape);this.build(wc(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let r=this.call(t,e);const s=vc(r),a=[];for(let t of s)-1!==n.indexOf(t)&&(t=t.clone()),a.push(t);if(r=wc(a),null!=this.activityRegularizer)throw new mc("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(t){t=vc(t);const e=[];for(const n of t)e.push(n.shape);return wc(e)}(t),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map((n,r)=>new id(a,n,this,vc(t),e,this.name,r)):new id(a,r,this,vc(t),e,this.name),this.addInboundNode(t,s,null,null,n,r,e),this._refCount++,null!=this.activityRegularizer)throw new mc("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(t)+") does not match that of the "+`batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer `+this.name);else{let e=!1;this.batchInputShape.forEach((n,r)=>{null!=n&&null!=t[r]&&t[r]!==n&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: `+JSON.stringify(this.batchInputShape))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new dc(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new dc(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "outut shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new pc(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return ed(this.weights)}build(t){this.built=!0}getWeights(t=!1){return rd(t?this.trainableWeights:this.weights)}setWeights(t){Ri(()=>{const e=this.weights;if(e.length!==t.length)throw new fc(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],s=rd(e);for(let a=0;a<s.length;++a){const i=s[a],o=e[a],u=t[a];if(!r.arraysEqual(i.shape,u.shape))throw new fc(`Layer weight shape ${i.shape} not compatible with provided weight shape `+u.shape);n.push([o,u])}sd(n)})}addWeight(t,e,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(t))throw new fc(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=Hh("zeros"));const o=r.apply(e,n),u=new nd(o,n,t,a,i);return o.dispose(),null!=s&&this.addLoss(()=>s.apply(u.read())),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=vc(t),null!=this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,n,r,s,a,i=null){const o=vc(t);e=vc(e),n=vc(n),r=vc(r),s=Zh(s),a=Zh(a);const u=[],l=[],c=[];for(const h of o)u.push(h.sourceLayer),l.push(h.nodeIndex),c.push(h.tensorIndex);new ud({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:o,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let h=0;h<e.length;h++)e[h].sourceLayer=this,e[h].nodeIndex=this.inboundNodes.length-1,e[h].tensorIndex=h}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}class hd extends cd{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:Yh("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new fc("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new fc("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new fc("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const r=new id(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new ud({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new fc("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}async function dd(t){if(null==t)return;const e=[],n=[],r=[];for(const s in t){const a=t[s];if("number"!=typeof a){const t=a;e.push(t.data()),n.push(s),r.push(t)}}if(e.length>0){const s=await Promise.all(e);for(let e=0;e<s.length;++e)t[n[e]]=s[e][0];Ti(r)}}function pd(t){if(null!=t)for(const e in t){const n=t[e];"number"!=typeof n&&n.dispose()}}var fd;hd.className="InputLayer",l.registerClass(hd),function(t){t[t.SILENT=0]="SILENT",t[t.VERBOSE=1]="VERBOSE"}(fd||(fd={}));class md{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class gd{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class yd extends md{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const r in e){const t=e[r];if("number"==typeof t)this.totals.hasOwnProperty(r)||(this.totals[r]=0),this.totals[r]=this.totals[r]+t*n;else{let e;r in this.totals?e=this.totals[r]:this.totals[r]=0;const s=Ri(()=>Le(this.totals[r],xn(t,n)));this.totals[r]=s,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const n of this.params.metrics)null!=this.totals[n]&&("number"==typeof this.totals[n]?e[n]=this.totals[n]/this.seen:Ri(()=>{const t=xn(bn(1,this.seen),this.totals[n]);e[n]=t,this.totals[n].dispose(),Di(e[n])}))}}class bd extends md{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const n in e)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(e[n])}async syncData(){const t=[],e=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)"number"!=typeof r[a]&&(t.push(r[a].data()),e.push(s),n.push(a))}const r=await Promise.all(t);for(let s=0;s<r.length;++s)this.history[e[s]][n[s]].dispose(),this.history[e[s]][n[s]]=r[s][0]}}class xd extends md{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");r.isNumber(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,s=r.now();return(...a)=>{const i=r.now();return i-s<e||(s=i,n=t(...a)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const r=[];null!=this.yield&&(await dd(n),r.push(this.yield(t,e,n))),r.push(Fl()),await Promise.all(r)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await dd(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await dd(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(Fl()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await dd(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await dd(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(Fl()):r.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await dd(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await dd(t),await this.trainEnd(t))}}function wd(t,e){return null==t&&(t={}),t instanceof md?[t]:Array.isArray(t)&&t[0]instanceof md?t:vc(t).map(t=>new xd(t,e))}class vd{constructor(){}static registerCallbackConstructor(t,e){r.assert(t>=0&&Number.isInteger(t),()=>"Verbosity level is expected to be an integer >= 0, but got "+t),vd.checkForDuplicate(e),null==vd.constructors[t]&&(vd.constructors[t]=[]),vd.constructors[t].push(e)}static checkForDuplicate(t){for(const e in vd.constructors)vd.constructors[+e].forEach(e=>{if(e===t)throw new fc("Duplicate callback constructor.")})}static clear(){vd.constructors={}}static createCallbacks(t){const e=[];for(const n in vd.constructors){const r=+n;t>=r&&e.push(...vd.constructors[r])}return e.map(t=>new t)}}function Cd(t,e,n,r,s,a,i,o,u){const l=new bd,c=[new yd,...vd.createCallbacks(e)];null!=t&&c.push(...t),c.push(l);const h=new gd(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:e,doValidation:o,metrics:u}),{callbackList:h,history:l}}function Sd(t,e={},n=!1){return kc(t,l.SerializationMap.getMap().classNameMap,e,"layer",n)}function Nd(t,e){return Ri(()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const n=Ln(wh(t),e,!0),r=oo(n.shape,hc()),s=yr(uo(n,r));return bn(t,s)})}function Id(t,e){return Ri(()=>On(wh(us(e,t)),-1))}function kd(t,e){return Ri(()=>On(Wn(us(e,t)),-1))}function $d(t,e){return Ri(()=>{const n=us(t,e),r=Xn(Wn(t),hc(),Number.MAX_VALUE),s=Wn(bn(n,r));return xn(100,On(s,-1))})}function Ed(t,e,n=!1){return Ri(()=>{if(n)e=yu(e);else{const t=Ln(e,e.shape.length-1,!0);e=bn(e,t)}return e=Xn(e,hc(),1-hc()),ar(Ln(xn(t.toFloat(),nr(e)),e.shape.length-1))})}function Ad(t,e,n=!1){return Ri(()=>{const r=er(function(t){const e=[sh(t.shape)];return t.reshape(e)}(t)).toInt(),s=(e=Xn(e,hc(),1-hc())).shape;return Ed(gi(r,s[s.length-1]).reshape(s),e,n)})}function Rd(t,e){return Ri(()=>{let n;return n=Xn(e,hc(),1-hc()),n=nr(bn(n,us(1,n))),On(function(t,e){if(!r.arraysEqual(t.shape,e.shape))throw new fc(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return Ri(()=>{const n=e.relu(),r=e.abs().neg();return n.sub(e.mul(t)).add(r.exp().log1p())})}(t,n),-1)})}function Td(t,e){return Ri(()=>{const n=Nd(t,-1),r=Nd(e,-1),s=xn(n,r);return ar(Ln(s,-1))})}vd.constructors={};const Dd={meanSquaredError:Id,meanAbsoluteError:kd,meanAbsolutePercentageError:$d,meanSquaredLogarithmicError:function(t,e){return Ri(()=>{const n=Xn(e,hc(),Number.MAX_VALUE),r=nr(Le(1,n)),s=Xn(t,hc(),Number.MAX_VALUE),a=nr(Le(1,s));return On(wh(us(r,a)),-1)})},squaredHinge:function(t,e){return Ri(()=>{const n=uo(0,us(1,xn(t,e)));return On(wh(n),-1)})},hinge:function(t,e){return Ri(()=>{const n=uo(0,us(1,xn(t,e)));return On(n,-1)})},categoricalHinge:function(t,e){return Ri(()=>{const n=Ln(xn(t,e),-1),r=ho(xn(us(1,t),e),-1);return uo(0,Le(1,us(r,n)))})},logcosh:function(t,e){return Ri(()=>{const n=Math.log(2),r=us(e,t),s=us(Le(r,gr(xn(-2,r))),n);return On(s,-1)})},categoricalCrossentropy:Ed,sparseCategoricalCrossentropy:Ad,binaryCrossentropy:Rd,kullbackLeiblerDivergence:function(t,e){return Ri(()=>{const n=Xn(t,hc(),1),r=Xn(e,hc(),1);return Ln(xn(t,nr(bn(n,r))),-1)})},poisson:function(t,e){return Ri(()=>{const n=nr(Le(hc(),e));return On(us(e,xn(t,n)),-1)})},cosineProximity:Td};function Fd(t){if("string"==typeof t){if(t in Dd)return Dd[t];let e="Unknown loss "+t;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new fc(e)}return t}function _d(t,e){return Ri(()=>{const n=xn(.5,sn(e)),r=lh(Cs(e,n),t.dtype);return On(ao(t,r),-1)})}function Od(t,e){return Ri(()=>lh(ao(Dn(t,-1),Dn(e,-1)),"float32"))}function Md(t,e){return Rd(t,e)}function zd(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),ao(t,e).asType("float32")}const Ld=Ed,Bd=Ad,Pd={binaryAccuracy:_d,categoricalAccuracy:Od,precision:function(t,e){return Ri(()=>{const n=function(t,e){return Ri(()=>Rs(t.equal(1),e.equal(1)).sum().cast("float32"))}(t,e),r=function(t,e){return Ri(()=>Rs(t.equal(0),e.equal(1)).sum().cast("float32"))}(t,e),s=n.add(r);return _s(Cs(s,0),n.div(s),0).cast("float32")})},categoricalCrossentropy:Ld,sparseCategoricalCrossentropy:Bd,mse:Id,MSE:Id,mae:kd,MAE:kd,mape:$d,MAPE:$d,cosine:Td};function Wd(t){if("string"==typeof t&&t in Pd)return Pd[t];if("string"!=typeof t&&null!=t)return t;throw new fc("Unknown metric "+t)}function Vd(t){if(bc(null!==t,"Unknown LossOrMetricFn "+t),"string"==typeof t)return t;{let e;for(const n of Object.keys(Dd))if(Dd[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(Pd))if(Pd[n]===t){e=n;break}return void 0!==e?e:t.name}}function Ud(t,e,n=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!function t(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const n=Object.keys(e);for(const r of n){if("string"!=typeof r)return!1;if(!t(e[r]))return!1}return!0}if(Array.isArray(e)){for(const n of e)if(!t(n))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>1048576&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Gd(t,e,n=console.log){let r="";for(let s=0;s<t.length;++s)s>0&&(r=r.slice(0,r.length-1)+" "),r+=t[s],r=r.slice(0,e[s]),r+=" ".repeat(e[s]-r.length);n(r)}function qd(t,e,n){let r;try{r=JSON.stringify(t.outputShape)}catch(Yx){r="multiple"}Gd([`${t.name} (${t.getClassName()})`,r,t.countParams().toString()],e,n)}function Hd(t,e,n,r){let s;try{s=JSON.stringify(t.outputShape)}catch(Yx){s="multiple"}const a=[];for(const l of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(l)))for(let t=0;t<l.inboundLayers.length;++t)a.push(`${l.inboundLayers[t].name}[${l.nodeIndices[t]}][${l.tensorIndices[t]}]`);const i=t.name,o=t.getClassName(),u=0===a.length?"":a[0];Gd([`${i} (${o})`,s,t.countParams().toString(),u],e,r);for(let l=1;l<a.length;++l)Gd(["","","",a[l]],e,r)}function jd(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}class Kd{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof Kd)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new fc(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return cn(e,t.dtype)}catch(Yx){throw new fc(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof id){if(null==this.id2Value[t.id])throw new fc("Nonexistent key: "+t.name);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new fc("Feed dict has no SymbolicTensor name: "+t);return this.id2Value[e]}}getMask(t){if(t instanceof id){if(null==this.id2Value[t.id])throw new fc("Nonexistent key: "+t.name);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new fc("Feed dict has no SymbolicTensor name: "+t);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Ti(this.id2Mask)}}const Xd={},Yd={};function Jd(t,e,n,s){const a=null!=n&&n.training,i=Array.isArray(t),o=i?t:[t],u=o.map(t=>t.name),l=[],c=e.names();for(const r of u)-1!==c.indexOf(r)?l.push(e.getValue(r)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const h=u.join(",")+"|"+e.names().join(",");let d,p;if(null==Xd[h]){const t=function(t,e){r.assert(null!=t&&t.length>0,()=>"Expected at least one fetch, got none");let n=[],s={};if(1===t.length){const r=Qd(t[0],e);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of t){const{sorted:t,recipientMap:i}=Qd(a,e);for(const e of t)r.has(e.name)||(n.push(e),r.add(e.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach(t=>s[e].add(t))}}return{sorted:n,recipientCounts:Zd(s)}}(o,e);d=t.sorted,p=t.recipientCounts,Xd[h]=d,Yd[h]=p}d=Xd[h],p={},a||Object.assign(p,Yd[h]);const f=new Kd(e);for(let r=0;r<d.length;++r){if(null!=s){const t=Ai().numTensors;t>s.maxNumTensors&&(s.maxNumTensors=t),t<s.minNumTensors&&(s.minNumTensors=t)}const t=d[r],i=t.sourceLayer;if(i instanceof hd)continue;const o=[],c=[],h=[];let m=!1;for(const n of t.inputs){const t=f.getValue(n),r=f.getMask(n);o.push(t),c.push(r),null!=r&&(m=!0),a||(p[n.name]--,0!==p[n.name]||e.hasKey(n)||-1!==u.indexOf(n.name)||t.isDisposed||!0===n.sourceLayer.stateful||h.push(t))}m&&((n=n||{}).mask=c[0]);const g=vc(i.apply(o,n));let y=null;i.supportsMasking&&(y=i.computeMask(o,c));const b=tp(t),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){f.hasKey(x[e])||f.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=u.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}a||Ti(h)}return f.disposeMasks(),i?l:l[0]}function Zd(t){const e={};for(const n in t)e[n]=t[n].size;return e}function Qd(t,e){const n=new Set,r=[],s={};for(const o of e.names())n.add(o);const a=[],i=[];for(a.push(t);a.length>0;){const t=a[a.length-1];if(n.has(t.name)){a.pop();continue}const e=i[i.length-1]===a.length-1;if(0===t.inputs.length||e)a.pop(),r.push(t),n.add(t.name),e&&i.pop();else{i.push(a.length-1);for(const e of t.inputs)null==s[e.name]&&(s[e.name]=new Set),s[e.name].add(t.name),n.has(e.name)||a.push(e)}}return{sorted:r,recipientMap:s}}function tp(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const r of t.sourceLayer.inboundNodes[e].outputTensors)if(r.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class ep extends cd{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=Yh(t)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(t.inputs)?t.inputs.slice():[t.inputs],this.outputs=Array.isArray(t.outputs)?t.outputs.slice():[t.outputs],Ec(this.inputs).length!==this.inputs.length)throw new fc("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+this.inputs.map(t=>t.name));Ec(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+this.outputs.map(t=>t.name)),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const y of this.outputs){const t=y.nodeIndex,e=y.tensorIndex;this.outputLayers.push(y.sourceLayer),this.outputLayersNodeIndices.push(t),this.outputLayersTensorIndices.push(e)}for(const y of this.inputs){const t=y.sourceLayer,e=y.nodeIndex,n=y.tensorIndex;bc(0===e,"input layer has >1 nodes"),bc(0===n,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(e),this.inputLayersTensorIndices.push(n)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let y=0;y<this.inputLayers.length;y++){const e=this.inputLayers[y];if(!(e instanceof hd))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${y} (0-based) originates from layer type ${e.getClassName()}.`);this.inputNames.push(e.name),this.feedInputShapes.push(e.batchInputShape),this.feedInputNames.push(e.name)}for(const y of this.outputLayers)this.outputNames.push(y.name);this.internalInputShapes=this.inputs.map(t=>t.shape),this.internalOutputShapes=this.outputs.map(t=>t.shape);const e={},n={},r={},s={},a={},i=[],o=(t,e,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=t.sourceLayer,s=t.nodeIndex,u=t.tensorIndex);const l=r.inboundNodes[s];if(-1!==n.indexOf(l))throw new pc(`The tensor ${t.name} at layer "${r.name}" is part of a cycle.`);if(-1!==e.indexOf(l))return;this.containerNodes.add(ep.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let a=0;a<c;a++)o(l.inputTensors[a],e,n,l.inboundLayers[a],l.nodeIndices[a],l.tensorIndices[a]);for(e.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);i.push(l)},u=[],l=[];for(const y of this.outputs)o(y,u,l);const c=i.slice().reverse();for(const y of c){n[y.id]=y,y.id in e||(e[y.id]=0);let t=e[y.id];t=Math.max(t,null==r[y.outboundLayer.id]?0:r[y.outboundLayer.id]),r[y.outboundLayer.id]=t,s[y.outboundLayer.id]=y.outboundLayer,e[y.id]=t;for(let r=0;r<y.inboundLayers.length;r++){const s=y.inboundLayers[r].inboundNodes[y.nodeIndices[r]];e[s.id]=Math.max(t+1,null==e[s.id]?0:e[s.id]),n[s.id]=s}}const h={};for(const y in e){const t=e[y];t in h||(h[t]=[]),h[t].push(n[y])}const d={};for(const y in r){const t=r[y];t in d||(d[t]=[]),d[t].push(s[y])}let p=Object.keys(d).map(t=>parseInt(t,10)).sort($c);this.layers=[];for(const y of p){const t=d[y];t.sort((t,e)=>{const n=a[t.id],r=a[e.id];return n<r?-1:n>r?1:0});for(const e of t)e instanceof ep&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=d,p=Object.keys(h).map(t=>parseInt(t,10)).sort($c);const f=this.inputs.slice(),m=[];for(const y of p)for(const t of h[y]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new pc("Graph disconnected: cannot obtain value for tensor "+n+` at layer "${e.name}". The following previous layers were accessed without issue: `+m);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map(t=>t.name);for(const y of g){const t=g.filter(t=>t===y).length;if(1!==t)throw new pc(`The name "${y}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new ud({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(t=>null),outputMasks:this.outputs.map(t=>null),inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs.map(t=>t.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(e=>e.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new fc("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let r=0;for(const a of this.layers)for(const t of a.weights){if(null!=n[t.originalName])throw new fc("Duplicate weight name: "+t.originalName);n[t.originalName]=t,r++}const s=[];for(const a in t){let r=a;if(null==n[a]){const t=a.split("/");r=t.slice(0,-2).concat([t[t.length-1]]).join("/")}if(null!=n[r])s.push([n[r],t[a]]);else if(e)throw new fc("Provided weight data has no target variable: "+a);delete n[r]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new fc(`${t.length} of ${r} weights are not set: `+t)}sd(s)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 2.0.1",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const n=function t(e,n){if(null==e)return null;if("string"==typeof e)return Cc(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const r=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];jd(n,a,s)?r.push(s):r.push(t(s,n))}return r}{const n={};for(const r of Object.keys(e)){const s=e[r];n[Cc(r)]="name"!==r&&"className"!==r||"string"!=typeof s?t(s,r):s}return n}}(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return Ri(()=>{t=vc(t);const n=new Kd;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return Jd(this.outputs,n,e)})}computeMask(t,e){return Ri(()=>{let n;return t=vc(t),n=null==e?yc(null,t.length):vc(e),this.runInternalGraph(t,n)[1]})}computeOutputShape(t){const e=Zh(t);if(e.length!==this.inputLayers.length)throw new fc(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let i=0;i<e.length;i++)n[this.inputLayers[i].name+"_0_0"]=e[i];const r=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort($c);if(r.length>1)for(const i of r){const t=this.nodesByDepth[i];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map(t=>t.id).indexOf(t.id))continue;const r=[];for(let i=0;i<e.inboundLayers.length;i++)r.push(n[`${e.inboundLayers[i].name}_${e.nodeIndices[i]}_${e.tensorIndices[i]}`]);const s=Zh(t.computeOutputShape(wc(r))),a=t.inboundNodes.indexOf(e);for(let e=0;e<s.length;e++)n[`${t.name}_${a}_${e}`]=s[e]}}const s=[],a=[];for(let i=0;i<this.outputLayers.length;i++)a.push(`${this.outputLayers[i].name}_${this.outputLayersNodeIndices[i]}_${this.outputLayersTensorIndices[i]}`);for(let i=0;i<a.length;i++){const t=a[i];bc(t in n),s.push(n[t])}return wc(s)}runInternalGraph(t,e){null==e&&(e=yc(null,t.length));const n={};for(let o=0;o<this.inputs.length;++o)n[this.inputs[o].id]=[t[o],e[o]];const r=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort($c);for(const o of r){const t=this.nodesByDepth[o];for(const e of t){const t=e.outboundLayer,r=e.inputTensors,s=e.outputTensors,a=new Array;for(const e of r)e.id in n&&a.push(n[e.id]);if(a.length===r.length){let r,i,o,u,l={};if(null!=e.callArgs&&(l=e.callArgs),1===a.length){const[e,n]=a[0];null==l.mask&&(l.mask=n),o=vc(t.call(e,l)),u=vc(t.computeMask(e,n)),r=[e],i=[n]}else r=a.map(t=>t[0]),i=a.map(t=>t[1]),null==l.mask&&(l.mask=i),o=vc(t.call(r,l)),u=vc(t.computeMask(r,i));if(t.activityRegularizer)throw new mc("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<s.length;++t)n[s[t].id]=[o[t],u[t]]}}}const s=[],a=[],i=[];for(const o of this.outputs){bc(o.id in n,`Could not compute output ${o.name} : ${o.id}`);const[t,e]=n[o.id];i.push(t.shape),s.push(t),a.push(e)}return[s,a,i]}buildNodeConversionMap(t){const e={};let n;for(const r of this.layers){n=r instanceof ep?1:0;for(let t=0;t<r.inboundNodes.length;t++){const s=ep.nodeKey(r,t);this.containerNodes.has(s)&&(e[s]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new fc(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new fc("Provide either a layer name or layer index");for(const n of this.layers)if(n.name===t)return n;throw new fc("No such layer: "+t)}calculateLosses(){return Ri(()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const r=ep.nodeKey(e,n);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const a of this.layers){const t=a.getClassName(),r=a.getConfig(),s=[];for(let n=0;n<a.inboundNodes.length;n++){const t=a.inboundNodes[n],r=ep.nodeKey(a,n);let i={};if(this.containerNodes.has(r)){if(t.callArgs)try{JSON.stringify(t.callArgs),i=t.callArgs}catch(Yx){console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: `+t.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),i={}}if(t.inboundLayers.length>0){const n=[];for(let r=0;r<t.inboundLayers.length;r++){const s=t.inboundLayers[r],a=t.tensorIndices[r];let o=e[ep.nodeKey(s,t.nodeIndices[r])];null==o&&(o=0),n.push([s.name,o,a,i])}s.push(n)}}}const i={};i.name=a.name,i.className=t,i.config=r,i.inboundNodes=s,n.push(i)}t.layers=n;const r=[];for(let a=0;a<this.inputLayers.length;a++){const t=this.inputLayers[a],n=ep.nodeKey(t,this.inputLayersNodeIndices[a]);if(!this.containerNodes.has(n))continue;let s=e[n];null==s&&(s=0),r.push([t.name,s,this.inputLayersTensorIndices[a]])}t.inputLayers=r;const s=[];for(let a=0;a<this.outputLayers.length;a++){const t=this.outputLayers[a],n=ep.nodeKey(t,this.outputLayersNodeIndices[a]);if(!this.containerNodes.has(n))continue;let r=e[n];null==r&&(r=0),s.push([t.name,r,this.outputLayersTensorIndices[a]])}return t.outputLayers=s,t}static fromConfig(t,e,n={},r=!1){const s={},a={};function i(t,e){t.name in a?a[t.name].push(e):a[t.name]=[e]}function o(t,e){const n=[];let r;for(const a of e){const o=a[0],u=a[1],l=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(t,e);const c=s[o];if(c.inboundNodes.length<=u)return void i(t,e);n.push(c.inboundNodes[u].outputTensors[l])}n.length>0&&t.apply(wc(n),r)}function u(t){const n=t.name,a=Sd(t,null!=e.customObjects?e.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a,t.inboundNodes.forEach(t=>{if(!(t instanceof Array))throw new fc("Corrupted configuration, expected array for nodeData: "+t);i(a,t)})}const l=e.name,c=e.layers;for(const m of c)u(m);for(;!Ac(a);)for(const t of c){const e=s[t.name];if(e.name in a){const t=a[e.name];delete a[e.name];for(const n of t)o(e,n)}}const h=[],d=[],p=e.inputLayers;for(const m of p){const t=m[0],e=m[1],n=m[2];bc(t in s),h.push(s[t].inboundNodes[e].outputTensors[n])}const f=e.outputLayers;for(const m of f){const t=m[0],e=m[1],n=m[2];bc(t in s),d.push(s[t].inboundNodes[e].outputTensors[n])}return new t({inputs:h,outputs:d,name:l})}get stateful(){if(this._stateful)throw new fc("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){Ri(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function np(t,e){return function(t,e,n){const r=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>null);if(1===r)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==r)throw new Error(`Provided classWeight is an array of ${t.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach(e=>{n.push(e in t?t[e]:null)}),n}throw new Error(`The model has multiple (${r}) outputs, so classWeight must be either an array with ${r} elements or an object with ${e} keys. Provided classWeight not understood: ${JSON.stringify(t)}`)}(t,e)}async function rp(t,e,n,r){if(null!=e||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=Ri(()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1)return t.argMax(1);if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),r=Array.from(await e.data());Ti(e);const s=[];return r.forEach(t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);s.push(n[t])}),je(s,"float32")}return null}function sp(t,e){return xn(t,e)}function ap(t,e){let n,s;n=e.xs,s=e.ys,r.assert(null!=n&&null!=s,()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+e);const a=ip("input",t.inputNames,n),i=ip("output",t.outputNames,s),o=a[0].shape[0];r.assert(a.length===t.inputs.length,()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: `+JSON.stringify(t.inputNames)+")"),r.assert(i.length===t.outputs.length,()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: `+JSON.stringify(t.outputNames)+")");for(let u=0;u<a.length;u++)r.assert(a[u].shape[0]===o,()=>`Batch size mismatch: input ${t.inputNames[u]} has ${a[u].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);for(let u=0;u<i.length;u++)r.assert(i[u].shape[0]===o,()=>`Batch size mismatch: output ${t.outputNames[u]} has ${i[u].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);return{xs:a,ys:i}}function ip(t,e,n){if(n instanceof le)return[n];if(Array.isArray(n))return r.assert(n.length===e.length,()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`),n;{const r=[];for(const s of e){if(null==n[s])throw new fc(`The feature data generated by the dataset lacks the required ${t} key '${s}'.`);r.push(n[s])}return r}}function op(t){return"function"==typeof t.iterator}function up(t){r.assert(t>0&&Number.isInteger(t),()=>"batchSize is required to be a positive integer, but got "+t)}function lp(t,e,n){return null==t?[null]:Array.isArray(t)?t.map(t=>hh(t,e,n-e)):hh(t,e,n-e)}function cp(t,e){return Ri(()=>null==t?null:Array.isArray(t)?t.map(t=>cp(t,e)):xh(t,"int32"===e.dtype?e:e.toInt()))}function hp(t,e){const n=[];let r=0,s=null;for(;r<t;)s=r+e,s>=t&&(s=t),n.push([r,s]),r=s;return n}function dp(t){const e=[];t instanceof le&&(t=[t]);for(let n=0;n<t.length;++n){const r=t[n];if(1===r.rank)e.push(ch(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(r)}}return e}function pp(t,e){if(null==t)return;const n=[];if(e instanceof le)n.push(e.id);else if(Array.isArray(e))e.forEach(t=>n.push(t.id));else if(null!=e)for(const s in e)n.push(e[s].id);const r=[];if(t instanceof le)-1===n.indexOf(t.id)&&r.push(t);else if(Array.isArray(t))t.forEach(t=>{-1===n.indexOf(t.id)&&r.push(t)});else if(null!=t)for(const s in t){const e=t[s];-1===n.indexOf(e.id)&&r.push(e)}r.forEach(t=>{t.isDisposed||t.dispose()})}function fp(t){return Array.isArray(t)}function mp(t){return!function(t){return t instanceof le}(t)&&!fp(t)}function gp(t,e,n,r=!0,s=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(fp(t)&&t.length>0)e=!0;else if(mp(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new fc(`Error when checking model ${s} expected no data, but got `+t)}return[]}if(null==t)return e.map(t=>null);let a;if(mp(t)){t=t,a=[];for(const n of e){if(null==t[n])throw new fc(`No data provided for "${n}". Need data for each key in: `+e);a.push(t[n])}}else if(fp(t)){if((t=t).length!==e.length)throw new fc(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): `+t);a=t}else{if(t=t,e.length>1)throw new fc(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape `+t.shape);a=[t]}if(a=dp(a),null!=n)for(let i=0;i<e.length;++i){if(null==n[i])continue;const t=a[i];if(t.shape.length!==n[i].length)throw new fc(`Error when checking ${s}: expected ${e[i]} to have ${n[i].length} dimension(s). but got array with shape `+t.shape);for(let a=0;a<n[i].length;++a){if(0===a&&!r)continue;const o=t.shape[a],u=n[i][a];if(null!=u&&u>=0&&o!==u)throw new fc(`Error when checking ${s}: expected ${e[i]} to have shape [${n[i]}], but got array with shape [${t.shape}].`)}}return a}function yp(t,e,n,r=!0,s=""){let a;if(Array.isArray(t)){if(t.length!==e.length)throw new fc(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);a=t}else{if(e.length>1)throw new fc(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape `+JSON.stringify(t.shape)+".");a=[t]}if(null!=n)for(let i=0;i<e.length;++i){if(null==n[i])continue;const t=a[i];if(t.shape.length!==n[i].length)throw new fc(`Error when checking ${s}: expected ${e[i]} to have ${n[i].length} dimension(s), but got array with shape `+JSON.stringify(t.shape));for(let a=0;a<n[i].length;++a){if(0===a&&!r)continue;const o=t.shape[a],u=n[i][a];if(null!=u&&u!==o)throw new fc(`Error when checking ${s}: expected ${e[i]} to have shape ${JSON.stringify(n[i])} but got array with shape ${JSON.stringify(t.shape)}.`)}}}class bp extends ep{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new fc("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(t,e,n,r=console.log){const s=function(t){let e=!0;const n=[],r=[];for(const s in t.nodesByDepth)n.push(t.nodesByDepth[s]);for(const s of n){if(s.length>1||1===s.length&&s[0].inboundLayers.length>1){e=!1;break}r.push(...s)}if(e)for(const s of t.layers){let t=!1;for(const n of s.inboundNodes)if(-1!==r.indexOf(n)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),a=["Layer (type)","Output shape","Param #"];let i;if(s?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(t=>Math.floor(e*t))),!s){a.push("Receives inputs"),i=[];for(const e in t.nodesByDepth)i.push(...t.nodesByDepth[e])}r("_".repeat(e)),Gd(a,n,r),r("=".repeat(e));const o=t.layers;for(let c=0;c<o.length;++c)s?qd(o[c],n,r):Hd(o[c],n,i,r),r((c===o.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const u=function(t){let e;return e=ed(null!=t.collectedTrainableWeights?t.collectedTrainableWeights:t.trainableWeights),e}(t),l=ed(t.nonTrainableWeights);r("Total params: "+(u+l)),r("Trainable params: "+u),r("Non-trainable params: "+l),r("_".repeat(e))}(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>Tl.adagrad(.01),Adadelta:()=>Tl.adadelta(1,.95,hc()),Adam:()=>Tl.adam(.001,.9,.999,hc()),Adamax:()=>Tl.adamax(.002,.9,.999,hc(),0),RMSProp:()=>Tl.rmsprop(.001,.9,0,hc()),SGD:()=>Tl.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new fc("Unknown Optimizer "+t)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof Cl))throw new fc("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new fc(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);e=t.loss.map(t=>Fd(t))}else{const n=Fd(t.loss);this.outputs.forEach(t=>{e.push(n)})}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new fc(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: `+this.outputNames);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(Fd(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let a=0;a<this.outputs.length;++a){const t=this.internalOutputShapes[a];this.feedOutputNames.push(this.outputNames[a]),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[a])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Qc("loss",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}});const r=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>[]);let n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+t);n=t}if(Array.isArray(n))return e.map(t=>n);{const t=[];for(const r of e){let e=n.hasOwnProperty(r)?n[r]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),s=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};Qc("metric",()=>{for(let t=0;t<this.outputs.length;++t)-1===n.indexOf(t)&&(e=>{let n,r,a;for(const i of e){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const e=this.internalOutputShapes[t];let s;1===e[e.length-1]||this.lossFunctions[t]===Rd?-1!==["accuracy","acc"].indexOf(i)?r=_d:-1!==["crossentropy","ce"].indexOf(i)&&(r=Md):this.lossFunctions[t]===Ad?-1!==["accuracy","acc"].indexOf(i)?r=zd:-1!==["crossentropy","ce"].indexOf(i)&&(r=Bd):-1!==["accuracy","acc"].indexOf(i)?r=Od:-1!==["crossentropy","ce"].indexOf(i)&&(r=Ld),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const t=Wd(i);a=t,n=""+Vd(i)}let e;Qc(n,()=>{e=a}),s(t,n,e)}})(r[t])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,n={}){const r=null==n.batchSize?32:n.batchSize;up(r);const s=this.standardizeUserDataXY(t,e,!0,r);try{const a=s[0].concat(s[1]);return this.makeTestFunction(),wc(this.testLoop(this.testFunction,a,r,n.verbose,n.steps))}finally{pp(s[0],t),pp(s[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const s=null!=(n=n||{}).batches,a=t.testFunction;let i=[];if(n.verbose>0)throw new mc("Verbose mode is not implemented yet.");r.assert(!s||n.batches>0&&Number.isInteger(n.batches),()=>"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches));const o="function"==typeof e.next?e:await e.iterator();let u=0,l=0;for(;!s||l<n.batches;){const e=await o.next();if(i=Ri(()=>{if(e.value){const{xs:n,ys:r}=ap(t,e.value),s=n.concat(r),o=Ri(()=>a(s));if(Ti(s),0===l)for(let t=0;t<o.length;++t)i.push(He(0));const c=s[0].shape[0];for(let t=0;t<o.length;++t){const e=o[t],n=i[t];i[t]=Ri(()=>Le(i[t],xn(c,e))),l>0&&Ti(n)}Ti(o),u+=c,++l}return i}),e.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let r=0;r<i.length;++r){const t=i[r];i[r]=bn(i[r],u),Ti(t)}return wc(i)}(this,t,e)}checkNumSamples(t,e,n,r="steps"){let s;if(null!=n){if(s=null,null!=e)throw new fc(`If ${r} is set, batchSize must be null or undefined.Got batchSize = `+e)}else{if(null==t)throw new fc("Either the input data should have a defined shape, or "+r+" shoud be specified.");s=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return s}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new fc("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),r=this.retrieveSymbolicTensors(n?e:[e]),s=new Kd;if(t instanceof le&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new fc(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)s.add(this.inputs[e],t[e])}else for(const i of this.inputs){const e=t[i.name];if(null==e)throw new fc("No value is provided for the model's input "+i.name);s.add(i,e)}const a=Jd(r,s);return n?a:a[0]}retrieveSymbolicTensors(t){const e=yc(null,t.length);let n=t.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map(t=>t.name);for(let r=0;r<t.length;++r){const i=a.indexOf(t[r]);if(-1!==i&&(e[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach((e,r)=>{null==e&&n.push(t[r])}),new fc("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(n))}return e}predictLoop(t,e=32,n=!1){return Ri(()=>{const r=this.checkNumSamples(t);if(n)throw new mc("Verbose predictLoop() is not implemented yet.");const s=hp(r,e),a=this.outputs.map(t=>[]);for(let e=0;e<s.length;++e)Ri(()=>{const n=lp(t,s[e][0],s[e][1]),r=[];if(Array.isArray(n))for(let t=0;t<n.length;++t)r.push({key:this.inputs[t],value:n[t]});else r.push({key:this.inputs[0],value:n});const a=new Kd(r);return Jd(this.outputs,a)}).forEach((t,e)=>a[e].push(t));return wc(a.map(t=>on(t,0)))})}predict(t,e={}){const n=dp(t);yp(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==e.batchSize?32:e.batchSize;return up(r),this.predictLoop(n,r)}finally{pp(n,t)}}predictOnBatch(t){yp(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,s){if(null==this.optimizer_)throw new pc("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let r=0;r<this.feedOutputShapes.length;++r){const t=this.feedOutputShapes[r];a.push(this.feedLossFns[r]===Ad?t.slice(0,t.length-1).concat([1]):t)}if(function(t,e,n){const s=Ec(t.map(t=>t.shape[0]));s.sort();const a=Ec(e.map(t=>t.shape[0]));if(a.sort(),s.length>1)throw new fc("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(t=>t.shape)));if(a.length>1)throw new fc("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(t=>t.shape)));if(s.length>0&&a.length>0&&!r.arraysEqual(s,a))throw new fc(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${a[0]} target sample(s).`)}(t=gp(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=gp(e,this.feedOutputNames,a,!1,"target")),function(t,e,n){const r=[Id,Rd,Ed];for(let s=0;s<t.length;++s){const a=t[s],i=e[s],o=n[s];if(null!=i){if(i===Ed&&1===a.shape[a.shape.length-1])throw new fc(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const t=a.shape.slice(1),e=o.slice(1);for(let n=0;n<t.length;++n){const r=t[n],s=e[n];if(null!=s&&r!==s)throw new fc(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&t[0].shape[0]%s!=0)throw new fc(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(t,e,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const t=np(r,this.outputNames);u=[];for(let e=0;e<t.length;++e)u.push(await rp(o[e],null,t[e]))}return[i,o,u]}testLoop(t,e,n,r=0,s){return Ri(()=>{const a=this.checkNumSamples(e,n,s,"steps"),i=[];if(r>0)throw new mc("Verbose mode is not implemented yet.");if(null!=s)throw new mc("steps mode in testLoop() is not implemented yet");{const r=hp(a,n),s=je(uh(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],u=hh(s,a,o-a),l=cp(e,u),c=t(l);if(0===n)for(let t=0;t<c.length;++t)i.push(He(0));for(let t=0;t<c.length;++t)i[t]=Le(i[t],xn(o-a,c[t]))}for(let t=0;t<i.length;++t)i[t]=bn(i[t],a)}return i})}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const r=t[n];let s=r;xc(t,r)>1&&(s+="_"+xc(t.slice(0,n),r)),e.push(s)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(t=>t.read());return[this.optimizer_.minimize(()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const i=new Kd(t),o=Jd(this.outputs,i,{training:!0});let u;for(let n=0;n<this.lossFunctions.length;++n){let t=(0,this.lossFunctions[n])(r[n],o[n]);null!=s[n]&&(t=sp(t,s[n]));const a=On(t);e.push(a),u=0===n?t:Le(u,t)}for(let n=0;n<this.metricsTensors.length;++n){let t;if(this.outputs.length>1&&n<this.outputs.length)t=e[n];else{const e=this.metricsTensors[n][1];t=On((0,this.metricsTensors[n][0])(r[e],o[e]))}Di(t),a.push(t)}return u=On(u),this.calculateLosses().forEach(t=>{u=Le(u,t)}),u},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=t=>Ri(()=>{const e=[];let n;const r=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let t=0;t<this.inputs.length;++t)a.push({key:this.inputs[t],value:r[t]});const i=new Kd(a),o=Jd(this.outputs,i);for(let t=0;t<this.lossFunctions.length;++t){const r=On((0,this.lossFunctions[t])(s[t],o[t]));n=0===t?r:Le(n,r),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][1],r=On((0,this.metricsTensors[t][0])(s[n],o[n]));e.push(r)}return e})}async fit(t,e,n={}){return async function(t,e,n,s={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,i,o,u,l,c,h;t.isTraining=!0;try{const d=null==s.batchSize?32:s.batchSize;up(d);const p=!1,f=await t.standardizeUserData(e,n,s.sampleWeight,s.classWeight,p,d);a=f[0],i=f[1],h=f[2];let m,g=!1;if(null!=s.validationData&&s.validationData.length>0){if(g=!0,2!==s.validationData.length)throw 3===s.validationData.length?new mc("validationData including sample weights is not supported yet."):new fc("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+s.validationData+" is invalid.");o=s.validationData[0],u=s.validationData[1];const e=!0,n=await t.standardizeUserData(o,u,null,null,e,d);l=n[0],c=n[1],m=l.concat(c)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){g=!0;const t=Math.floor(a[0].shape[0]*(1-s.validationSplit)),e=a[0].shape[0];l=lp(a,t,e),a=lp(a,0,t),c=lp(i,t,e),i=lp(i,0,t),m=l.concat(c)}else null!=s.validationSteps&&(g=!0);const y=a.concat(i).concat(h);t.checkTrainableWeightsConsistency();const b=t.makeTrainFunction(),x=t.getDedupedMetricsNames();let w,v;g?(t.makeTestFunction(),w=t.testFunction,v=x.slice().concat(x.map(t=>"val_"+t))):(w=null,m=[],v=x.slice());const C=wd(s.callbacks,s.yieldEvery);return await async function(t,e,n,s,a,i,o,u,l,c,h,d,p,f,m){null==a&&(a=32),null==i&&(i=1),null==h&&(h=!0),null==p&&(p=0);let g=!1;null!=l&&null!=c&&(g=!0);const y=t.checkNumSamples(n,a,null,"steps_per_epoch");let b;null!=y&&(b=uh(0,y)),null==o&&(o=1);const{callbackList:x,history:w}=Cd(u,o,i,p,y,null,a,g,d);x.setModel(t),t.history=w,await x.onTrainBegin(),t.stopTraining_=!1;for(let v=p;v<i;++v){await x.onEpochBegin(v);const i={};{if("batch"===h)throw new mc("batch shuffling is not implemneted yet");h&&r.shuffle(b);const o=je(b),u=hp(y,a);for(let r=0;r<u.length;++r){const h={};if(await x.onBatchBegin(r,h),Ri(()=>{const d=u[r][0],p=u[r][1],f=hh(o,d,p-d);h.batch=r,h.size=p-d;const m=cp(n,f),y=e(m);for(let t=0;t<s.length;++t){const e=y[t];h[s[t]]=e,Di(e)}if(r===u.length-1&&g){const e=t.testLoop(l,c,a);for(let t=0;t<s.length;++t){const n=s[t],r=e[t];Di(r),i["val_"+n]=r}}}),await x.onBatchEnd(r,h),pd(h),t.stopTraining_)break}o.dispose()}if(await x.onEpochEnd(v,i),t.stopTraining_)break}return await x.onTrainEnd(),await t.history.syncData(),t.history}(t,b,y,x,d,s.epochs,s.verbose,C,w,m,s.shuffle,v,s.initialEpoch)}finally{t.isTraining=!1,pp(a,e),pp(i,n),pp(l,o),pp(c,u),null!=h&&Ti(h)}}(this,t,e,n)}async fitDataset(t,e){return async function(t,e,n){const s=null!=n.batchesPerEpoch;if(r.assert(null!=t.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),r.assert(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),r.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs),r.assert(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch),r.assert(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const a=null!=n.validationData;let i,o;if(a)if(op(n.validationData))r.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches);else{const t=function(t){if(3===t.length)throw new mc("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);i=t.xs,o=t.ys}const u=t.makeTrainFunction(),l=t.getDedupedMetricsNames();let c;c=a?l.slice().concat(l.map(t=>"val_"+t)):l.slice();const h=wd(n.callbacks,n.yieldEvery),d=null==n.verbose?1:n.verbose,{callbackList:p,history:f}=Cd(h,d,n.epochs,null,null,function(t,e){let n=null;return null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size),n}(e,n),null,a,c);p.setModel(t),t.history=f,await p.onTrainBegin(),t.stopTraining_=!1;let m=null==n.initialEpoch?0:n.initialEpoch,g=await e.iterator();for(;m<n.epochs;){const r={};await p.onEpochBegin(m);let c=0,h=0;for(s||(g=await e.iterator());!s||c<n.batchesPerEpoch;){const e=await g.next();if(s&&e.done){console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+c+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:r,ys:s}=ap(t,e.value),a={};a.batch=h,a.size=r[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const e=np(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)i.push(await rp(s[t],null,e[t]))}const o=r.concat(s).concat(i),d=u(o);Ti(o);for(let t=0;t<l.length;++t){const e=d[t];a[l[t]]=e,Di(e)}await p.onBatchEnd(h,a),pd(a),h++,c++}if(s?c>=n.batchesPerEpoch:e.done){if(a){let e;e=op(n.validationData)?vc(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):vc(t.evaluate(i,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)r["val_"+t.metricsNames[n]]=e[n]}break}if(t.stopTraining_)break}if(await p.onEpochEnd(m,r),m++,t.stopTraining_)break}return await p.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const o of a){const t=await o.data();i.push(t[0])}return Ti(a),wc(i)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let a=0;a<r.length;++a)n&&!r[a].trainable||e.push({name:r[a].originalName,tensor:s[a]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=Ai().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-Ai().numTensors}return t}getLossIdentifiers(){let t;if("string"==typeof this.loss)t=Cc(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!=typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(t=>Cc(t))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const r of e){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");t[r]=Cc(n[r])}}return t}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Cc(Vd(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>Cc(Vd(t)));{const t={};for(const e in this.metrics)t[e]=Cc(Vd(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=Sd(function t(e,n){if(null===e)return null;if("string"==typeof e)return Sc(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const r=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];jd(n,a,s)?r.push(s):r.push(t(s,n))}return r}{const n={};for(const r of Object.keys(e)){const s=e[r];if("name"===r&&"string"==typeof s)n[r]=s;else{const e=Sc(r);n[e]=t(s,e)}}return n}}(t.optimizer_config));let n,r;if("string"==typeof t.loss)n=Sc(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(t=>Sc(t));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=Sc(t.loss[e])}if(Array.isArray(t.metrics))r=t.metrics.map(t=>Sc(t));else if(null!=t.metrics){r={};for(const e in t.metrics)r[e]=Sc(t.metrics[e])}this.compile({loss:n,metrics:r,optimizer:e})}async save(t,e){if("string"==typeof t){const e=o.getSaveHandlers(t);if(0===e.length)throw new fc(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new fc(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new fc("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await o.encodeWeights(this.getNamedWeights(e)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.0.1",convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:s}=await o.encodeWeights(await this.optimizer.getWeights(),t);n.specs.push(...s),n.data=o.concatenateArrayBuffers([n.data,e])}return null!=this.userDefinedMetadata&&(Ud(this.userDefinedMetadata,this.name,!0),r.userDefinedMetadata=this.userDefinedMetadata),r.weightData=n.data,r.weightSpecs=n.specs,t.save(r)}setUserDefinedMetadata(t){Ud(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}bp.className="Model",l.registerClass(bp);class xp extends bp{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:Yh("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(t=>t<0))throw new fc("Negative dimension size caused by adding layer "+t.name+" with input shape ["+t.inboundNodes[0].inputTensors[0].shape+"]")}add(t){const e=t instanceof xp||t instanceof bp;let n;if(e){if(n=t,1!==n.outputs.length)throw new fc("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new fc("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new fc("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=function(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new fc("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;return null==n&&(n="float32"),new hd({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new fc(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new fc("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=function t(e,n,r){if((null==n||null!=r&&r>0)&&(n=e.sourceLayer,r=e.nodeIndex),0===n.inboundNodes.length)return[e];{const e=n.inboundNodes[r];if(0===e.inboundLayers.length)return e.inputTensors;{const n=[];for(let r=0;r<e.inboundLayers.length;r++){const s=t(e.inputTensors[r],e.inboundLayers[r],e.nodeIndices[r]);for(const t of s)-1===n.indexOf(t)&&n.push(t)}return n}}}(this.outputs[0])}this.inboundNodes=[],new ud({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:yc(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(td(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new bp({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new pc("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new pc("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new pc("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new pc("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},s=!1){let a,i={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new fc("Legacy serialization format not supported yet.");a=e}else r.assert(null!=e.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=e.layers,delete e.layers,i=e;const o=new t(i);if(!(o instanceof xp))throw new mc("Sequential.fromConfig called on non-Sequential input: "+o);for(const r of a){const t=Sd(r,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(t){if(null==this.model)throw new fc("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new fc("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}xp.className="Sequential",l.registerClass(xp);class wp extends l.Serializable{getConfig(){return{}}}class vp extends wp{apply(t,e=1){return function(t,e=1){if(1!==e)throw new mc(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return so(t)}(t,e)}}vp.className="elu",l.registerClass(vp);class Cp extends wp{apply(t){return zo(t)}}Cp.className="selu",l.registerClass(Cp);class Sp extends wp{apply(t){return Oo(t)}}Sp.className="relu",l.registerClass(Sp);class Np extends wp{apply(t){return Ri(()=>go(6,Oo(t)))}}Np.className="relu6",l.registerClass(Np);class Ip extends wp{apply(t){return t}}Ip.className="linear",l.registerClass(Ip);class kp extends wp{apply(t){return lr(t)}}kp.className="sigmoid",l.registerClass(kp);class $p extends wp{apply(t){return function(t){return Ri(()=>{const e=Le(.5,xn(.2,t));return Xn(e,0,1)})}(t)}}$p.className="hardSigmoid",l.registerClass($p);class Ep extends wp{apply(t){return gr(t)}}Ep.className="softplus",l.registerClass(Ep);class Ap extends wp{apply(t){return function(t){return Ri(()=>bn(t,Wn(t).add(1)))}(t)}}Ap.className="softsign",l.registerClass(Ap);class Rp extends wp{apply(t){return wr(t)}}Rp.className="tanh",l.registerClass(Rp);class Tp extends wp{apply(t,e=-1){return yu(t,e)}}Tp.className="softmax",l.registerClass(Tp);class Dp extends wp{apply(t,e=-1){return bu(t,e)}}function Fp(t){return t.getClassName()}function _p(t,e={}){return kc(t,l.SerializationMap.getMap().classNameMap,e,"activation")}function Op(t){if(null==t)return _p({className:"linear",config:{}});if("string"==typeof t){const e={};return e.className=t,e.config={},_p(e)}return t instanceof wp?t:_p(t)}Dp.className="logSoftmax",l.registerClass(Dp);class Mp extends l.Serializable{}class zp extends Mp{constructor(t){super(),function(t){if(null!=t&&"object"!=typeof t)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+t)}(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return Ri(()=>{let e=en([1]);return this.hasL1&&(e=Le(e,Ln(xn(this.l1,Wn(t))))),this.hasL2&&(e=Le(e,Ln(xn(this.l2,wh(t))))),e.asScalar()})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}zp.className="L1L2",l.registerClass(zp);const Lp={l1l2:"L1L2"};function Bp(t){return Ic(t)}function Pp(t,e={}){return kc(t,l.SerializationMap.getMap().classNameMap,e,"regularizer")}function Wp(t){return null==t?null:"string"==typeof t?Pp({className:t in Lp?Lp[t]:t,config:{}}):t instanceof Mp?t:Pp(t)}class Vp extends cd{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=Qh(t);let n=Oo(t);return null!=this.maxValue&&(n=Xn(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}Vp.className="ReLU",l.registerClass(Vp);class Up extends cd{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=Qh(t);return lo(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}Up.className="LeakyReLU",l.registerClass(Up);class Gp extends cd{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=Hh(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Wp(t.alphaRegularizer),this.alphaConstraint=Uc(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!=typeof t.sharedAxes)throw new fc("Expected sharedAxes to be a number or an array of numbers, but got "+t.sharedAxes);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=td(t)).slice(1);if(null!=this.sharedAxes)for(const r of this.sharedAxes)e[r-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let r=1;r<t.length;++r)n[r]=t[r];this.inputSpec=[new ad({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=Qh(t),ko(t,this.alpha.read())}getConfig(){const t={alphaInitializer:qh(this.alphaInitializer),alphaRegularizer:Bp(this.alphaRegularizer),alphaConstraint:Wc(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}Gp.className="PReLU",l.registerClass(Gp);class qp extends cd{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new mc(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=Qh(t);return so(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}qp.className="ELU",l.registerClass(qp);class Hp extends cd{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=Qh(t);return n.mul(lh(n.greater(this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}Hp.className="ThresholdedReLU",l.registerClass(Hp);class jp extends cd{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new Tp).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=Qh(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Kp(t,e,n){if("number"==typeof t)return yc(t,e);if(t.length!==e)throw new fc(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let s=0;s<e;++s){const a=t[s];if((r=a)!==parseInt(r.toString(),10))throw new fc(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number `+a)}return t;var r}function Xp(t,e,n,r,s=1){if(null==t)return t;let a;return a="same"===n?t:t-(e+(e-1)*(s-1))+1,Math.floor((a+r-1)/r)}function Yp(t,e,n,r){if(null==t)return null;if("valid"===r)t=t*e+oh([n-e,0]);else{if("same"!==r)throw new fc(`Unsupport padding mode: ${r}.`);t*=e}return t}function Jp(t,e){return Ri(()=>(Xc(e),"channelsFirst"===e?Qr(t,[0,2,3,1]):t))}function Zp(t,e){return Ri(()=>(Xc(e),"channelsFirst"===e?Qr(t,[0,2,3,4,1]):t))}function Qp(t,e,n,r=[1,1],s="valid",a,i,o=null){return Ri(()=>{if(null==a&&(a="channelsLast"),Xc(a),3!==t.rank&&4!==t.rank)throw new fc(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new fc(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let u=Jp(t,a);if("causal"===s)throw new mc("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=g.conv2d({x:u,filter:e,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(u=Qr(u,[0,3,1,2])),u})}jp.className="Softmax",l.registerClass(jp);class tf extends cd{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",tf.verifyArgs(e),this.rank=t,Dc(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new mc(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Kp(e.kernelSize,t,"kernelSize"),this.strides=Kp(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,Yc(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Xc(this.dataFormat),this.activation=Op(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=Hh(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Uc(e.biasConstraint),this.biasRegularizer=Wp(e.biasRegularizer),this.activityRegularizer=Wp(e.activityRegularizer),this.dilationRate=Kp(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new fc("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(this.dilationRate));if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new fc("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(this.dilationRate))}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new fc("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(this.dilationRate))}static verifyArgs(t){if(bc("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!Tc(t.kernelSize,"number",1,3))throw new fc(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Fp(this.activation),useBias:this.useBias,biasInitializer:qh(this.biasInitializer),biasRegularizer:Bp(this.biasRegularizer),activityRegularizer:Bp(this.activityRegularizer),biasConstraint:Wc(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class ef extends tf{constructor(t,e){super(t,e),this.kernel=null,ef.verifyArgs(e),this.filters=e.filters,Dc(this.filters,"filters"),this.kernelInitializer=Hh(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Uc(e.kernelConstraint),this.kernelRegularizer=Wp(e.kernelRegularizer)}build(t){t=td(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new fc("The channel dimension of the input should be defined. Found "+t[e]);const n=t[e],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return Ri(()=>{let e;t=Qh(t);const n=null==this.bias?null:this.bias.read(),r=Fc(this.activation.getClassName());if(null!=r&&2===this.rank)e=Qp(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)e=function(t,e,n,r=1,s="valid",a,i=1){return Ri(()=>{if(null==a&&(a="channelsLast"),Xc(a),3!==t.shape.length)throw new fc("The input of a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead.");if(3!==e.shape.length)throw new fc("The kernel for a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new fc("The bias for a conv1dWithBias operation should be 1, but is "+e.shape.length+" instead");if("channelsFirst"===a&&(t=Qr(t,[0,2,1])),"causal"===s)throw new mc("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Xi(t,e,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=Ch(o,n)),o})}(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=Qp(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new mc("convolutions greater than 3D are not implemented yet.");e=function(t,e,n,r=[1,1,1],s="valid",a,i){return Ri(()=>{if(null==a&&(a="channelsLast"),Xc(a),4!==t.rank&&5!==t.rank)throw new fc("conv3dWithBias expects input to be of rank 4 or 5, but received "+t.rank+".");if(4!==e.rank&&5!==e.rank)throw new fc("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+t.rank+".");let o=Zp(t,a);if("causal"===s)throw new mc("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Ji(o,e,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=Ch(o,n)),"channelsFirst"===a&&(o=Qr(o,[0,4,1,2,3])),o})}(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e})}computeOutputShape(t){t=td(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let s=0;s<n.length;++s){const t=Xp(n[s],this.kernelSize[s],this.padding,this.strides[s],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[s]);e.push(t)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:qh(this.kernelInitializer),kernelRegularizer:Bp(this.kernelRegularizer),kernelConstraint:Wc(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new fc("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(t.filters))}}class nf extends ef{constructor(t){super(2,t),nf.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!Tc(t.kernelSize,"number",1,2))throw new fc(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}nf.className="Conv2D",l.registerClass(nf);class rf extends ef{constructor(t){super(3,t),rf.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new fc(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}rf.className="Conv3D",l.registerClass(rf);class sf extends nf{constructor(t){if(super(t),this.inputSpec=[new ad({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new fc("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(t){if(4!==(t=td(t)).length)throw new fc("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new fc("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ad({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return Ri(()=>{let e=Qh(t);if(4!==e.shape.length)throw new fc("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+e.shape.length);const n=e.shape;let r,s;"channelsFirst"===this.dataFormat?(r=2,s=3):(r=1,s=2);const a=n[s],i=this.kernelSize[1],o=this.strides[1],u=[n[0],Yp(n[r],this.strides[0],this.kernelSize[0],this.padding),Yp(a,o,i,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=Qr(e,[0,2,3,1]));let l=Yi(e,this.kernel.read(),u,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(l=Qr(l,[0,3,1,2])),null!=this.bias&&(l=Ch(l,this.bias.read(),this.dataFormat)),null!=this.activation&&(l=this.activation.apply(l)),l})}computeOutputShape(t){const e=(t=td(t)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],u=this.strides[1];return e[n]=this.filters,e[r]=Yp(e[r],o,a,this.padding),e[s]=Yp(e[s],u,i,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}sf.className="Conv2DTranspose",l.registerClass(sf);class af extends ef{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new fc("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new fc("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new fc(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received `+JSON.stringify(e.padding));this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Hh(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Wp(e.depthwiseRegularizer),this.depthwiseConstraint=Uc(e.depthwiseConstraint),this.pointwiseInitializer=Hh(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Wp(e.pointwiseRegularizer),this.pointwiseConstraint=Uc(e.pointwiseConstraint)}build(t){if((t=td(t)).length<this.rank+2)throw new fc(`Inputs to SeparableConv${this.rank}D should have rank `+(this.rank+2)+", but received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new fc("The channel dimension of the inputs should be defined, but found "+JSON.stringify(t[e]));const n=t[e],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let a=0;a<this.rank;++a)s.push(1);s.push(n*this.depthMultiplier,this.filters),this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.inputSpec=[new ad({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return Ri(()=>{let e;if(t=Qh(t),1===this.rank)throw new mc("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=Qr(t,[0,2,3,1])),e=Lo(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=Ch(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=Qr(e,[0,3,1,2])),e})}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=qh(this.depthwiseInitializer),t.pointwiseInitializer=qh(this.pointwiseInitializer),t.depthwiseRegularizer=Bp(this.depthwiseRegularizer),t.pointwiseRegularizer=Bp(this.pointwiseRegularizer),t.depthwiseConstraint=Wc(this.depthwiseConstraint),t.pointwiseConstraint=Wc(this.pointwiseConstraint),t}}af.className="SeparableConv";class of extends af{constructor(t){super(2,t)}}of.className="SeparableConv2D",l.registerClass(of);class uf extends ef{constructor(t){super(1,t),uf.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!Tc(t.kernelSize,"number",1,1))throw new fc(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}uf.className="Conv1D",l.registerClass(uf);class lf extends cd{constructor(t){super(t),this.cropping="number"==typeof t.cropping?[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return Ri(()=>{if(t=Qh(t),"channelsLast"===this.dataFormat){const e=ph(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return ph(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=ph(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return ph(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}lf.className="Cropping2D",l.registerClass(lf);class cf extends cd{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],null==t[2]?null:this.size[0]*t[2],null==t[3]?null:this.size[1]*t[3]]:[t[0],null==t[1]?null:this.size[0]*t[1],null==t[2]?null:this.size[1]*t[2],t[3]]}call(t,e){return Ri(()=>{let e=Qh(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=Qr(e,[0,2,3,1]);const t=e.resizeNearestNeighbor([this.size[0]*n[2],this.size[1]*n[3]]);return Qr(t,[0,3,1,2])}return e.resizeNearestNeighbor([this.size[0]*n[1],this.size[1]*n[2]])})}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}cf.className="UpSampling2D",l.registerClass(cf);class hf extends tf{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Hh(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Uc(t.depthwiseConstraint),this.depthwiseRegularizer=Wp(t.depthwiseRegularizer)}build(t){if((t=td(t)).length<4)throw new fc(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new fc(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(t,e){return Ri(()=>{let e=function(t,e,n=[1,1],r="valid",s,a){return Ri(()=>{null==s&&(s="channelsLast"),Xc(s);let i=Jp(t,s);if(4!==t.rank)throw new fc("Input for depthwiseConv2d is required to be 4-D, but is instead "+t.rank+"-D");if(4!==e.rank)throw new fc("depthwiseKernel is required to be 4-D, but is instead "+e.rank+"-D");return i=to(i,e,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=Qr(i,[0,3,1,2])),i})}(t=Qh(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=Ch(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e})}computeOutputShape(t){t=td(t);const e="channelsFirst"===this.dataFormat?t[3]:t[2],n="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,r=Xp("channelsFirst"===this.dataFormat?t[2]:t[1],this.kernelSize[0],this.padding,this.strides[0]),s=Xp(e,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],n,r,s]:[t[0],r,s,n]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=qh(this.depthwiseInitializer),t.depthwiseRegularizer=Bp(this.depthwiseRegularizer),t.depthwiseConstraint=Wc(this.depthwiseRegularizer),t}}hf.className="DepthwiseConv2D",l.registerClass(hf);class df extends cd{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let r=0;r<this.noiseShape.length;++r)n.push(null==this.noiseShape[r]?e[r]:this.noiseShape[r]);return n}call(t,e){return Ri(()=>{this.invokeCallHook(t,e);const n=Qh(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,r=this.getNoiseShape(n);return Nh(()=>Sh(n,this.rate,r,this.seed),()=>n,t)}return t})}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}df.className="Dropout",l.registerClass(df);class pf extends df{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}pf.className="SpatialDropout1D",l.registerClass(pf);class ff extends cd{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,Dc(this.units,"units"),this.activation=Op(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=Hh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Hh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Uc(t.kernelConstraint),this.biasConstraint=Uc(t.biasConstraint),this.kernelRegularizer=Wp(t.kernelRegularizer),this.biasRegularizer=Wp(t.biasRegularizer),this.activityRegularizer=Wp(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=td(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=td(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return Ri(()=>{this.invokeCallHook(t,e);const n=Qh(t),r=Fc(this.activation.getClassName());let s;return null!=r?s=bh(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=bh(n,this.kernel.read()),null!=this.bias&&(s=Ch(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s})}getConfig(){const t={units:this.units,activation:Fp(this.activation),useBias:this.useBias,kernelInitializer:qh(this.kernelInitializer),biasInitializer:qh(this.biasInitializer),kernelRegularizer:Bp(this.kernelRegularizer),biasRegularizer:Bp(this.biasRegularizer),activityRegularizer:Bp(this.activityRegularizer),kernelConstraint:Wc(this.kernelConstraint),biasConstraint:Wc(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}ff.className="Dense",l.registerClass(ff);class mf extends cd{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=td(t);for(const e of t.slice(1))if(null==e)throw new fc(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],sh(t,1)]}call(t,e){return Ri(()=>{this.invokeCallHook(t,e);let n=Qh(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=n.transpose(t)}return function(t){if(t.rank<=1)throw new fc(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],sh(t.shape,1)];return t.reshape(e)}(n)})}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}mf.className="Flatten",l.registerClass(mf);class gf extends cd{constructor(t){super(t),this.supportsMasking=!0,this.activation=Op(t.activation)}call(t,e){return Ri(()=>{this.invokeCallHook(t,e);const n=Qh(t);return this.activation.apply(n)})}getConfig(){const t={activation:Fp(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}gf.className="Activation",l.registerClass(gf);class yf extends cd{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return Ri(()=>{return t=Qh(t),e=t,n=this.n,Ri(()=>{if(2!==e.shape.length)throw new fc(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);return gh(ch(e,1),[1,n,1])});var e,n})}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}yf.className="RepeatVector",l.registerClass(yf);class bf extends cd{constructor(t){super(t),this.targetShape=t.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",r=e.slice();let s=1,a=null;for(let o=0;o<r.length;++o){const t=r[o];if(this.isUnknown(t)){if(null!==a)throw new fc("Can only specifiy one unknown dimension.");a=o}else s*=t}const i=sh(t);if(null!==a){if(0===s||i%s!=0)throw new fc(n);r[a]=i/s}else if(i!==s)throw new fc(n);return r}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return Ri(()=>{this.invokeCallHook(t,e);const n=Qh(t),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)})}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}bf.className="Reshape",l.registerClass(bf);class xf extends cd{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+t.dims+" instead.");const e=uh(1,t.dims.length+1);if(!r.arraysEqual(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new ad({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=td(t)).slice();return this.dims.forEach((n,r)=>{e[r+1]=t[n]}),e}call(t,e){return Qr(Qh(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}xf.className="Permute",l.registerClass(xf);class wf extends cd{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=Qh(t);return Tn(xo(n,this.maskValue),-1)}call(t,e){return Ri(()=>{this.invokeCallHook(t,e);const n=Qh(t),r=Tn(xo(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))})}}wf.className="Masking",l.registerClass(wf);class vf extends cd{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=null==t.inputLength?[e,null]:[e].concat(vc(t.inputLength))}this.inputDim=t.inputDim,Dc(this.inputDim,"inputDim"),this.outputDim=t.outputDim,Dc(this.outputDim,"outputDim"),this.embeddingsInitializer=Hh(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Wp(t.embeddingsRegularizer),this.activityRegularizer=Wp(t.activityRegularizer),this.embeddingsConstraint=Uc(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return Ri(()=>this.maskZero?(t=Qh(t),xo(t,an(t))):null)}computeOutputShape(t){if(t=td(t),null==this.inputLength)return[...t,this.outputDim];const e=vc(this.inputLength);if(e.length!==t.length-1)throw new fc(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);{let n=0;for(let r=0;r<e.length;++r){const s=e[r],a=t[r+1];if(null!=s&&null!=a&&s!==a)throw new fc(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);null==s&&(e[n]=a),n++}}return[t[0],...e,this.outputDim]}call(t,e){return Ri(()=>{this.invokeCallHook(t,e);let n=Qh(t);return"int32"!==n.dtype&&(n=lh(n,"int32")),xh(this.embeddings.read(),n.as1D()).reshape(td(this.computeOutputShape(n.shape)))})}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:qh(this.embeddingsInitializer),embeddingsRegularizer:Bp(this.embeddingsRegularizer),activityRegularizer:Bp(this.activityRegularizer),embeddingsConstraint:Wc(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}vf.className="Embedding",l.registerClass(vf);class Cf extends cd{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new mc}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const s=t[t.length-e.length+r],a=e[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new fc("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(s)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[td(t)]),(t=t).length<2)throw new fc(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const s of t)null!=s&&null!==s[0]&&e.push(s[0]);if(e=Ec(e),e.length>1)throw new fc(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let s=1;s<t.length;++s){const e=null==t[s]?null:t[s].slice(1);n=this.computeElementwiseOpOutputShape(n,e)}const r=t.map(t=>t.length);this.reshapeRequired=-1!==t.indexOf(null)||1!==Ec(r).length}call(t,e){return Ri(()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map(t=>t.rank);if(-1===n.indexOf(null)){const r=oh(n);for(let n of t){const t=n.rank;for(let e=0;e<r-t;++e)n=ch(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const a of t){const t=a.rank;if(null==t){const t=a.shape,r=t[0],s=t.slice(1).concat([r]);let i=a.reshape([r].concat(sh(t.slice(1))));i=Qr(i,[1,0]),i=i.reshape(s),e.push(i),n=!0}else if(t>1){const r=uh(1,t).concat([0]);e.push(Qr(a,r)),n=!0}else e.push(a)}let r=this.mergeFunction(e);const s=r.rank;if(n)if(null==s){const t=r.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));r=Qr(r.reshape([-1,e]),[1,0]).reshape(n)}else if(s>1){const t=[s-1].concat(uh(0,s-1));r=Qr(r,t)}return r}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let r=1;r<t.length;++r){const n=null==t[r]?null:t[r].slice(1);e=this.computeElementwiseOpOutputShape(e,n)}let n=[];for(const r of t)null!=r&&null!==r[0]&&n.push(r[0]);return n=Ec(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return Ri(()=>{if(null==e)return null;if(!Array.isArray(e))throw new fc("`mask` should be an Array");if(!Array.isArray(t))throw new fc("`inputs` should be an Array");if(e.length!==t.length)throw new fc(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(t=>null==t))return null;let n=(e=e.map(t=>null==t?t:hn(t,0)))[0];for(let t=1;t<e.length-1;++t)n=Rs(n,e[t]);return n})}}class Sf extends Cf{constructor(t){super(t)}mergeFunction(t){return Ri(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Le(e,t[n]);return e})}}Sf.className="Add",l.registerClass(Sf);class Nf extends Cf{constructor(t){super(t)}mergeFunction(t){return Ri(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=xn(e,t[n]);return e})}}Nf.className="Multiply",l.registerClass(Nf);class If extends Cf{constructor(t){super(t)}mergeFunction(t){return Ri(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Le(e,t[n]);return xn(1/t.length,e)})}}If.className="Average",l.registerClass(If);class kf extends Cf{constructor(t){super(t)}mergeFunction(t){return Ri(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=uo(e,t[n]);return e})}}kf.className="Maximum",l.registerClass(kf);class $f extends Cf{constructor(t){super(t)}mergeFunction(t){return Ri(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=go(e,t[n]);return e})}}$f.className="Minimum",l.registerClass($f);class Ef extends Cf{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new fc("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(const r of t)if(null!=r){e=!1;break}if(e)return;const n=[];for(let s=0;s<t.length;++s){const e=t[s].slice();e.splice(this.axis,1);let a=!1;for(const t of n)if(r.arraysEqual(t,e)){a=!0;break}a||n.push(e)}if(n.length>1)throw new fc("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return Ri(()=>fh(t,this.axis))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new fc("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const s of e.slice(1)){if(null==n[r]||null==s[r]){n[r]=null;break}n[r]+=s[r]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new fc("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new fc("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new fc(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return Ri(()=>{let n=!0;if(e.forEach(t=>{null==t||(n=!1)}),n)return null;const r=[];for(let a=0;a<t.length;++a)r.push(null==e[a]?sn(t[a]).asType("bool"):e[a].rank<t[a].rank?hn(e[a],-1):e[a]);const s=on(r,this.axis);return Rn(s,-1,!1)})}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Af(t,e){for(;t<0;)t+=e;return t}Ef.className="Concatenate",l.registerClass(Ef);class Rf extends Cf{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){r.assert(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new mc("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(e,n);if(e[s[0]]!==n[s[1]])throw new fc(`Dimension incompatibility: ${e[s[0]]} !== ${n[s[1]]}`)}mergeFunction(t){if(2!==t.length)throw new fc(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],s=t[1];return e=Array.isArray(this.axes)?this.axes.map((e,n)=>Af(e,t[n].shape.length)):[Af(this.axes,n.shape.length),Af(this.axes,s.shape.length)],this.normalize&&(n=Nd(n,e[0]),s=Nd(s,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new mc("batchDot is not implemented for tensors of 4D or higher rank yet");if(r.assert(t.shape.length>=2,()=>"batchDot requires the rank of x to be >= 2, but got "+t.shape.length),r.assert(t.shape.length>=2,()=>"batchDot requires the rank of y to be >= 2, but got "+e.shape.length),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new mc("batchDot is not implemented for complex64-type Tensors yet.");const s=t.shape.length,a=e.shape.length;null==n&&(n=[s-1,a-2]);const i=n;return Ri(()=>{let n,r;if(s>a){n=s-a;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else if(a>s){n=a-s;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else n=0;if(r=2===t.shape.length&&2===e.shape.length?i[0]===i[1]?t.mul(e).sum(i[0]):t.transpose([1,0]).mul(e).sum(i[1]):t.matMul(e,i[0]!==t.shape.length-1,i[1]===e.shape.length-1),n>0){let t;t=s>a?s+a-3:s-1;const e=[];for(let r=t;r<t+n;++r)e.push(r);r=r.squeeze(e)}return 1===r.shape.length&&(r=r.expandDims(1)),r})}(n,s,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[Af(this.axes,t.length),Af(this.axes,e.length)],n}computeOutputShape(t){r.assert(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new mc("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(e,n);e.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const a=e.concat(n);return 1===a.length&&a.push(1),a}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}Rf.className="Dot",l.registerClass(Rf);class Tf extends cd{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return Ri(()=>{this.invokeCallHook(t,e);const n=Qh(t);return Nh(()=>yh(n.shape,0,this.stddev).add(n),()=>n,e.training||!1)})}}Tf.className="GaussianNoise",l.registerClass(Tf);class Df extends cd{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Ri(()=>{this.invokeCallHook(t,e);const n=Qh(t);return this.rate>0&&this.rate<1?Nh(()=>{const t=Math.sqrt(this.rate/(1-this.rate));return n.mul(yh(n.shape,1,t))},()=>n,e.training||!1):n})}}Df.className="GaussianDropout",l.registerClass(Df);class Ff extends cd{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||Qh(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Ri(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return Nh(()=>{const e=Qh(t),r=-1.7580993408473766;let s=ms(_o(n),this.rate);s=lh(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate;return e.mul(s).add(s.add(-1).mul(r)).mul(a).add(i)},()=>Qh(t),e.training||!1)}return t})}}function _f(t,e,n,r,s,a=.001){let i;if(2===t.rank)i=Pi(t,e,n,r,s,a);else if(3===t.rank)i=Wi(t,e,n,r,s,a);else{if(4!==t.rank)throw new mc(`batchNormalization is not implemented for array of rank ${t.rank} yet`);i=Vi(t,e,n,r,s,a)}return i}Ff.className="AlphaDropout",l.registerClass(Ff);class Of extends cd{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Hh(t.betaInitializer||"zeros"),this.gammaInitializer=Hh(t.gammaInitializer||"ones"),this.movingMeanInitializer=Hh(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Hh(t.movingVarianceInitializer||"ones"),this.betaConstraint=Uc(t.betaConstraint),this.gammaConstraint=Uc(t.gammaConstraint),this.betaRegularizer=Wp(t.betaRegularizer),this.gammaRegularizer=Wp(t.gammaRegularizer)}build(t){t=td(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new fc(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape `+JSON.stringify(t)+".");this.inputSpec=[new ad({ndim:t.length,axes:{[e]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return Ri(()=>{const n=null!=e.training&&e.training,s=Qh(t),a=s.shape,i=a.length,o=uh(0,i),u=this.axis>=0?this.axis:this.axis+i;o.splice(u,1);const l=yc(1,i);l[u]=a[u];const c=o.slice();c.sort();const h=!r.arraysEqual(c,uh(0,i).slice(0,i-1));if(!n)return(()=>{if(h){const t=this.movingMean.read().reshape(l),e=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,r=this.scale?this.gamma.read().reshape(l):null;return _f(s,t,e,n,r,this.epsilon)}return _f(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[d,p,f]=function(t,e,n,s,a=.001){return r.arraysEqual(s.slice().sort(),uh(0,t.rank-1))?function(t,e,n,r,s=.001){return Ri(()=>{const a=zn(t,r),i=a.mean,o=a.variance;return[_f(t,i,o,n,e,s),i,o]})}(t,e,n,s,a):function(t,e,n,r,s=.001){return Ri(()=>{const a=zn(t,r),i=a.mean,o=a.variance,u=[];for(const e of uh(0,t.rank))-1!==r.indexOf(e)?u.push(1):u.push(t.shape[e]);const l=i.reshape(u),c=o.reshape(u),h=null==e?null:e.reshape(u),d=null==n?null:n.reshape(u);return[_f(t,l,c,d,h,s),i,o]})}(t,e,n,s,a)}(s,this.gamma.read(),this.beta.read(),o,this.epsilon),m=(t,e,n)=>{Ri(()=>{const r=1-n,s=t.read(),a=s.sub(e).mul(r);t.write(s.sub(a))})};return(()=>{m(this.movingMean,p,this.momentum),m(this.movingVariance,f,this.momentum)})(),d})}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:qh(this.betaInitializer),gammaInitializer:qh(this.gammaInitializer),movingMeanInitializer:qh(this.movingMeanInitializer),movingVarianceInitializer:qh(this.movingVarianceInitializer),betaRegularizer:Bp(this.betaRegularizer),gammaRegularizer:Bp(this.gammaRegularizer),betaConstraint:Wc(this.betaConstraint),gammaConstraint:Wc(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Of.className="BatchNormalization",l.registerClass(Of);class Mf extends cd{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received "+this.axis)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(this.axis));for(const t of this.axis)if(!Number.isInteger(t))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(this.axis))}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Hh(t.betaInitializer||"zeros"),this.gammaInitializer=Hh(t.gammaInitializer||"ones"),this.betaRegularizer=Wp(t.betaRegularizer),this.gammaRegularizer=Wp(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=td(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let r=0;r<this.axis.length;++r)this.axis[r]<0&&(this.axis[r]+=e);for(const r of this.axis)if(r<0||r>=e)throw new Error("Invalid axis: "+r);if(this.axis.length!==Ec(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);const n=this.axis.map(e=>t[e]);this.gamma=this.scale?this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(t,e){const n=Qh(t),r=n.shape,s=r.length;return Ri(()=>{let{mean:t,variance:e}=zn(n,this.axis,!0);const a=yc(1,s);for(const n of this.axis)a[n]=r[n];const i=t=>null!=t&&t.shape.length!==s&&this.axis!==[s-1]?t.reshape(a):t;let o=i(this.gamma.read()),u=i(this.beta.read());const l=[],c=[];for(let n=0;n<s;++n)-1!==this.axis.indexOf(n)?(l.push(r[n]),c.push(1)):(l.push(1),c.push(r[n]));return t=t.tile(l),e=e.tile(l),o=o.tile(c),u=u.tile(c),_f(n,t,e,u,o,this.epsilon)})}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:qh(this.betaInitializer),gammaInitializer:qh(this.gammaInitializer),betaRegularizer:Bp(this.betaRegularizer),gammaRegularizer:Bp(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}Mf.className="LayerNormalization",l.registerClass(Mf);class zf extends cd{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new fc(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if("number"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new fc(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new fc(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new ad({ndim:4})]}computeOutputShape(t){let e,n;return t=td(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return Ri(()=>{return e=Qh(t),n=this.padding,r=this.dataFormat,Ri(()=>{if(4!==e.rank)throw new fc("temporalPadding expects input tensor to be 4-D, but received a "+e.rank+"-D tensor.");if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new fc("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new fc(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let t;return t="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Ys(e,t)});var e,n,r})}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function Lf(t,e,n,r,s,a){return Ri(()=>{let i;Xc(s),Jc(a),Yc(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=Jp(t,s);const o="same"===r?"same":"valid";return i="max"===a?po(t,e,n,o):Mi(t,e,n,o),"channelsFirst"===s&&(i=Qr(i,[0,3,1,2])),i})}function Bf(t,e,n,r,s,a){return Ri(()=>{let i;Xc(s),Jc(a),Yc(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=Zp(t,s);const o="same"===r?"same":"valid";return i="max"===a?fo(t,e,n,o):zi(t,e,n,o),"channelsFirst"===s&&(i=Qr(i,[0,4,1,2,3])),i})}zf.className="ZeroPadding2D",l.registerClass(zf);class Pf extends cd{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new fc("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.poolSize));this.poolSize=t.poolSize}if(Dc(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new fc("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.strides));this.strides=t.strides}Dc(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,Yc(this.padding),this.inputSpec=[new ad({ndim:3})]}computeOutputShape(t){const e=Xp((t=td(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return Ri(()=>{this.invokeCallHook(t,e),t=ch(Qh(t),2);const n=this.poolingFunction(Qh(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return pn(n,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class Wf extends Pf{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Xc(s),Yc(r),Lf(t,e,n,r,s,"max")}}Wf.className="MaxPooling1D",l.registerClass(Wf);class Vf extends Pf{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Xc(s),Yc(r),Lf(t,e,n,r,s,"avg")}}Vf.className="AveragePooling1D",l.registerClass(Vf);class Uf extends cd{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new fc("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides];Dc(this.poolSize,"poolSize"),Dc(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Xc(this.dataFormat),Yc(this.padding),this.inputSpec=[new ad({ndim:4})]}computeOutputShape(t){t=td(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=Xp(e,this.poolSize[0],this.padding,this.strides[0]),n=Xp(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return Ri(()=>(this.invokeCallHook(t,e),this.poolingFunction(Qh(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Gf extends Uf{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Xc(s),Yc(r),Lf(t,e,n,r,s,"max")}}Gf.className="MaxPooling2D",l.registerClass(Gf);class qf extends Uf{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Xc(s),Yc(r),Lf(t,e,n,r,s,"avg")}}qf.className="AveragePooling2D",l.registerClass(qf);class Hf extends cd{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new fc("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];Dc(this.poolSize,"poolSize"),Dc(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Xc(this.dataFormat),Yc(this.padding),this.inputSpec=[new ad({ndim:5})]}computeOutputShape(t){t=td(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=Xp(e,this.poolSize[0],this.padding,this.strides[0]),n=Xp(n,this.poolSize[1],this.padding,this.strides[1]),r=Xp(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,r]:[t[0],e,n,r,t[4]]}call(t,e){return Ri(()=>(this.invokeCallHook(t,e),this.poolingFunction(Qh(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class jf extends Hf{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Xc(s),Yc(r),Bf(t,e,n,r,s,"max")}}jf.className="MaxPooling3D",l.registerClass(jf);class Kf extends Hf{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Xc(s),Yc(r),Bf(t,e,n,r,s,"avg")}}Kf.className="AveragePooling3D",l.registerClass(Kf);class Xf extends cd{constructor(t){super(t),this.inputSpec=[new ad({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new mc}}class Yf extends Xf{constructor(t){super(t||{})}call(t,e){return Ri(()=>{const e=Qh(t);return On(e,1)})}}Yf.className="GlobalAveragePooling1D",l.registerClass(Yf);class Jf extends Xf{constructor(t){super(t||{})}call(t,e){return Ri(()=>{const e=Qh(t);return ho(e,1)})}}Jf.className="GlobalMaxPooling1D",l.registerClass(Jf);class Zf extends cd{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Xc(this.dataFormat),this.inputSpec=[new ad({ndim:4})]}computeOutputShape(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new mc}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Qf extends Zf{call(t,e){return Ri(()=>{const e=Qh(t);return On(e,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}Qf.className="GlobalAveragePooling2D",l.registerClass(Qf);class tm extends Zf{call(t,e){return Ri(()=>{const e=Qh(t);return ho(e,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}function em(t,e,n,r){if(Array.isArray(t)){if(null!=e||null!=n)throw new fc("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=t.slice(t.length-r,t.length),t=t.slice(0,t.length-r)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function s(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=s(e),constants:n=s(n)}}function nm(t,e,n,r=!1,s,a,i=!1,o=!1){return Ri(()=>{const u=e.shape.length;if(u<3)throw new fc(`Input should be at least 3D, but is ${u}D.`);const l=[1,0].concat(uh(2,u));if(e=Qr(e,l),null!=a)throw new mc("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===u-1&&(s=hn(s,-1)),s=Qr(s,l)),r&&(e=Jo(e,0),null!=s&&(s=Jo(s,0)));const c=[];let h,d=n;const p=e.shape[0],f=mn(e);let m,g;null!=s&&(m=mn(s));for(let e=0;e<p;++e){const n=f[e],r=Ri(()=>t(n,d));if(null==s)h=r[0],d=r[1];else{const t=Ri(()=>{const t=m[e],n=sn(t).sub(t);return{output:r[0].mul(t).add(d[0].mul(n)),newStates:d.map((e,s)=>r[1][s].mul(t).add(e.mul(n)))}});h=t.output,d=t.newStates}o&&c.push(h)}return o&&(g=fn(c,1)),[h,g,d]})}tm.className="GlobalMaxPooling2D",l.registerClass(tm);class rm extends cd{constructor(t){let e;if(super(t),null==t.cell)throw new fc("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new hm({cells:t.cell}):t.cell,null==e.stateSize)throw new fc("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new ad({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?uh(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(t=>null):this.states_}setStates(t){this.states_=t}computeOutputShape(t){Jh(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let r;if(r=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const r of e)n.push([t[0],r]);return[r].concat(n)}return r}computeMask(t,e){return Ri(()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map(t=>null);return[t].concat(e)}return t})}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new mc("Constants support is not implemented in RNN yet.");Jh(t)&&(t=t[0]),t=t,this.inputSpec[0]=new ad({shape:[this.stateful?t[0]:null,null,t[t.length-1]]});const e=[t[0]].concat(t.slice(2));let n;if(this.cell.build(e),n=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!r.arraysEqual(this.stateSpec.map(t=>t.shape[t.shape.length-1]),n))throw new fc(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is `+this.cell.stateSize)}else this.stateSpec=n.map(t=>new ad({shape:[null,t]}));this.stateful&&this.resetStates()}resetStates(t,e=!1){Ri(()=>{if(!this.stateful)throw new dc("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new fc("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(t=>en([n,t])):[en([n,this.cell.stateSize])];else if(null==t)Ti(this.states_),null!=this.keptStates&&(Ti(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>en([n,t])):this.states_[0]=en([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new fc(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);!0===e?this.keptStates.push(this.states_.slice()):Ti(this.states_);for(let e=0;e<this.states_.length;++e){const s=t[e],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,i=[n,a];if(!r.arraysEqual(s.shape,i))throw new fc(`State ${e} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${s.shape}`);this.states_[e]=s}}this.states_=this.states_.map(t=>Di(t.clone()))})}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=em(t,n,r,this.numConstants);t=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){e.initialState=n,a=a.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new ad({shape:t.shape}));i=i.concat(this.stateSpec)}if(null!=r&&(e.constants=r,a=a.concat(r),this.numConstants=r.length),a[0]instanceof id){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return Ri(()=>{const n=null==e?null:e.mask,r=null==e?null:e.training;let s=null==e?null:e.initialState;t=Qh(t),null==s&&(s=this.stateful?this.states_:this.getInitialState(t));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new fc(`RNN Layer has ${a} state(s) but was passed `+s.length+" initial state(s).");this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=nm((t,e)=>{const n=this.cell.call([t].concat(e),i);return[n[0],n.slice(1)]},t,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=o[0],l=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?l:u;return this.returnState?[h].concat(c):h})}getInitialState(t){return Ri(()=>{let e=en(t.shape);return e=Ln(e,[1,2]),e=ch(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(t=>t>1?gh(e,[1,t]):e):this.cell.stateSize>1?[gh(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const e=this.cell.getConfig();t.cell={className:this.cell.getClassName(),config:e};const n=super.getConfig();return Object.assign(t,n),t}static fromConfig(t,e,n={}){const r=Sd(e.cell,n);return new t(Object.assign(e,{cell:r}))}}rm.className="RNN",l.registerClass(rm);class sm extends cd{}class am extends sm{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Dc(this.units,"units"),this.activation=Op(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Hh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Hh(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Hh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Wp(t.kernelRegularizer),this.recurrentRegularizer=Wp(t.recurrentRegularizer),this.biasRegularizer=Wp(t.biasRegularizer),this.kernelConstraint=Uc(t.kernelConstraint),this.recurrentConstraint=Uc(t.recurrentConstraint),this.biasConstraint=Uc(t.biasConstraint),this.dropout=ih([1,oh([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=ih([1,oh([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=td(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(t,e){return Ri(()=>{if(2!==(t=t).length)throw new fc(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const r=null!=e.training&&e.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=dm(()=>sn(t),this.dropout,r)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=dm(()=>sn(n),this.recurrentDropout,r));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=bh(null!=a?xn(t,a):t,this.kernel.read()),null!=this.bias&&(s=Ch(s,this.bias.read())),null!=i&&(n=xn(n,i));let o=Le(s,bh(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const t={units:this.units,activation:Fp(this.activation),useBias:this.useBias,kernelInitializer:qh(this.kernelInitializer),recurrentInitializer:qh(this.recurrentInitializer),biasInitializer:qh(this.biasInitializer),kernelRegularizer:Bp(this.kernelRegularizer),recurrentRegularizer:Bp(this.recurrentRegularizer),biasRegularizer:Bp(this.biasRegularizer),activityRegularizer:Bp(this.activityRegularizer),kernelConstraint:Wc(this.kernelConstraint),recurrentConstraint:Wc(this.recurrentConstraint),biasConstraint:Wc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return Object.assign(t,e),t}}am.className="SimpleRNNCell",l.registerClass(am);class im extends rm{constructor(t){t.cell=new am(t),super(t)}call(t,e){return Ri(()=>(null!=this.cell.dropoutMask&&(Ti(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ti(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(t,{mask:null==e?null:e.mask,training:null==e?null:e.training,initialState:null==e?null:e.initialState})))}get units(){return this.cell.units}get activation(){return this.cell.activation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}getConfig(){const t={units:this.units,activation:Fp(this.activation),useBias:this.useBias,kernelInitializer:qh(this.kernelInitializer),recurrentInitializer:qh(this.recurrentInitializer),biasInitializer:qh(this.biasInitializer),kernelRegularizer:Bp(this.kernelRegularizer),recurrentRegularizer:Bp(this.recurrentRegularizer),biasRegularizer:Bp(this.biasRegularizer),activityRegularizer:Bp(this.activityRegularizer),kernelConstraint:Wc(this.kernelConstraint),recurrentConstraint:Wc(this.recurrentConstraint),biasConstraint:Wc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return new t(e)}}im.className="SimpleRNN",l.registerClass(im);class om extends sm{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new fc("GRUCell does not support reset_after parameter set to true.");this.units=t.units,Dc(this.units,"units"),this.activation=Op(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Op(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Hh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Hh(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Hh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Wp(t.kernelRegularizer),this.recurrentRegularizer=Wp(t.recurrentRegularizer),this.biasRegularizer=Wp(t.biasRegularizer),this.kernelConstraint=Uc(t.kernelConstraint),this.recurrentConstraint=Uc(t.recurrentConstraint),this.biasConstraint=Uc(t.biasConstraint),this.dropout=ih([1,oh([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=ih([1,oh([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=td(t),this.kernel=this.addWeight("kernel",[t[t.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(t,e){return Ri(()=>{if(2!==(t=t).length)throw new fc("GRUCell expects 2 input Tensors (inputs, h, c), got "+t.length+".");const n=null!=e.training&&e.training;let r=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=dm(()=>sn(t),this.dropout,n,3)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=dm(()=>sn(r),this.recurrentDropout,n,3));const s=this.recurrentDropoutMask;let a,i,o;0<this.dropout&&this.dropout<1&&(t=xn(t,this.dropoutMask[0]));let u=bh(t,this.kernel.read());this.useBias&&(u=Ch(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=xn(r,s[0]));const l=this.recurrentKernel.read(),[c,h]=Ur(l,[2*this.units,this.units],l.rank-1),d=bh(r,c),[p,f,m]=Ur(u,3,u.rank-1),[g,y]=Ur(d,2,d.rank-1);a=this.recurrentActivation.apply(Le(p,g)),i=this.recurrentActivation.apply(Le(f,y));const b=bh(xn(i,r),h);o=this.activation.apply(Le(m,b));const x=Le(xn(a,r),xn(Le(1,ar(a)),o));return[x,x]})}getConfig(){const t={units:this.units,activation:Fp(this.activation),recurrentActivation:Fp(this.recurrentActivation),useBias:this.useBias,kernelInitializer:qh(this.kernelInitializer),recurrentInitializer:qh(this.recurrentInitializer),biasInitializer:qh(this.biasInitializer),kernelRegularizer:Bp(this.kernelRegularizer),recurrentRegularizer:Bp(this.recurrentRegularizer),biasRegularizer:Bp(this.biasRegularizer),activityRegularizer:Bp(this.activityRegularizer),kernelConstraint:Wc(this.kernelConstraint),recurrentConstraint:Wc(this.recurrentConstraint),biasConstraint:Wc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1},e=super.getConfig();return Object.assign(t,e),t}}om.className="GRUCell",l.registerClass(om);class um extends rm{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new om(t),super(t)}call(t,e){return Ri(()=>(null!=this.cell.dropoutMask&&(Ti(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ti(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(t,{mask:null==e?null:e.mask,training:null==e?null:e.training,initialState:null==e?null:e.initialState})))}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:Fp(this.activation),recurrentActivation:Fp(this.recurrentActivation),useBias:this.useBias,kernelInitializer:qh(this.kernelInitializer),recurrentInitializer:qh(this.recurrentInitializer),biasInitializer:qh(this.biasInitializer),kernelRegularizer:Bp(this.kernelRegularizer),recurrentRegularizer:Bp(this.recurrentRegularizer),biasRegularizer:Bp(this.biasRegularizer),activityRegularizer:Bp(this.activityRegularizer),kernelConstraint:Wc(this.kernelConstraint),recurrentConstraint:Wc(this.recurrentConstraint),biasConstraint:Wc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}um.className="GRU",l.registerClass(um);class lm extends sm{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Dc(this.units,"units"),this.activation=Op(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Op(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Hh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Hh(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Hh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=Wp(t.kernelRegularizer),this.recurrentRegularizer=Wp(t.recurrentRegularizer),this.biasRegularizer=Wp(t.biasRegularizer),this.kernelConstraint=Uc(t.kernelConstraint),this.recurrentConstraint=Uc(t.recurrentConstraint),this.biasConstraint=Uc(t.biasConstraint),this.dropout=ih([1,oh([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=ih([1,oh([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;let n;if(t=td(t),this.kernel=this.addWeight("kernel",[t[t.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,r=this.units;n=new((e=class extends $h{apply(e,n){const s=t.apply([r]),a=(new Ah).apply([r]),i=t.apply([2*r]);return mh(mh(s,a),i)}}).className="CustomInit",e)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return Ri(()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new fc("LSTMCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");let r=t[1];const s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=dm(()=>sn(t),this.dropout,n,4)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=dm(()=>sn(r),this.recurrentDropout,n,4));const a=this.recurrentDropoutMask;let i,o,u,l;0<this.dropout&&this.dropout<1&&(t=xn(t,this.dropoutMask[0]));let c=bh(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=xn(r,a[0])),c=Le(c,bh(r,this.recurrentKernel.read())),this.useBias&&(c=Ch(c,this.bias.read()));const[h,d,p,f]=Ur(c,4,c.rank-1);i=this.recurrentActivation.apply(h),o=this.recurrentActivation.apply(d),u=Le(xn(o,s),xn(i,this.activation.apply(p))),l=this.recurrentActivation.apply(f);const m=xn(l,this.activation.apply(u));return[m,m,u]})}getConfig(){const t={units:this.units,activation:Fp(this.activation),recurrentActivation:Fp(this.recurrentActivation),useBias:this.useBias,kernelInitializer:qh(this.kernelInitializer),recurrentInitializer:qh(this.recurrentInitializer),biasInitializer:qh(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Bp(this.kernelRegularizer),recurrentRegularizer:Bp(this.recurrentRegularizer),biasRegularizer:Bp(this.biasRegularizer),activityRegularizer:Bp(this.activityRegularizer),kernelConstraint:Wc(this.kernelConstraint),recurrentConstraint:Wc(this.recurrentConstraint),biasConstraint:Wc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return Object.assign(t,e),t}}lm.className="LSTMCell",l.registerClass(lm);class cm extends rm{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new lm(t),super(t)}call(t,e){return Ri(()=>(null!=this.cell.dropoutMask&&(Ti(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ti(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(t,{mask:null==e?null:e.mask,training:null==e?null:e.training,initialState:null==e?null:e.initialState})))}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get unitForgetBias(){return this.cell.unitForgetBias}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:Fp(this.activation),recurrentActivation:Fp(this.recurrentActivation),useBias:this.useBias,kernelInitializer:qh(this.kernelInitializer),recurrentInitializer:qh(this.recurrentInitializer),biasInitializer:qh(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Bp(this.kernelRegularizer),recurrentRegularizer:Bp(this.recurrentRegularizer),biasRegularizer:Bp(this.biasRegularizer),activityRegularizer:Bp(this.activityRegularizer),kernelConstraint:Wc(this.kernelConstraint),recurrentConstraint:Wc(this.recurrentConstraint),biasConstraint:Wc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}cm.className="LSTM",l.registerClass(cm);class hm extends sm{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return Ri(()=>{let n=(t=t).slice(1);const r=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?r.push(n.splice(0,t.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[t[0]].concat(n):[a[0]].concat(n),a=o.call(a,e),s.push(a.slice(1))}n=[];for(const t of s.slice().reverse())n.push(...t);return[a[0]].concat(n)})}build(t){let e;Jh(t)&&(t=t[0]),t=t,this.cells.forEach((n,r)=>{Qc("RNNCell_"+r,()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){const t=[];for(const r of this.cells)t.push({className:r.getClassName(),config:r.getConfig()});const e={cells:t},n=super.getConfig();return Object.assign(e,n),e}static fromConfig(t,e,n={}){const r=[];for(const s of e.cells)r.push(Sd(s,n));return new t({cells:r})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return rd(t)}setWeights(t){const e=[];for(const n of this.cells){const r=t.splice(n.weights.length);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],r[t]])}sd(e)}}function dm(t,e,n=null,r=1){function s(){return Sh(t(),e)}if(r>1){const e=[];for(let a=0;a<r;a++)e.push(Nh(s,t,n));return e.map(t=>Di(t.clone()))}return Di(Nh(s,t,n).clone())}hm.className="StackedRNNCells",l.registerClass(hm);class pm extends cd{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const r=Sd(e.layer,n);delete e.layer;const s={layer:r};return Object.assign(s,e),new t(s)}}class fm extends pm{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=td(t)).length<3)throw new fc("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(t));this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=td(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e);return[n[0],t[1]].concat(n.slice(1))}call(t,e){return Ri(()=>nm((t,n)=>[Qh(this.layer.call(t,e)),[]],t=Qh(t),[],!1,null,null,!1,!0)[1])}}fm.className="TimeDistributed",l.registerClass(fm);class mm extends pm{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=Sd(n),e.goBackwards=!0!==e.goBackwards;const r={};if(r.className=t.layer.getClassName(),r.config=e,this.backwardLayer=Sd(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,Rc(jc,"BidirectionalMergeMode",this.mergeMode),t.weights)throw new mc("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=Math.floor(t.length/2);this.forwardLayer.setWeights(t.slice(0,e)),this.backwardLayer.setWeights(t.slice(e))}computeOutputShape(t){let e,n,r,s=this.forwardLayer.computeOutputShape(t);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),e=s[0]):e=s[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):wc(n)}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=em(t,n,r,this.numConstants);if(t=s.inputs,n=s.initialState,r=s.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==r)return super.apply(t,e);const a=[],i=[];if(null!=n){const t=n.length;if(t%2>0)throw new fc("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,a.push(...n);const r=n.map(t=>new ad({shape:t.shape}));this.forwardLayer.stateSpec=r.slice(0,t/2),this.backwardLayer.stateSpec=r.slice(t/2),i.push(...r)}if(null!=r)throw new mc("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof id;for(const u of a)if(u instanceof id!==o)throw new fc("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return Ri(()=>{const n=e.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(t,Object.assign(e,{initialState:a})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=Jo(s,1)),"concat"===this.mergeMode?i=fh([r,s]):"sum"===this.mergeMode?i=Le(r,s):"ave"===this.mergeMode?i=xn(.5,Le(r,s)):"mul"===this.mergeMode?i=xn(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){Qc(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),Qc(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map(t=>null);return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=Sd(e.layer);if(delete e.layer,null!=e.numConstants)throw new mc("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=e;return r.layer=n,new t(r)}}var gm,ym;mm.className="Bidirectional",l.registerClass(mm),function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(gm||(gm={})),function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(ym||(ym={}));const bm=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],xm=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],wm=[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]}],vm=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]}],Cm=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],Sm=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Nm=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]}],Im=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],km=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],$m=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Em=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Am=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],Rm=[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Tm=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Dm=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Fm=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];function _m(t,e,n=""){r.assert(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(-1!==t[n]&&-1!==e[n]&&t[n]!==e[n])return!1;return!0}(t,e),()=>n+` Shapes ${t} and ${e} must match`)}class Om{constructor(t,e,n,r,s,a,i){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.id=Om.nextId++}get closed(){return this.closed_}clearAndClose(){this.tensors.forEach(t=>t.tensor.dispose()),this.tensors=[],this.closed_=!0}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(t=>this.read(t))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),_m(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n&&n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n&&n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((t,n)=>this.write(t,e[n]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return Ge([],[0].concat(this.elementShape));const n=this.readMany(t);return _m(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),fn(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return Ge([],[0].concat(this.elementShape));const e=[];for(let r=0;r<this.size();r++)e.push(r);const n=this.readMany(e);return _m(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),on(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,mn(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const r=t.map(t=>(n+=t,n));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:e.size/n,a=[];Ri(()=>{e=e.reshape([1,n,s]);for(let n=0;n<t.length;++n)a[n]=ua(e,[0,0===n?0:r[n-1],0],[1,t[n],s]).reshape(this.elementShape);return a});const i=[];for(let o=0;o<t.length;o++)i[o]=o;this.writeMany(i,a)}}function Mm(t){return null===t?null:zm(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}function zm(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof le))}function Lm(t){return t instanceof le?{value:t.clone(),recurse:!1}:zm(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}Om.nextId=0;class Bm{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n}}class Pm extends Bm{constructor(){super(Pm.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){const t=2*this.capacity,e=new Array(t),n=this.length();for(let r=0;r<n;r++)e[r]=this.get(this.wrap(this.begin+r));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}Pm.INITIAL_CAPACITY=32;class Wm{async toArray(){const t=[];let e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){const t=this.prefetch(100),e=[];let n=await t.next();for(;!n.done;)e.push(n.value),n=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),n=t(e.value);for(;!e.done&&n;)e=await this.next(),n=t(e.value)}handleErrors(t){return new Ym(this,t)}filter(t){return new Km(this,t)}map(t){return new Xm(this,t)}mapAsync(t){return new Jm(this,t)}serialMapAsync(t){return new Jm(this,t).serial()}flatmap(t){return new Qm(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile(t=>!0===t)}rowMajorBatch(t,e=!0){return new jm(this,t,e)}columnMajorBatch(t,e=!0,n=Mm){return this.rowMajorBatch(t,e).map(t=>function(t,e=Mm){return function t(e,n,r=new Set){const s=e[0];if(r.has(s))throw new Error("Circular references are not supported.");const a=n(e);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(zm(s)){const a=Array.isArray(s)?[]:{};r.add(s);for(const i in s){const s=t(e.map(t=>t[i]),n,r);a[i]=s}return r.delete(s),a}throw new Error("Can't recurse into non-iterable type: "+s)}return a.value}(t,e)}(t,n))}concatenate(t,e){return new tg(new Vm([this,t]),e)}take(t){return t<0||null==t?this:new Hm(this,t)}skip(t){return t<0||null==t?this:new qm(this,t)}prefetch(t){return new ng(this,t)}shuffle(t,e){return new rg(this,t,e)}serial(){return new Gm(this)}}class Vm extends Wm{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const t=this.items[this.trav];return this.trav++,{value:(e=t,function t(e,n,r=new Map,s=new Set){if(null==e)return null;if(s.has(e))throw new Error("Circular references are not supported.");if(r.has(e))return r.get(e);const a=n(e);if(a.recurse&&null!==a.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(a.recurse){if(zm(e)){const a=Array.isArray(e)?[]:{};s.add(e);for(const i in e){const o=t(e[i],n,r,s);a[i]=o}return s.delete(e),a}throw new Error("Can't recurse into non-iterable type: "+e)}return r.set(e,a.value),a.value}(e,Lm)),done:!1};var e}}class Um extends Wm{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message="Error thrown while iterating through a dataset: "+t.message,t}}}class Gm extends Wm{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Serial"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class qm extends Wm{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Skip"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;Ti(t.value)}return this.upstream.next()}}class Hm extends Wm{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return this.upstream.summary()+" -> Take"}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class jm extends Wm{constructor(t,e,n=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> RowMajorBatch"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const t=[];for(;t.length<this.batchSize;){const e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}}class Km extends Wm{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Filter"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;Ti(t.value)}}}class Xm extends Wm{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Map"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=s.getTensorsInContainer(t.value),n=this.transform(t.value),r=s.getTensorsInContainer(n);for(const a of e)s.isTensorInList(a,r)||a.dispose();return{value:n,done:!1}}}class Ym extends Wm{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> handleErrors"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}}class Jm extends Wm{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> AsyncMap"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=s.getTensorsInContainer(t.value),n=await this.transform(t.value),r=s.getTensorsInContainer(n);for(const a of e)s.isTensorInList(a,r)||a.dispose();return{value:n,done:!1}}}class Zm extends Wm{constructor(){super(),this.outputQueue=new Pm,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!(await this.pump()))return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Qm extends Zm{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Flatmap"}async pump(){const t=await this.upstream.next();if(t.done)return!1;const e=s.getTensorsInContainer(t.value),n=this.transform(t.value),r=s.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const a of e)s.isTensorInList(a,r)||a.dispose();return!0}}class tg extends Wm{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,null==this.iterator){const t=await this.moreIterators.next();if(t.done)return{value:null,done:!0};this.iterator=t.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}}var eg;!function(t){t[t.FAIL=0]="FAIL",t[t.SHORTEST=1]="SHORTEST",t[t.LONGEST=2]="LONGEST"}(eg||(eg={}));class ng extends Wm{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new Bm(e)}summary(){return this.upstream.summary()+" -> Prefetch"}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class rg extends ng{constructor(t,e,n){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=Eo.alea(n||r.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(!e.done)return this.refill(),e;this.upstreamExhausted=!0}return{value:null,done:!0}}}class sg{constructor(){this.size=null}batch(t,e=!0){const n=this;let s;return r.assert(t>0,()=>"batchSize needs to be positive, but it is\n      "+t),s=this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t),ag(async()=>(await n.iterator()).columnMajorBatch(t,e,ig),s)}concatenate(t){const e=this;let n;return n=this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null,ag(async()=>(await e.iterator()).concatenate(await t.iterator()),n)}filter(t){const e=this;let n;return n=this.size===1/0?1/0:null,ag(async()=>(await e.iterator()).filter(e=>Ri(()=>t(e))),n)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){const e=this;return ag(async()=>(await e.iterator()).map(e=>Ri(()=>t(e))),this.size)}mapAsync(t){const e=this;return ag(async()=>(await e.iterator()).mapAsync(t),this.size)}prefetch(t){if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const e=this;return ag(async()=>(await e.iterator()).prefetch(t),this.size)}repeat(t){const e=this;let n;return n=null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null,ag(async()=>{return n=(r=async()=>({value:await e.iterator(),done:!1}),new Um(r)).take(t),new tg(n,void 0);var n,r},n)}skip(t){const e=this;let n;return n=null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null,ag(async()=>(await e.iterator()).skip(t),n)}shuffle(t,e,n=!0){if(null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,a=Eo.alea(e||r.now().toString());return ag(async()=>{let e=a.int32();return n&&(e+=a.int32()),(await s.iterator()).shuffle(t,e.toString())},this.size)}take(t){const e=this;let n;return n=null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null,ag(async()=>(await e.iterator()).take(t),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function ag(t,e=null){return new class extends sg{constructor(){super(...arguments),this.size=e}async iterator(){return t()}}}function ig(t){return null===t?null:null==(e=t[0])||null===(n=e)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(e)||"object"==typeof e&&e instanceof le||r.isTypedArray(e)?{value:function(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof le?fn(t):Ge(t)}(t),recurse:!1}:{value:null,recurse:!0};var e,n}function og(t,e,n,s){const a=r.getTypedArrayFromDType(s,r.sizeFromShape(n));for(let r=0;r<a.length;++r){const n=r*e;let s=t[n];for(let r=0;r<e;++r){const e=t[n+r];e>s&&(s=e)}a[r]=s}return a}function ug(t,e,n,s,a){const i=e.length,o=r.sizeFromShape(e),u=r.computeStrides(e),l=r.computeStrides(a),c=r.getTypedArrayFromDType(n,r.sizeFromShape(a));for(let h=0;h<o;++h){const e=r.indexToLoc(h,i,u),n=new Array(e.length);for(let t=0;t<n.length;t++)n[t]=e[s[t]];c[r.locToIndex(n,i,l)]=t[h]}return c}function lg(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&r.assert("complex64"!==t.dtype,()=>e+" does not support complex64 tensors in the CPU backend.")})}function cg(t,e,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,u=s.dilationHeight,l=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,d=s.padInfo.top,p=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=un(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let w=0;w<s.batchSize;++w){const e=w*y,n=w*r[0];for(let m=0;m<s.inChannels;++m)for(let y=0;y<s.outHeight;++y){const w=y*i-d,v=Math.max(0,w),C=Math.min(s.inHeight,c+w),S=e+y*b;for(let e=0;e<s.outWidth;++e){const i=e*o-p,c=Math.max(0,i),d=Math.min(s.inWidth,h+i);let y=f,b=0,w=0;for(let e=v;e<C;e+=u){const s=n+e*r[1];for(let e=c;e<d;e+=l){const n=t[s+e*r[2]+m];"max"===a&&n>y?y=n:"avg"===a&&(b+=n,w++)}if(isNaN(y))break}g[S+e*x+m]="avg"===a?b/w:y}}}return m}function hg(t,e,n,r,s=!1,a=!1){const i=un(r.outShape,"int32"),o=r.strideHeight,u=r.strideWidth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=r.padInfo.top,f=r.padInfo.left,m=un(e,n,t);for(let g=0;g<r.batchSize;++g)for(let t=0;t<r.inChannels;++t)for(let e=0;e<r.outHeight;++e){const n=e*o-p;let y=n;for(;y<0;)y+=l;const b=Math.min(r.inHeight,h+n);for(let o=0;o<r.outWidth;++o){const h=o*u-f;let p=h;for(;p<0;)p+=c;const x=Math.min(r.inWidth,d+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let e=y;e<b;e+=l){const i=e-n;for(let n=p;n<x;n+=c){const o=n-h,u=m.get(g,e,n,t);u>w&&(w=u,v=s?a?((g*r.inHeight+e)*r.inWidth+n)*r.inChannels+t:(e*r.inWidth+n)*r.inChannels+t:i*d+o)}}i.set(v,g,e,o,t)}}return i}sg.MAX_BUFFER_SIZE=1e4,Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const dg=x.nonMaxSuppressionV3,pg=x.split,fg=x.tile,mg=x.topkImpl,gg=x.whereImpl;function yg(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,r);throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}class bg extends uc{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new oc(this,Ei())}write(t,e,n){this.firstUse&&(this.firstUse=!1,j().get("IS_NODE")&&b.warn("\n============================\nHi there \u{1f44b}. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={};return this.data.set(r,{values:t,dtype:n}),r}move(t,e,n,r){this.data.set(t,{values:e,dtype:r})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensors:n}=this.data.get(t);if("complex64"===e){const t=this.readSync(n.real.dataId),e=this.readSync(n.imag.dataId);return b.mergeRealAndImagArrays(t,e)}return this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map(t=>r.decodeString(t))}catch(s){throw new Error("Failed to decode encoded string bytes into utf-8")}return un(t.shape,t.dtype,n)}makeOutput(t,e,n){const r=this.write(t,e,n);return Ei().makeTensorFromDataId(r,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensors:e}=this.data.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}}async time(t){const e=r.now();return t(),{kernelMs:r.now()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}complex(t,e){const n=this.makeOutput(null,t.shape,"complex64");return this.data.get(n.dataId).complexTensors={real:Ei().keep(t.clone()),imag:Ei().keep(e.clone())},n}real(t){return this.data.get(t.dataId).complexTensors.real.clone()}imag(t){return this.data.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){if(lg(t,"slice"),i.isSliceContinous(t.shape,e,n)){const s=i.computeFlatOffset(e,t.strides),a=r.sizeFromShape(n);return Ge(this.readSync(t.dataId).subarray(s,s+a),n,t.dtype)}const s=un(n,t.dtype),a=this.bufferSync(t);for(let r=0;r<s.size;++r){const t=s.indexToLoc(r).map((t,n)=>t+e[n]);s.values[r]=a.get(...t)}return s.toTensor()}stridedSlice(t,e,n,r){lg(t,"stridedSlice");const s=i.computeOutShape(e,n,r);if(s.some(t=>0===t))return Ge([],s);const a=un(s,t.dtype),o=this.bufferSync(t);for(let i=0;i<a.size;i++){const t=a.indexToLoc(i),n=new Array(t.length);for(let s=0;s<n.length;s++)n[s]=t[s]*r[s]+e[s];a.set(o.get(...n),...t)}return a.toTensor()}diag(t){const e=this.readSync(t.dataId),n=un([t.size,t.size],t.dtype),r=n.values;for(let s=0;s<e.length;s++)r[s*t.size+s]=e[s];return n.toTensor()}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let u=0;u<t.rank;u++)u!==e&&(r[s++]=t.shape[u]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let u=0;u<o.length;u++)a[e]=u,o[u]=this.slice(t,a,i).reshape(r);return o}reverse(t,e){lg(t,"reverse");const n=un(t.shape,t.dtype),r=this.bufferSync(t);for(let s=0;s<n.size;s++){const a=n.indexToLoc(s),i=a.slice();e.forEach(e=>i[e]=t.shape[e]-1-i[e]),n.set(r.get(...i),...a)}return n.toTensor()}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>Ue(t)),r=t.map(t=>Ve(t));return We(this.concat(n,e),this.concat(r,e))}const n=t.map(t=>{const n=r.sizeFromShape(t.shape.slice(e));return t.as2D(-1,n)}),s=b.computeOutShape(n.map(t=>t.shape),1),a=un(s,t[0].dtype).values;if(1===n[0].shape[0]){let t=0;n.forEach(e=>{a.set(this.readSync(e.dataId),t),t+=e.size})}else{let t=0;n.forEach(e=>{const n=this.readSync(e.dataId);let r=0;for(let i=0;i<e.shape[0];++i){const o=i*s[1]+t;for(let t=0;t<e.shape[1];++t)a[o+t]=n[r++]}t+=e.shape[1]})}const i=b.computeOutShape(t.map(t=>t.shape),e);return Ge(a,i,t[0].dtype)}neg(t){return lg(t,"neg"),this.multiply(He(-1),t)}add(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t+n,imag:e+r})):this.broadcastedBinaryOp(t,e,ye(t.dtype,e.dtype),(t,e)=>t+e)}addN(t){lg(t,"addN");const e=t.map(t=>this.readSync(t.dataId)),n=un(t[0].shape,t[0].dtype),r=n.values;for(let s=0;s<t.length;s++){const t=e[s];for(let e=0;e<r.length;e++)r[e]+=t[e]}return n.toTensor()}softmax(t,e){const n=r.parseAxisParam([e],t.shape),s=ho(t,n),a=b.expandShapeToKeepDim(s.shape,n),i=this.subtract(t,s.reshape(a)),o=this.exp(i),u=this.sum(o,n).reshape(a);return bn(o,u)}subtract(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t-n,imag:e-r})):this.broadcastedBinaryOp(t,e,ye(t.dtype,e.dtype),(t,e)=>t-e)}pow(t,e){return lg([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.pow(t,e))}batchMatMul(t,e,n,r){lg([t,e],"matMul");const s=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],o=t.shape[0],u=this.readSync(t.dataId),l=this.readSync(e.dataId),[c,h,d]=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],[p,f,m]=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],g=a*i,y=un([o,a,i],t.dtype),b=y.values,x=this.blockSize;for(let w=0;w<o;w++)for(let t=0;t<a;t+=x)for(let e=0;e<i;e+=x)for(let n=0;n<s;n+=x){const r=Math.min(t+x,a),o=Math.min(e+x,i),y=Math.min(n+x,s);for(let s=t;s<r;s++)for(let t=e;t<o;t++){let e=0;for(let r=n;r<y;r++)e+=u[w*c+s*h+r*d]*l[r*p+t*f+w*m];b[w*g+(s*i+t)]+=e}}return y.toTensor()}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){let o=this.batchMatMul(t,e,n,r);return s&&(o=this.add(o,s)),a&&(o=yg(this,o,a,i)),o}multiply(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t*n-e*r,imag:t*r+e*n})):this.broadcastedBinaryOp(t,e,ye(t.dtype,e.dtype),(t,e)=>t*e)}floorDiv(t,e){return lg([t,e],"floorDiv"),this.broadcastedBinaryOp(t,e,"int32",(t,e)=>Math.floor(t/e))}sum(t,e){lg(t,"sum"),b.assertAxesAreInnerMostDims("sum",e,t.rank);const[n,s]=b.computeOutAndReduceShapes(t.shape,e),a=en(n,ye(t.dtype,"int32")),i=r.sizeFromShape(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let r=0;r<o.length;++r){const t=r*i;let e=0;for(let n=0;n<i;++n)e+=u[t+n];o[r]=e}return a}prod(t,e){lg(t,"sum");const[n,s]=b.computeOutAndReduceShapes(t.shape,e),a=en(n,ye(t.dtype,"int32")),i=r.sizeFromShape(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let r=0;r<o.length;++r){const t=r*i;let e=1;for(let n=0;n<i;++n)e*=u[t+n];o[r]=e}return a}unsortedSegmentSum(t,e,n){lg(t,"unsortedSegmentSum");const r=[],s=t.rank-e.rank;for(let a=0;a<s;++a)e=e.expandDims(a+1);for(let a=0;a<n;++a){const n=He(a,"int32"),s=ao(n,e).asType("float32").mul(t).sum(0);r.push(s)}return fn(r)}argMin(t,e){lg(t,"argMin");const n=[e];b.assertAxesAreInnerMostDims("argMin",n,t.rank);const[s,a]=b.computeOutAndReduceShapes(t.shape,n),i=en(s,"int32"),o=r.sizeFromShape(a),u=this.readSync(i.dataId),l=this.readSync(t.dataId);for(let r=0;r<u.length;++r){const t=r*o;let e=l[t],n=0;for(let r=0;r<o;++r){const s=l[t+r];s<e&&(e=s,n=r)}u[r]=n}return i}argMax(t,e){lg(t,"argMax");const n=[e];b.assertAxesAreInnerMostDims("argMax",n,t.rank);const[s,a]=b.computeOutAndReduceShapes(t.shape,n),i=en(s,"int32"),o=r.sizeFromShape(a),u=this.readSync(i.dataId),l=this.readSync(t.dataId);for(let r=0;r<u.length;++r){const t=r*o;let e=l[t],n=0;for(let r=0;r<o;++r){const s=l[t+r];s>e&&(e=s,n=r)}u[r]=n}return i}cumsum(t,e,n,r){if(lg(t,"cumsum"),e!==t.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=ye(t.dtype,"int32"),a=en(t.shape,s),i=this.readSync(a.dataId),o=this.readSync(t.dataId),u=t.shape[t.rank-1],l=r?(t,e)=>t+u-e-1:(t,e)=>t+e;for(let c=0;c<o.length;c+=u)for(let t=0;t<u;t++){const e=l(c,t);if(0===t)i[e]=n?0:o[e];else{const r=l(c,t-1);i[e]=n?o[r]+i[r]:o[e]+i[r]}}return a}equal(t,e){return lg([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t===e?1:0)}notEqual(t,e){return lg([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t!==e?1:0)}less(t,e){return lg([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<e?1:0)}lessEqual(t,e){return lg([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<=e?1:0)}greater(t,e){return lg([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>e?1:0)}greaterEqual(t,e){return lg([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>=e?1:0)}logicalNot(t){lg(t,"logicalNot");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let r=0;r<e.length;++r)n[r]=e[r]?0:1;return this.makeOutput(n,t.shape,"bool")}logicalAnd(t,e){return lg([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t&&e)}logicalOr(t,e){return lg([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t||e)}select(t,e,n){lg([t,e,n],"select");const s=this.readSync(t.dataId),a=this.readSync(e.dataId),i=this.readSync(n.dataId),o=en(e.shape,ye(e.dtype,n.dtype)),u=this.readSync(o.dataId);let l=0;const c=0===t.rank||t.rank>1||1===e.rank?1:r.sizeFromShape(e.shape.slice(1));for(let r=0;r<s.length;r++)for(let t=0;t<c;t++)u[l++]=1===s[r]?a[r]:i[r];return o}where(t){lg([t],"where");const e=this.readSync(t.dataId);return gg(t.shape,e)}topk(t,e,n){lg(t,"topk");const r=this.readSync(t.dataId);return mg(r,t.shape,t.dtype,e,n)}min(t,e){lg(t,"min"),b.assertAxesAreInnerMostDims("min",e,t.rank);const[n,s]=b.computeOutAndReduceShapes(t.shape,e),a=en(n,t.dtype),i=r.sizeFromShape(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let r=0;r<o.length;++r){const t=r*i;let e=u[t];for(let n=0;n<i;++n){const r=u[t+n];r<e&&(e=r)}o[r]=e}return a}minimum(t,e){return lg([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.min(t,e))}mod(t,e){return lg([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})}maximum(t,e){return lg([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.max(t,e))}all(t,e){lg(t,"all"),b.assertAxesAreInnerMostDims("all",e,t.rank);const[n,s]=b.computeOutAndReduceShapes(t.shape,e),a=en(n,t.dtype),i=r.sizeFromShape(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let r=0;r<o.length;++r){const t=r*i;let e=u[t];for(let n=0;n<i;++n){const r=u[t+n];e=e&&r}o[r]=e}return a}any(t,e){lg(t,"any"),b.assertAxesAreInnerMostDims("any",e,t.rank);const[n,s]=b.computeOutAndReduceShapes(t.shape,e),a=en(n,t.dtype),i=r.sizeFromShape(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let r=0;r<o.length;++r){const t=r*i;let e=u[t];for(let n=0;n<i;++n){const r=u[t+n];e=e||r}o[r]=e}return a}squaredDifference(t,e){return lg([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t-e;return n*n})}ceil(t){lg(t,"ceil");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let r=0;r<e.length;++r)n[r]=Math.ceil(e[r]);return this.makeOutput(n,t.shape,"float32")}floor(t){lg(t,"floor");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let r=0;r<e.length;++r)n[r]=Math.floor(e[r]);return this.makeOutput(n,t.shape,"float32")}sign(t){lg(t,"x");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let r=0;r<e.length;++r)n[r]=e[r]<0?-1:e[r]>0?1:0;return this.makeOutput(n,t.shape,"float32")}isNaN(t){lg(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let r=0;r<e.length;++r)Number.isNaN(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")}isInf(t){lg(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let r=0;r<e.length;++r)Math.abs(e[r])===1/0&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")}isFinite(t){lg(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let r=0;r<e.length;++r)Number.isFinite(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")}round(t){lg(t,"round");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let r=0;r<e.length;++r){const t=Math.floor(e[r]);n[r]=e[r]-t<.5?Math.floor(e[r]):e[r]-t>.5?Math.ceil(e[r]):t%2==0?t:t+1}return this.makeOutput(n,t.shape,"float32")}exp(t){lg(t,"exp");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let r=0;r<e.length;++r)n[r]=Math.exp(e[r]);return this.makeOutput(n,t.shape,"float32")}expm1(t){lg(t,"expm1");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let r=0;r<e.length;++r)n[r]=Math.expm1(e[r]);return this.makeOutput(n,t.shape,"float32")}log(t){lg(t,"log");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let r=0;r<e.length;++r)n[r]=Math.log(e[r]);return this.makeOutput(n,t.shape,"float32")}log1p(t){lg(t,"log1p");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let r=0;r<e.length;++r)n[r]=Math.log1p(e[r]);return this.makeOutput(n,t.shape,"float32")}sqrt(t){lg(t,"sqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let r=0;r<e.length;++r)n[r]=Math.sqrt(e[r]);return this.makeOutput(n,t.shape,"float32")}rsqrt(t){lg(t,"rsqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let r=0;r<e.length;++r)n[r]=1/Math.sqrt(e[r]);return this.makeOutput(n,t.shape,"float32")}reciprocal(t){lg(t,"reciprocal");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let r=0;r<e.length;++r)n[r]=1/e[r];return this.makeOutput(n,t.shape,"float32")}linear(t){return t}relu(t){lg(t,"relu");const e=en(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let s=0;s<r.length;++s)n[s]=Math.max(0,r[s]);return e}relu6(t){lg(t,"relu");const e=en(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let s=0;s<r.length;++s)n[s]=Math.min(Math.max(0,r[s]),6);return e}prelu(t,e){return lg([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>t<0?e*t:t)}elu(t){lg(t,"elu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r){const t=n[r];e[r]=t>=0?t:Math.exp(t)-1}return this.makeOutput(e,t.shape,"float32")}eluDer(t,e){lg([t,e],"eluDer");const n=new Float32Array(e.size),r=this.readSync(e.dataId),s=this.readSync(t.dataId);for(let a=0;a<r.length;++a){const t=r[a];n[a]=t>=1?s[a]:s[a]*(t+1)}return this.makeOutput(n,e.shape,"float32")}selu(t){lg(t,"selu");const e=b.SELU_SCALEALPHA,n=b.SELU_SCALE,r=new Float32Array(t.size),s=this.readSync(t.dataId);for(let a=0;a<s.length;++a){const t=s[a];r[a]=t>=0?n*t:e*(Math.exp(t)-1)}return this.makeOutput(r,t.shape,"float32")}clip(t,e,n){lg(t,"clip");const r=new Float32Array(t.size),s=this.readSync(t.dataId);for(let a=0;a<s.length;++a){const t=s[a];r[a]=t>n?n:t<e?e:t}return this.makeOutput(r,t.shape,"float32")}abs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r)e[r]=Math.abs(n[r]);return this.makeOutput(e,t.shape,"float32")}complexAbs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<t.size;++r)e[r]=Math.hypot(n[2*r],n[2*r+1]);return this.makeOutput(e,t.shape,"float32")}int(t){lg(t,"int");const e=new Int32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r)e[r]=n[r];return this.makeOutput(e,t.shape,"int32")}sigmoid(t){lg(t,"sigmoid");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r)e[r]=1/(1+Math.exp(-n[r]));return this.makeOutput(e,t.shape,"float32")}softplus(t){lg(t,"softplus");const e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let s=0;s<r.length;++s){const t=r[s]>-e,a=r[s]<e,i=Math.exp(r[s]);let o;o=a?i:t?r[s]:Math.log(1+i),n[s]=o}return this.makeOutput(n,t.shape,"float32")}sin(t){lg(t,"sin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r)e[r]=Math.sin(n[r]);return this.makeOutput(e,t.shape,"float32")}cos(t){lg(t,"cos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r)e[r]=Math.cos(n[r]);return this.makeOutput(e,t.shape,"float32")}tan(t){lg(t,"tan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r)e[r]=Math.tan(n[r]);return this.makeOutput(e,t.shape,"float32")}asin(t){lg(t,"asin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r)e[r]=Math.asin(n[r]);return this.makeOutput(e,t.shape,"float32")}acos(t){lg(t,"acos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r)e[r]=Math.acos(n[r]);return this.makeOutput(e,t.shape,"float32")}atan(t){lg(t,"atan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r)e[r]=Math.atan(n[r]);return this.makeOutput(e,t.shape,"float32")}atan2(t,e){return lg([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.atan2(t,e))}sinh(t){lg(t,"sinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r)e[r]=Math.sinh(n[r]);return this.makeOutput(e,t.shape,"float32")}cosh(t){lg(t,"cosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r)e[r]=Math.cosh(n[r]);return this.makeOutput(e,t.shape,"float32")}tanh(t){lg(t,"tanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let s=0;s<n.length;++s)e[s]=r.tanh(n[s]);return this.makeOutput(e,t.shape,"float32")}asinh(t){lg(t,"asinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r)e[r]=Math.asinh(n[r]);return this.makeOutput(e,t.shape,"float32")}acosh(t){lg(t,"acosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r)e[r]=Math.acosh(n[r]);return this.makeOutput(e,t.shape,"float32")}atanh(t){lg(t,"atanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<n.length;++r)e[r]=Math.atanh(n[r]);return this.makeOutput(e,t.shape,"float32")}erf(t){lg(t,"erf");const e=new Float32Array(t.size),n=this.readSync(t.dataId),r=b.ERF_P,s=b.ERF_A1,a=b.ERF_A2,i=b.ERF_A3,o=b.ERF_A4,u=b.ERF_A5;for(let l=0;l<n.length;++l){const t=Math.sign(n[l]),c=Math.abs(n[l]),h=1/(1+r*c);e[l]=t*(1-((((u*h+o)*h+i)*h+a)*h+s)*h*Math.exp(-c*c))}return this.makeOutput(e,t.shape,"float32")}step(t,e=0){lg(t,"step");const n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let s=0;s<r.length;++s){const t=r[s];n[s]=isNaN(t)?NaN:t>0?1:e}return this.makeOutput(n,t.shape,"float32")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.conv2d(t,e,n);return r&&(i=this.add(i,r)),s&&(i=yg(this,i,s,a)),i}conv2d(t,e,n){lg([t,e],"conv2d");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,u=n.padInfo.top,l="channelsLast"===n.dataFormat,c=un(n.outShape,t.dtype),h=t.strides[0],d=l?t.strides[1]:t.strides[2],p=l?t.strides[2]:1,f=l?1:t.strides[1],m=c.strides[0],g=l?c.strides[1]:c.strides[2],y=l?c.strides[2]:1,b=l?1:c.strides[1],x=this.readSync(t.dataId),w=this.readSync(e.dataId),v=c.values;for(let C=0;C<n.batchSize;++C){const t=C*h,l=C*m;for(let c=0;c<n.outHeight;++c){const h=l+c*g,m=c*n.strideHeight-u;for(let u=0;u<r;u++){const r=m+u*a;if(r<0||r>=n.inHeight)continue;const l=u*e.strides[0],c=t+r*d;for(let t=0;t<n.outWidth;++t){const r=h+t*y,a=t*n.strideWidth-o;for(let t=0;t<s;t++){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=c+s*p;let u=l+t*e.strides[1];for(let t=0;t<n.inChannels;++t){const e=x[o+t*f];for(let t=0;t<n.outChannels;++t)v[r+t*b]+=e*w[u+t];u+=n.outChannels}}}}}}return c.toTensor()}conv3d(t,e,n){const r=n.filterDepth,s=n.filterHeight,a=n.filterWidth,i=n.dilationDepth,o=n.dilationHeight,u=n.dilationWidth,l=n.padInfo.front,c=n.padInfo.left,h=n.padInfo.top,d=un(n.outShape,t.dtype),p=this.readSync(t.dataId),f=this.readSync(e.dataId),m=d.values;for(let g=0;g<n.batchSize;++g){const y=g*t.strides[0],b=g*d.strides[0];for(let g=0;g<n.outDepth;++g){const x=b+g*d.strides[1],w=g*n.strideDepth-l;for(let l=0;l<r;l++){const r=w+l*i;if(r<0||r>=n.inDepth)continue;const g=l*e.strides[0],b=y+r*t.strides[1];for(let i=0;i<n.outHeight;++i){const r=x+i*d.strides[2],l=i*n.strideHeight-h;for(let i=0;i<s;i++){const s=l+i*o;if(s<0||s>=n.inHeight)continue;const h=g+i*e.strides[1],d=b+s*t.strides[2];for(let t=0;t<n.outWidth;++t){const s=r+t*n.outChannels,i=t*n.strideWidth-c;for(let t=0;t<a;t++){const r=i+t*u;if(r<0||r>=n.inWidth)continue;const a=d+r*n.inChannels;let o=h+t*e.strides[2];for(let t=0;t<n.inChannels;++t){const e=p[a+t];for(let t=0;t<n.outChannels;++t)m[s+t]+=e*f[o+t];o+=n.outChannels}}}}}}}}return d.toTensor()}conv2dDerInput(t,e,n){lg([t,e],"conv2dDerInput");const r=un(n.inShape,"float32"),s=r.values,a=this.readSync(t.dataId),i=this.readSync(e.dataId),[o,u,l]=e.strides,{batchSize:c,filterHeight:h,filterWidth:d,inChannels:p,inHeight:f,inWidth:m,outChannels:g,outHeight:y,outWidth:b,strideHeight:x,strideWidth:w,dataFormat:v}=n,C=h-1-n.padInfo.top,S=d-1-n.padInfo.left,N="channelsLast"===v,I=r.strides[0],k=N?r.strides[1]:r.strides[2],$=N?r.strides[2]:1,E=N?1:r.strides[1],A=t.strides[0],R=N?t.strides[1]:t.strides[2],T=N?t.strides[2]:1,D=N?1:t.strides[1];for(let F=0;F<c;++F)for(let t=0;t<p;++t)for(let e=0;e<f;++e){const n=e-C,r=Math.max(0,Math.ceil(n/x)),c=Math.min(y,(h+n)/x);for(let p=0;p<m;++p){const f=p-S,m=Math.max(0,Math.ceil(f/w)),y=Math.min(b,(d+f)/w);let v=0;for(let e=r;e<c;++e){const r=e*x-n;for(let n=m;n<y;++n){const s=A*F+R*e+T*n,c=o*(h-1-r)+u*(d-1-(n*w-f))+l*t;for(let t=0;t<g;++t)v+=a[s+D*t]*i[c+t]}}s[I*F+k*e+$*p+E*t]=v}}return r.toTensor()}conv3dDerInput(t,e,n){const r=un(n.inShape,"float32"),s=r.values,[a,i,o,u]=r.strides,l=this.readSync(t.dataId),[c,h,d,p]=t.strides,f=this.readSync(e.dataId),[m,g,y,b]=e.strides,{batchSize:x,filterDepth:w,filterHeight:v,filterWidth:C,inChannels:S,inDepth:N,inHeight:I,inWidth:k,outChannels:$,outDepth:E,outHeight:A,outWidth:R,strideDepth:T,strideHeight:D,strideWidth:F}=n,_=w-1-n.padInfo.front,O=v-1-n.padInfo.top,M=C-1-n.padInfo.left;for(let z=0;z<x;++z)for(let t=0;t<S;++t)for(let e=0;e<N;++e){const n=e-_,r=Math.max(0,Math.ceil(n/T)),x=Math.min(E,(w+n)/T);for(let S=0;S<I;++S){const N=S-O,I=Math.max(0,Math.ceil(N/D)),E=Math.min(A,(v+N)/D);for(let A=0;A<k;++A){const k=A-M,_=Math.max(0,Math.ceil(k/F)),O=Math.min(R,(C+k)/F);let L=0;for(let e=r;e<x;++e){const r=e*T-n;for(let n=I;n<E;++n){const s=n*D-N;for(let a=_;a<O;++a){const i=c*z+h*e+d*n+p*a,o=m*(w-1-r)+g*(v-1-s)+y*(C-1-(a*F-k))+b*t;for(let t=0;t<$;++t)L+=l[i+t]*f[o+t]}}}s[a*z+i*e+o*S+u*A+t]=L}}}return r.toTensor()}conv2dDerFilter(t,e,n){lg([t,e],"conv2dDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o="channelsLast"===n.dataFormat,u=un(n.filterShape,"float32"),l=n.padInfo.left,c=n.padInfo.top,h=this.bufferSync(t),d=this.bufferSync(e);for(let p=0;p<a;++p){const t=Math.max(0,Math.ceil((c-p)/r)),e=Math.min(n.outHeight,(n.inHeight+c-p)/r);for(let a=0;a<i;++a){const i=Math.max(0,Math.ceil((l-a)/s)),f=Math.min(n.outWidth,(n.inWidth+l-a)/s);for(let m=0;m<n.inChannels;++m)for(let g=0;g<n.outChannels;++g){let y=0;for(let u=0;u<n.batchSize;++u)for(let n=t;n<e;++n){const t=p+n*r-c;for(let e=i;e<f;++e){const r=a+e*s-l;y+=o?h.get(u,t,r,m)*d.get(u,n,e,g):h.get(u,m,t,r)*d.get(u,g,n,e)}}u.set(y,p,a,m,g)}}}return u.toTensor()}conv3dDerFilter(t,e,n){const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,u=n.filterWidth,l=un(n.filterShape,"float32"),c=l.values,[h,d,p,f]=l.strides,m=this.readSync(e.dataId),[g,y,b,x]=e.strides,w=this.readSync(t.dataId),[v,C,S,N]=t.strides,I=n.padInfo.front,k=n.padInfo.left,$=n.padInfo.top;for(let E=0;E<i;++E){const t=Math.max(0,Math.ceil((I-E)/r)),e=Math.min(n.outDepth,(n.inDepth+I-E)/r),i=E*h;for(let l=0;l<o;++l){const o=Math.max(0,Math.ceil(($-l)/s)),h=Math.min(n.outHeight,(n.inHeight+$-l)/s),A=l*d+i;for(let i=0;i<u;++i){const u=Math.max(0,Math.ceil((k-i)/a)),d=Math.min(n.outWidth,(n.inWidth+k-i)/a),R=i*p+A;for(let p=0;p<n.inChannels;++p){const A=p*f+R;for(let f=0;f<n.outChannels;++f){let R=0;for(let c=0;c<n.batchSize;++c){const n=c*v,A=c*g;for(let c=t;c<e;++c){const t=(E+c*r-I)*C+n,e=c*y+A;for(let n=o;n<h;++n){const r=(l+n*s-$)*S+t,o=n*b+e;for(let t=u;t<d;++t)R+=w[(i+t*a-k)*N+r+p]*m[t*x+o+f]}}}c[A+f]=R}}}}}return l.toTensor()}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.depthwiseConv2D(t,e,n);return r&&(i=this.add(i,r)),s&&(i=yg(this,i,s,a)),i}depthwiseConv2D(t,e,n){lg([t,e],"depthwiseConv2D");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,u=n.padInfo.top,l=n.outChannels/n.inChannels,c=un(n.outShape,t.dtype),h=this.readSync(t.dataId),d=this.readSync(e.dataId),p=c.values;for(let f=0;f<n.batchSize;++f){const m=f*t.strides[0],g=f*c.strides[0];for(let f=0;f<n.outHeight;++f){const y=g+f*c.strides[1],b=f*n.strideHeight-o;for(let o=0;o<r;++o){const r=b+o*a;if(r<0||r>=n.inHeight)continue;const f=o*e.strides[0],g=m+r*t.strides[1];for(let t=0;t<n.outWidth;++t){const r=y+t*c.strides[2],a=t*n.strideWidth-u;for(let t=0;t<s;++t){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=g+s*n.inChannels;let u=r,c=f+t*e.strides[1];for(let t=0;t<n.inChannels;++t){const e=h[o+t];for(let t=0;t<l;++t)p[u+t]+=e*d[c+t];u+=l,c+=l}}}}}}return c.toTensor()}depthwiseConv2DDerInput(t,e,n){lg([t,e],"depthwiseConv2DDerInput");const r=un(n.inShape,"float32"),s=r.values,[a,i,o]=r.strides,u=this.readSync(t.dataId),[l,c,h]=t.strides,d=this.readSync(e.dataId),[p,f,m]=e.strides,{batchSize:g,filterHeight:y,filterWidth:b,inChannels:x,inHeight:w,inWidth:v,outChannels:C,outHeight:S,outWidth:N,strideHeight:I,strideWidth:k}=n,$=y-1-n.padInfo.top,E=b-1-n.padInfo.left,A=C/x;for(let R=0;R<g;++R)for(let t=0;t<x;++t)for(let e=0;e<w;++e){const n=e-$,r=Math.max(0,Math.ceil(n/I)),g=Math.min(S,(y+n)/I);for(let x=0;x<v;++x){const w=x-E,v=Math.max(0,Math.ceil(w/k)),C=Math.min(N,(b+w)/k);let S=0;for(let e=r;e<g;++e){const r=e*I-n;for(let n=v;n<C;++n){const s=l*R+c*e+h*n,a=p*(y-1-r)+f*(b-1-(n*k-w))+m*t;for(let e=0;e<A;++e)S+=u[s+(t*A+e)]*d[a+e]}}s[a*R+i*e+o*x+t]=S}}return r.toTensor()}depthwiseConv2DDerFilter(t,e,n){lg([t,e],"depthwiseConv2DDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=un(n.filterShape,"float32"),u=n.padInfo.left,l=n.padInfo.top,c=n.outChannels/n.inChannels,h=this.bufferSync(t),d=this.bufferSync(e);for(let p=0;p<a;++p){const t=Math.max(0,Math.ceil((l-p)/r)),e=Math.min(n.outHeight,(n.inHeight+l-p)/r);for(let a=0;a<i;++a){const i=Math.max(0,Math.ceil((u-a)/s)),f=Math.min(n.outWidth,(n.inWidth+u-a)/s);for(let m=0;m<n.outChannels;++m){const g=Math.trunc(m/c),y=m%c;let b=0;for(let o=0;o<n.batchSize;++o)for(let n=t;n<e;++n){const t=p+n*r-l;for(let e=i;e<f;++e)b+=h.get(o,t,a+e*s-u,g)*d.get(o,n,e,m)}o.set(b,p,a,g,y)}}}return o.toTensor()}tile(t,e){return lg(t,"tile"),fg(this.bufferSync(t),e)}pad(t,e,n){lg(t,"pad");const r=e.map((e,n)=>e[0]+t.shape[n]+e[1]),s=e.map(t=>t[0]),a=this.bufferSync(t),i=un(r,t.dtype);0!==n&&i.values.fill(n);for(let o=0;o<t.size;o++){const t=a.indexToLoc(o),e=t.map((t,e)=>t+s[e]);i.set(a.get(...t),...e)}return i.toTensor()}gather(t,e,n){lg([t,e],"gather");const r=t.shape.slice(),s=this.readSync(e.dataId);r[n]=s.length;const a=un(r,t.dtype),i=this.bufferSync(t);for(let o=0;o<a.size;++o){const t=a.indexToLoc(o),e=t.slice();e[n]=s[t[n]];const r=i.locToIndex(e);a.values[o]=i.values[r]}return a.toTensor()}batchToSpaceND(t,e,n){lg([t],"batchToSpaceND");const r=e.reduce((t,e)=>t*e),s=b.getReshaped(t.shape,e,r),a=b.getPermuted(s.length,e.length),i=b.getReshapedPermuted(t.shape,e,r),o=b.getSliceBeginCoords(n,e.length),u=b.getSliceSize(i,n,e.length);return Qr(t.reshape(s),a).reshape(i).slice(o,u)}spaceToBatchND(t,e,n){lg([t],"spaceToBatchND");const r=e.reduce((t,e)=>t*e),s=[[0,0]];s.push(...n);for(let l=1+e.length;l<t.shape.length;++l)s.push([0,0]);const a=t.pad(s),i=b.getReshaped(a.shape,e,r,!1),o=b.getPermuted(i.length,e.length,!1),u=b.getReshapedPermuted(a.shape,e,r,!1);return Qr(a.reshape(i),o).reshape(u)}maxPool(t,e){return lg(t,"maxPool"),cg(this.readSync(t.dataId),0,t.dtype,t.strides,e,"max").toTensor()}maxPoolBackprop(t,e,n,r){lg([e,n],"maxPoolBackprop");const s=this.readSync(e.dataId),a=un(r.outShape,e.dtype,hg(s,e.shape,e.dtype,r).values),i=r.strideHeight,o=r.strideWidth,u=r.dilationHeight,l=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=h-1-r.padInfo.left,p=c-1-r.padInfo.top,f=un(e.shape,"float32"),m=this.bufferSync(t);for(let g=0;g<r.batchSize;++g)for(let t=0;t<r.inChannels;++t)for(let e=0;e<r.inHeight;++e)for(let n=0;n<r.inWidth;++n){const s=e-p,y=n-d;let b=0;for(let e=0;e<c;e+=u){const n=(s+e)/i;if(!(n<0||n>=r.outHeight||Math.floor(n)!==n))for(let s=0;s<h;s+=l){const i=(y+s)/o;if(i<0||i>=r.outWidth||Math.floor(i)!==i)continue;const u=c*h-1-a.get(g,n,i,t)===e*h+s?1:0;0!==u&&(b+=m.get(g,n,i,t)*u)}}f.set(b,g,e,n,t)}return f.toTensor()}avgPoolBackprop(t,e,n){lg([t,e],"avgPoolBackprop");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=n.dilationHeight,u=n.dilationWidth,l=n.effectiveFilterHeight,c=n.effectiveFilterWidth,h=c-1-n.padInfo.left,d=l-1-n.padInfo.top,p=un(e.shape,"float32"),f=1/(a*i),m=this.bufferSync(t);for(let g=0;g<n.batchSize;++g)for(let t=0;t<n.inChannels;++t)for(let e=0;e<n.inHeight;++e)for(let a=0;a<n.inWidth;++a){const i=e-d,y=a-h;let b=0;for(let e=0;e<l;e+=o){const a=(i+e)/r;if(!(a<0||a>=n.outHeight||Math.floor(a)!==a))for(let e=0;e<c;e+=u){const r=(y+e)/s;r<0||r>=n.outWidth||Math.floor(r)!==r||(b+=m.get(g,a,r,t))}}p.set(b*f,g,e,a,t)}return p.toTensor()}pool3d(t,e,n){lg(t,"pool3d");const r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,u=e.dilationWidth,l=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.front,p=e.padInfo.top,f=e.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),y=un(e.outShape,t.dtype),b=y.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[2]*e.outShape[3]*e.outShape[4],v=e.outShape[3]*e.outShape[4],C=e.outShape[4];for(let S=0;S<e.batchSize;++S){const y=S*x,N=S*t.strides[0];for(let x=0;x<e.inChannels;++x)for(let S=0;S<e.outDepth;++S){const I=S*r-d;let k=I;for(;k<0;)k+=i;const $=Math.min(e.inDepth,l+I),E=y+S*w;for(let r=0;r<e.outHeight;++r){const l=r*s-p;let d=l;for(;d<0;)d+=o;const y=Math.min(e.inHeight,c+l),w=E+r*v;for(let r=0;r<e.outWidth;++r){const s=r*a-f;let l=s;for(;l<0;)l+=u;const c=Math.min(e.inWidth,h+s),p=w+r*C;let v=m,S=0,I=0;for(let e=k;e<$;e+=i){const r=N+e*t.strides[1];for(let e=d;e<y;e+=o){const s=r+e*t.strides[2];for(let e=l;e<c;e+=u){const r=g[s+e*t.strides[3]+x];if("max"===n&&r>v?v=r:"avg"===n&&(S+=r,I++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}b[p+x]="avg"===n?S/I:v}}}}return y.toTensor()}avgPool3d(t,e){return lg(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()}avgPool3dBackprop(t,e,n){lg([t,e],"avgPool3dBackprop");const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,u=n.filterWidth,l=n.dilationDepth,c=n.dilationHeight,h=n.dilationWidth,d=n.effectiveFilterDepth,p=n.effectiveFilterHeight,f=n.effectiveFilterWidth,m=d-1-n.padInfo.front,g=f-1-n.padInfo.left,y=p-1-n.padInfo.top,b=un(e.shape,"float32"),x=1/(i*o*u),w=this.bufferSync(t);for(let v=0;v<n.batchSize;++v)for(let t=0;t<n.inChannels;++t)for(let e=0;e<n.inDepth;++e)for(let i=0;i<n.inHeight;++i)for(let o=0;o<n.inWidth;++o){const u=e-m,C=i-y,S=o-g;let N=0;for(let e=0;e<d;e+=l){const i=(u+e)/r;if(!(i<0||i>=n.outDepth||Math.floor(i)!==i))for(let e=0;e<p;e+=c){const r=(C+e)/s;if(!(r<0||r>=n.outHeight||Math.floor(r)!==r))for(let e=0;e<f;e+=h){const s=(S+e)/a;s<0||s>=n.outWidth||Math.floor(s)!==s||(N+=w.get(v,i,r,s,t))}}}b.set(N*x,v,e,i,o,t)}return b.toTensor()}maxPool3d(t,e){return lg(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()}maxPool3dPositions(t,e){const n=un(e.outShape,"int32"),r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,u=e.dilationWidth,l=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.front,p=e.padInfo.top,f=e.padInfo.left,m=this.bufferSync(t);for(let g=0;g<e.batchSize;++g)for(let t=0;t<e.inChannels;++t)for(let y=0;y<e.outDepth;++y){const b=y*r-d;let x=b;for(;x<0;)x+=i;const w=Math.min(e.inDepth,l+b);for(let r=0;r<e.outHeight;++r){const l=r*s-p;let d=l;for(;d<0;)d+=o;const v=Math.min(e.inHeight,c+l);for(let s=0;s<e.outWidth;++s){const p=s*a-f;let C=p;for(;C<0;)C+=u;const S=Math.min(e.inWidth,h+p);let N=Number.NEGATIVE_INFINITY,I=-1;for(let e=x;e<w;e+=i){const n=e-b;for(let r=d;r<v;r+=o){const s=r-l;for(let a=C;a<S;a+=u){const i=a-p,o=m.get(g,e,r,a,t);o>=N&&(N=o,I=n*c*h+s*c+i)}}}n.set(I,g,y,r,s,t)}}}return n.toTensor()}maxPool3dBackprop(t,e,n,r){lg([e,n],"maxPool3dBackprop");const s=this.maxPool3dPositions(e,r),a=r.strideDepth,i=r.strideHeight,o=r.strideWidth,u=r.dilationDepth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterDepth,d=r.effectiveFilterHeight,p=r.effectiveFilterWidth,f=h-1-r.padInfo.front,m=p-1-r.padInfo.left,g=d-1-r.padInfo.top,y=un(e.shape,"float32"),b=this.bufferSync(s),x=this.bufferSync(t);for(let w=0;w<r.batchSize;++w)for(let t=0;t<r.inChannels;++t)for(let e=0;e<r.inDepth;++e)for(let n=0;n<r.inHeight;++n)for(let s=0;s<r.inWidth;++s){const v=e-f,C=n-g,S=s-m;let N=0;for(let e=0;e<h;e+=u){const n=(v+e)/a;if(!(n<0||n>=r.outDepth||Math.floor(n)!==n))for(let s=0;s<d;s+=l){const a=(C+s)/i;if(!(a<0||a>=r.outHeight||Math.floor(a)!==a))for(let i=0;i<p;i+=c){const u=(S+i)/o;if(u<0||u>=r.outWidth||Math.floor(u)!==u)continue;const l=h*d*p-1-b.get(w,n,a,u,t)===e*d*p+s*p+i?1:0;0!==l&&(N+=x.get(w,n,a,u,t)*l)}}}y.set(N,w,e,n,s,t)}return y.toTensor()}cast(t,e){return b.castTensor(t,e,this)}reshape(t,e){return b.reshapeTensor(t,e)}avgPool(t,e){return lg(t,"avgPool"),lg(t,"maxPool"),cg(this.readSync(t.dataId),0,t.dtype,t.strides,e,"avg").toTensor().toFloat()}resizeBilinear(t,e,n,s){lg(t,"resizeBilinear");const[a,i,o,u]=t.shape,l=this.readSync(t.dataId),c=new Float32Array(r.sizeFromShape([a,e,n,u])),h=[s&&e>1?i-1:i,s&&n>1?o-1:o],d=[s&&e>1?e-1:e,s&&n>1?n-1:n];let p=0;const f=h[0]/d[0],m=h[1]/d[1];for(let r=0;r<a;r++)for(let s=0;s<e;s++){const e=f*s,a=Math.floor(e),h=e-a,d=Math.min(i-1,Math.ceil(e)),g=r*t.strides[0]+a*t.strides[1],y=r*t.strides[0]+d*t.strides[1];for(let r=0;r<n;r++){const e=m*r,n=Math.floor(e),s=e-n,a=Math.min(o-1,Math.ceil(e)),i=g+n*t.strides[2],d=y+n*t.strides[2],f=g+a*t.strides[2],b=y+a*t.strides[2];for(let t=0;t<u;t++){const e=l[i+t],n=l[d+t],r=e+(l[f+t]-e)*s;c[p++]=r+(n+(l[b+t]-n)*s-r)*h}}}return Ge(c,[a,e,n,u])}resizeBilinearBackprop(t,e,n){lg([t,e],"resizeBilinearBackprop");const[r,s,a,i]=e.shape,[,o,u]=t.shape,l=new Float32Array(r*s*a*i),c=[n&&o>1?s-1:s,n&&u>1?a-1:a],h=[n&&o>1?o-1:o,n&&u>1?u-1:u],d=c[0]/h[0],p=c[1]/h[1],f=this.readSync(t.dataId);let m=0;for(let g=0;g<r;g++){const t=g*e.strides[0];for(let n=0;n<o;n++){const r=n*d,o=Math.floor(r),c=Math.min(Math.ceil(r),s-1),h=t+o*e.strides[1],g=t+c*e.strides[1],y=r-o,b=1-y;for(let t=0;t<u;t++){const n=t*p,r=Math.floor(n),s=Math.min(Math.ceil(n),a-1),o=n-r,u=1-o,c=h+r*e.strides[2],d=h+s*e.strides[2],x=g+r*e.strides[2],w=g+s*e.strides[2],v=b*u,C=b*o,S=y*u,N=y*o;for(let t=0;t<i;t++){const e=f[m++];l[c+t]+=e*v,l[d+t]+=e*C,l[x+t]+=e*S,l[w+t]+=e*N}}}}return Ye(l,[r,a,s,i],e.dtype)}resizeNearestNeighbor(t,e,n,r){lg(t,"resizeNearestNeighbor");const[s,a,i,o]=t.shape,u=this.readSync(t.dataId),l=new Float32Array(s*e*n*o),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=c[0]/h[0],p=c[1]/h[1];let f=0;for(let m=0;m<s;m++){const s=m*t.strides[0];for(let c=0;c<e;c++){const e=d*c,h=s+Math.min(a-1,r?Math.round(e):Math.floor(e))*t.strides[1];for(let s=0;s<n;s++){const e=p*s,n=h+Math.min(i-1,r?Math.round(e):Math.floor(e))*t.strides[2];for(let t=0;t<o;t++)l[f++]=u[n+t]}}}return Ge(l,[s,e,n,o],t.dtype)}resizeNearestNeighborBackprop(t,e,n){lg([t,e],"resizeNearestNeighborBackprop");const[r,s,a,i]=e.shape,[,o,u]=t.shape,l=new Float32Array(r*s*a*i),c=this.readSync(t.dataId),h=[n&&o>1?s-1:s,n&&u>1?a-1:a],d=[n&&o>1?o-1:o,n&&u>1?u-1:u],p=h[0]/d[0],f=h[1]/d[1],m=1/p,g=1/f,y=2*Math.ceil(m)+2,b=2*Math.ceil(g)+2;for(let x=0;x<r;x++){const r=x*e.strides[0];for(let h=0;h<s;h++){const d=r+h*e.strides[1],x=Math.floor(h*m),w=Math.floor(x-y/2);for(let m=0;m<a;m++){const x=d+m*e.strides[2],v=Math.floor(m*g),C=Math.floor(v-b/2);for(let e=0;e<i;e++){let i=0;for(let l=0;l<y;l++){const d=l+w;if(d<0||d>=o)continue;const g=r+d*t.strides[1],y=d*p;if(h===Math.min(s-1,n?Math.round(y):Math.floor(y)))for(let r=0;r<b;r++){const s=r+C;if(s<0||s>=u)continue;const o=g+s*t.strides[2],l=s*f;m===Math.min(a-1,n?Math.round(l):Math.floor(l))&&(i+=c[o+e])}}l[x+e]=i}}}}return Ye(l,e.shape,e.dtype)}batchNorm(t,e,n,r,s,a){lg([t,e,n,s,r],"batchNorm");const i=this.readSync(t.dataId),o=this.readSync(e.dataId),u=this.readSync(n.dataId),l=s?this.readSync(s.dataId):new Float32Array([1]),c=r?this.readSync(r.dataId):new Float32Array([0]),h=new Float32Array(i.length),d=c.length,p=l.length,f=u.length,m=o.length;let g=0,y=0,b=0,x=0;for(let w=0;w<i.length;++w)h[w]=c[g++]+(i[w]-o[y++])*l[b++]/Math.sqrt(u[x++]+a),g>=d&&(g=0),y>=m&&(y=0),b>=p&&(b=0),x>=f&&(x=0);return Ye(h,t.shape)}localResponseNormalization4D(t,e,n,r,s){lg(t,"localResponseNormalization4D");const a=t.shape[3],i=a-1,o=this.readSync(t.dataId),u=t.size,l=new Float32Array(u);function c(t){const n=t%a;let r=t-n+Math.max(0,n-e);const s=t-n+Math.min(n+e,i);let u=0;for(;r<=s;r++){const t=o[r];u+=t*t}return u}for(let h=0;h<u;h++){const t=c(h),e=o[h]*Math.pow(n+r*t,-s);l[h]=e}return Ye(l,t.shape)}LRNGrad(t,e,n,r,s,a,i){lg(t,"LRNGrad");const o=t.shape[3],u=this.readSync(t.dataId),l=this.readSync(e.dataId),c=this.readSync(n.dataId),h=new Float32Array(t.size),d=t.size;for(let p=0;p<d;p++){const t=p%o,e=p-t+Math.max(0,t-r),n=p-t+Math.min(o,t+r+1);let d=0;for(let r=e;r<n;r++)d+=Math.pow(l[r],2);d=a*d+s;for(let r=e;r<n;r++){let t=-2*a*i*l[r]*c[p]/d;p===r&&(t+=Math.pow(d,-i)),t*=u[p],h[r]+=t}}return Ye(h,t.shape)}multinomial(t,e,n,r){lg(t,"multinomial");const s=e?t:yu(t),a=s.shape[0],i=s.shape[1],o=en([a,n],"int32"),u=this.readSync(o.dataId),l=this.readSync(s.dataId);for(let c=0;c<a;++c){const t=c*i,e=new Float32Array(i-1);e[0]=l[t];for(let n=1;n<e.length;++n)e[n]=e[n-1]+l[t+n];const s=Eo.alea(r.toString()),a=c*n;for(let r=0;r<n;++r){const t=s();u[a+r]=e.length;for(let n=0;n<e.length;n++)if(t<e[n]){u[a+r]=n;break}}}return o}oneHot(t,e,n,r){lg(t,"oneHot");const s=new Float32Array(t.size*e);s.fill(r);const a=this.readSync(t.dataId);for(let i=0;i<t.size;++i)a[i]>=0&&a[i]<e&&(s[i*e+a[i]]=n);return Ke(s,[t.size,e],"int32")}nonMaxSuppression(t,e,n,r,s){lg(t,"nonMaxSuppression");const a=this.readSync(t.dataId),i=this.readSync(e.dataId);return dg(a,i,n,r,s)}fft(t){return this.fftBatch(t,!1)}ifft(t){return this.fftBatch(t,!0)}fftBatch(t,e){const n=t.shape[0],r=t.shape[1],s=un(t.shape,"float32"),a=un(t.shape,"float32"),i=Ue(t).as2D(n,r),o=Ve(t).as2D(n,r);for(let u=0;u<n;u++){const t=i.slice([u,0],[1,r]),n=o.slice([u,0],[1,r]),l=We(t,n),c=this.readSync(this.fftImpl(l,e).dataId);for(let e=0;e<r;e++){const t=b.getComplexWithIndex(c,e);s.values[u*r+e]=t.real,a.values[u*r+e]=t.imag}}return We(s.toTensor(),a.toTensor()).as2D(n,r)}fftImpl(t,e){const n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){let s=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(s=We(Ue(s).div(He(r)),Ve(s).div(He(r)))),s}{const n=this.readSync(t.dataId),s=this.fourierTransformByMatmul(n,r,e),a=b.splitRealAndImagArrays(s);return We(a.real,a.imag).as2D(t.shape[0],t.shape[1])}}isExponentOf2(t){return 0==(t&t-1)}fftRadix2(t,e,n){if(1===e)return t;const r=this.readSync(t.dataId),s=e/2,a=b.complexWithEvenIndex(r);let i=We(a.real,a.imag).as1D();const o=b.complexWithOddIndex(r);let u=We(o.real,o.imag).as1D();i=this.fftRadix2(i,s,n),u=this.fftRadix2(u,s,n);const l=b.exponents(e,n),c=We(l.real,l.imag).mul(u),h=i.add(c),d=i.sub(c),p=Ue(h).concat(Ue(d)),f=Ve(h).concat(Ve(d));return We(p,f).as1D()}fourierTransformByMatmul(t,e,n){const r=new Float32Array(2*e);for(let s=0;s<e;s++){let a=0,i=0;for(let r=0;r<e;r++){const o=b.exponent(s*r,e,n),u=b.getComplexWithIndex(t,r);a+=u.real*o.real-u.imag*o.imag,i+=u.real*o.imag+u.imag*o.real}n&&(a/=e,i/=e),b.assignToTypedArray(r,a,i,s)}return r}depthToSpace(t,e,n){r.assert("NHWC"===n,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n),r.assert(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const s=t.shape[0],a=t.shape[1],i=t.shape[2],o=t.shape[3],u=a*e,l=i*e,c=o/(e*e),h=this.readSync(t.dataId),d=new Float32Array(s*u*l*c);let p=0;for(let r=0;r<s;++r)for(let t=0;t<u;++t){const n=Math.floor(t/e),s=t%e;for(let t=0;t<l;++t){const u=Math.floor(t/e),l=(s*e+t%e)*c;for(let t=0;t<c;++t)d[p++]=h[t+l+o*(u+i*(n+a*r))]}}return Ye(d,[s,u,l,c])}broadcastedBinaryOp(t,e,n,r){const s=b.assertAndGetBroadcastShape(t.shape,e.shape),a=un(s,n),i=this.readSync(t.dataId),o=this.readSync(e.dataId),u=b.getBroadcastDims(t.shape,s),l=b.getBroadcastDims(e.shape,s),c=a.values;if(u.length+l.length===0)for(let h=0;h<c.length;++h)c[h]=r(i[h%i.length],o[h%o.length]);else{const n=this.bufferSync(t),s=this.bufferSync(e);for(let h=0;h<c.length;++h){const d=a.indexToLoc(h),p=d.slice(-t.rank);u.forEach(t=>p[t]=0);const f=n.locToIndex(p),m=d.slice(-e.rank);l.forEach(t=>m[t]=0);const g=s.locToIndex(m);c[h]=r(i[f],o[g])}}return a.toTensor()}broadcastedBinaryComplexOp(t,e,n){const r=b.assertAndGetBroadcastShape(t.shape,e.shape),s=un(r,"float32"),a=un(r,"float32"),i=this.readSync(t.dataId),o=this.readSync(e.dataId),u=b.getBroadcastDims(t.shape,r),l=b.getBroadcastDims(e.shape,r),c=s.values,h=a.values;if(u.length+l.length===0)for(let d=0;d<c.length;d++){const t=d%i.length,e=d%o.length,r=n(i[2*t],i[2*t+1],o[2*e],o[2*e+1]);c[d]=r.real,h[d]=r.imag}else{const r=this.bufferSync(this.data.get(t.dataId).complexTensors.real),a=this.bufferSync(this.data.get(e.dataId).complexTensors.real);for(let d=0;d<c.length;d++){const p=s.indexToLoc(d),f=p.slice(-t.rank);u.forEach(t=>f[t]=0);const m=r.locToIndex(f),g=p.slice(-e.rank);l.forEach(t=>g[t]=0);const y=a.locToIndex(g),b=n(i[2*m],i[2*m+1],o[2*y],o[2*y+1]);c[d]=b.real,h[d]=b.imag}}return this.complex(s.toTensor(),a.toTensor())}split(t,e,n){return pg(t,e,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(t,e,n,r,s,a){const[i,o,u,l]=t.shape,c=e.shape[0],[h,d]=r,p=un([c,h,d,l],"float32"),f=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),y=t.strides,b=p.strides;for(let x=0;x<c;x++){const t=4*x,e=f[t],n=f[t+1],r=f[t+2],c=f[t+3],w=m[x];if(w>=i)continue;const v=h>1?(r-e)*(o-1)/(h-1):0,C=d>1?(c-n)*(u-1)/(d-1):0;for(let i=0;i<h;i++){const t=h>1?e*(o-1)+i*v:.5*(e+r)*(o-1);if(t<0||t>o-1)for(let e=0;e<d;e++)for(let t=0;t<l;t++)p.values[t+e*b[2]+i*b[1]+x*b[0]]=a;else if("bilinear"===s){const e=Math.floor(t),r=Math.ceil(t),s=t-e;for(let t=0;t<d;t++){const o=d>1?n*(u-1)+t*C:.5*(n+c)*(u-1);if(o<0||o>u-1){for(let e=0;e<l;e++)p.values[e+t*b[2]+i*b[1]+x*b[0]]=a;continue}const h=Math.floor(o),f=Math.ceil(o),m=o-h;for(let n=0;n<l;n++){let a=n+h*y[2]+e*y[1]+w*y[0];const o=g[a];a=n+f*y[2]+e*y[1]+w*y[0];const u=g[a];a=n+h*y[2]+r*y[1]+w*y[0];const l=g[a];a=n+f*y[2]+r*y[1]+w*y[0];const c=g[a],d=o+(u-o)*m;a=n+t*b[2]+i*b[1]+x*b[0],p.values[a]=d+(l+(c-l)*m-d)*s}}}else for(let e=0;e<d;++e){const r=d>1?n*(u-1)+e*C:.5*(n+c)*(u-1);if(r<0||r>u-1){for(let t=0;t<l;t++)p.values[t+e*b[2]+i*b[1]+x*b[0]]=a;continue}const s=Math.round(r),o=Math.round(t);for(let t=0;t<l;t++)p.values[t+e*b[2]+i*b[1]+x*b[0]]=g[t+s*y[2]+o*y[1]+w*y[0]]}}}return p.toTensor()}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,sliceSize:i,strides:o,outputSize:u}=b.calculateShapes(e,t,n);return this.scatter(t,e,n,u,i,a,s,o,r,!1)}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=b.prepareAndValidate(t,e);if(0===a)return Ge([],s,t.dtype);const u=new ae([a,i],t.dtype),l=this.readSync(e.dataId),c=this.readSync(t.dataId);for(let h=0;h<a;h++){const e=[];let n=0;for(let t=0;t<r;t++){const s=l[h*r+t];n+=s*o[t],e.push(s)}if(n<0||n>=t.size/i)throw new Error(`Invalid indices: ${e} does not index into ${t.shape}`);for(let t=0;t<i;t++)u.values[h*i+t]=c[n*i+t]}return u.toTensor().reshape(s)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=b.calculateShapes(e,t,n),u=He(0);return this.scatter(t,e,n,o,a,s,r,i,u,!0)}fill(t,e,n){n=n||r.inferDtype(e);const s=r.getArrayFromDType(n,r.sizeFromShape(t));return s.fill(e),Ei().makeTensor(s,t,n,this)}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)}zerosLike(t){const e=r.getArrayFromDType(t.dtype,r.sizeFromShape(t.shape));return this.makeOutput(e,t.shape,t.dtype)}linspace(t,e,n){return b.linspaceImpl(t,e,n)}scatter(t,e,n,r,s,a,i,o,u,l){const c=[r/s,s],h=this.readSync(t.dataId),d=this.readSync(e.dataId);if(0===r)return Ge([],n,e.dtype);const p=new ae(c,e.dtype);p.values.fill(this.readSync(u.dataId)[0]);for(let f=0;f<a;f++){const t=[];let a=0;for(let e=0;e<i;e++){const n=h[f*i+e];t.push(n),a+=n*o[e]}if(a<0||a>=r/s)throw new Error(`Invalid indices: ${t} does not index into ${n}`);for(let n=0;n<s;n++)l?p.values[a*s+n]+=d[f*s+n]:p.values[a*s+n]=0===e.rank?d[0]:d[f*s+n]}return p.toTensor().reshape(n)}}function xg(t,e){return{kernelName:t,backendName:"cpu",kernelFunc:({inputs:n,backend:r})=>{const{a:s,b:a}=n,i=r;lg([s,a],t);const o=i.data.get(s.dataId).values,u=i.data.get(a.dataId).values,[l,c]=e(s.shape,a.shape,o,u,s.dtype);return{dataId:i.write(l,c,s.dtype),shape:c,dtype:s.dtype}}}}function wg(t){return(e,n,s,a,i)=>{const o=b.assertAndGetBroadcastShape(e,n),u=o.length,l=r.computeStrides(o),c=r.sizeFromShape(o),h=r.getTypedArrayFromDType(i,c),d=e.length,p=n.length,f=r.computeStrides(e),m=r.computeStrides(n),g=b.getBroadcastDims(e,o),y=b.getBroadcastDims(n,o);if(g.length+y.length===0)for(let r=0;r<h.length;++r)h[r]=t(s[r%s.length],a[r%a.length]);else for(let b=0;b<h.length;++b){const e=r.indexToLoc(b,u,l),n=e.slice(-d);g.forEach(t=>n[t]=0);const i=r.locToIndex(n,d,f),o=e.slice(-p);y.forEach(t=>o[t]=0);const c=r.locToIndex(o,p,m);h[b]=t(s[i],a[c])}return[h,o]}}const vg=xg("Div",wg((t,e)=>t/e)),Cg={kernelName:"Max",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{reductionIndices:a}=e,i=n;let o=s.shape;const u=o.length;let l=r.parseAxisParam(a,o);const c=b.getAxesPermutation(l,u);let h=i.data.get(s.dataId).values;if(null!=c){const t=new Array(u);for(let e=0;e<t.length;e++)t[e]=o[c[e]];h=ug(h,o,s.dtype,c,t),l=b.getInnerMostAxes(l.length,u),o=t}lg(s,"max"),b.assertAxesAreInnerMostDims("max",l,u);const[d,p]=b.computeOutAndReduceShapes(o,l),f=og(h,r.sizeFromShape(p),d,s.dtype);return{dataId:i.write(f,d,s.dtype),shape:d,dtype:s.dtype}}},Sg={kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{filterSize:a,strides:i,pad:o,includeBatchInIndex:u}=e,l=n;lg(s,"MaxPoolWithArgmax");const c=l.data.get(s.dataId).values,h=b.computePool2DInfo(s.shape,a,i,[1,1],o),[d,p]=function(t,e,n,s,a){const i=cg(t,0,n,r.computeStrides(e),a,"max"),o=hg(t,e,n,a,!0,s);return[i.values,o.values]}(c,s.shape,s.dtype,u,h),f=l.write(d,h.outShape,s.dtype),m=l.write(p,h.outShape,s.dtype);return[{dataId:f,shape:h.outShape,dtype:s.dtype},{dataId:m,shape:h.outShape,dtype:"int32"}]}},Ng=x.nonMaxSuppressionV5,Ig=[{kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=n,l=e;lg(r,"NonMaxSuppressionWithScore");const c=l.data.get(r.dataId).values,h=l.data.get(s.dataId).values,d=a,p=i,f=o,m=u,{selectedIndices:g,selectedScores:y}=Ng(c,h,d,p,f,m);return[g,y]}},{kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;lg(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let i=0;i<s.length;++i){const t=s[i];a[i]=t*t}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},xg("SquaredDifference",wg((t,e)=>{const n=t-e;return n*n})),vg,{kernelName:"Transpose",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n;lg(r,"transpose");const i=new Array(r.shape.length);for(let u=0;u<i.length;u++)i[u]=r.shape[s[u]];const o=ug(a.data.get(r.dataId).values,r.shape,r.dtype,s,i);return{dataId:a.write(o,i,r.dtype),shape:i,dtype:r.dtype}}},Sg,Cg];for(const Jx of Ig)rt(Jx);Fi("cpu",()=>new bg,1);const kg={},$g={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Eg(t){t in kg||(kg[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);return e.addEventListener("webglcontextlost",e=>{e.preventDefault(),delete kg[t]},!1),1===t?e.getContext("webgl",$g)||e.getContext("experimental-webgl",$g):e.getContext("webgl2",$g)}(t));const e=kg[t];return e.isContextLost()?(delete kg[t],Eg(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),kg[t])}var Ag,Rg,Tg;function Dg(t,e){return[e,t]}function Fg(t){const e=r.sizeFromShape(t),n=Math.ceil(e/4);return r.sizeToSquarishShape(n)}function _g(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Og(t,e){const n=t;let r,s,a,i,o,u,l,c,h,d;return 2===j().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,l=4,c=1,h=n.HALF_FLOAT,d=n.FLOAT):(r=t.RGBA,s=t.RGBA,a=t.RGBA,i=n.RGBA,o=t.RGBA,l=4,c=4,h=null!=e?e.HALF_FLOAT_OES:null,d=t.FLOAT),u=t.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function Mg(t,e,n){const r=n();return e&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}(t,e))}(t),r}function zg(t){return!!(j().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function Lg(t,e,n){return qg(t,e,()=>t.getExtension(n),'Extension "'+n+'" not supported on this browser.')}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(Ag||(Ag={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(Rg||(Rg={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Tg||(Tg={}));const Bg=/ERROR: [0-9]+:([0-9]+):/g;function Pg(t,e,n){if(Mg(t,e,()=>t.validateProgram(n)),!1===t.getProgramParameter(n,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Shader program validation failed.")}function Wg(t,e,n,r,s,a,i,o){const u=t.getAttribLocation(n,r);return-1!==u&&(Mg(t,e,()=>t.bindBuffer(t.ARRAY_BUFFER,s)),Mg(t,e,()=>t.vertexAttribPointer(u,a,t.FLOAT,!1,i,o)),Mg(t,e,()=>t.enableVertexAttribArray(u)),!0)}function Vg(t,e,n,r){Mg(t,e,()=>t.bindFramebuffer(t.FRAMEBUFFER,r)),Mg(t,e,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0))}function Ug(t,e,n){Mg(t,e,()=>t.bindFramebuffer(t.FRAMEBUFFER,n)),Mg(t,e,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0))}function Gg(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}(t,e))}function qg(t,e,n,r){const s=Mg(t,e,()=>n());if(null==s)throw new Error(r);return s}function Hg(t,e=2){return r.sizeFromShape(t.slice(0,t.length-e))}function jg(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function Kg(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[Hg(t),...jg(t)]),e}function Xg(t){return t%2==0}function Yg(t,e){if(t=t.slice(-2),e=e.slice(-2),r.arraysEqual(t,e))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(Xg(n)&&Xg(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&Xg(t[0])&&Xg(e[0])}let Jg,Zg;function Qg(t,e){return null!=t.getExtension(e)}function ty(t){try{if(null!=Eg(t))return!0}catch(e){return!1}return!1}function ey(t){const e=Og(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),s}const ny=j();ny.registerFlag("HAS_WEBGL",()=>ny.getNumber("WEBGL_VERSION")>0),ny.registerFlag("WEBGL_VERSION",()=>ty(2)?2:ty(1)?1:0),ny.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===ny.get("WEBGL_VERSION")),ny.registerFlag("WEBGL_CPU_FORWARD",()=>!0),ny.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),ny.registerFlag("WEBGL_PACK",()=>ny.getBool("HAS_WEBGL")),ny.registerFlag("WEBGL_PACK_NORMALIZATION",()=>ny.getBool("WEBGL_PACK")),ny.registerFlag("WEBGL_PACK_CLIP",()=>ny.getBool("WEBGL_PACK")),ny.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),ny.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>ny.getBool("WEBGL_PACK")),ny.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>ny.getBool("WEBGL_PACK")),ny.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>ny.getBool("WEBGL_PACK")),ny.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>ny.getBool("WEBGL_PACK")),ny.registerFlag("WEBGL_PACK_REDUCE",()=>ny.getBool("WEBGL_PACK")),ny.registerFlag("WEBGL_LAZILY_UNPACK",()=>ny.getBool("WEBGL_PACK")),ny.registerFlag("WEBGL_CONV_IM2COL",()=>ny.getBool("WEBGL_PACK")),ny.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(t){if(null==Jg){const e=Eg(t);Jg=e.getParameter(e.MAX_TEXTURE_SIZE)}return Jg}(ny.getNumber("WEBGL_VERSION"))),ny.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(t){if(null==Zg){const e=Eg(t);Zg=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Zg)}(ny.getNumber("WEBGL_VERSION"))),ny.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const t=ny.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=Eg(t);return e=Qg(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:Qg(n,"EXT_disjoint_timer_query")?1:0,e}(t)}),ny.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>ny.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!a.isMobile()),ny.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(t){if(0===t)return!1;const e=Eg(t);if(1===t){if(!Qg(e,"OES_texture_float"))return!1}else if(!Qg(e,"EXT_color_buffer_float"))return!1;return ey(e)}(ny.getNumber("WEBGL_VERSION"))),ny.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!ny.getBool("WEBGL_FORCE_F16_TEXTURES")&&ny.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),ny.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function(t){if(0===t)return!1;const e=Eg(t);if(1!==t){if(Qg(e,"EXT_color_buffer_float"))return ey(e);const t="EXT_color_buffer_half_float";if(Qg(e,t)){const n=e.getExtension(t);return function(t,e){const n=Og(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r),t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,s),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(s),a}(e,n)}return!1}return!!Qg(e,"OES_texture_float")&&!!Qg(e,"WEBGL_color_buffer_float")&&ey(e)}(ny.getNumber("WEBGL_VERSION"))),ny.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(t=ny.getNumber("WEBGL_VERSION"))&&null!=Eg(t).fenceSync;var t}),ny.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>ny.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0);class ry{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`float v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class sy{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class ay{constructor(t,e,n){this.variableNames=["A"];const r=t.windowSize,s=t.batchSize,a=Math.ceil(t.inSize/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===e?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function iy(t,e){return["x","y","z","w","u","v"].slice(0,e).map(e=>`${t}.${e}`)}function oy(t,e){return 1===e?[t]:iy(t,e)}function uy(){let t,e,n,r,s,a,i,o,u,l;return 2===j().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:u,defineRound:l}}function ly(t,e,n="index"){const s=r.computeStrides(e);return s.map((e,r)=>`int ${t[r]} = ${n} / ${e}; ${r===s.length-1?`int ${t[r+1]} = ${n} - ${t[r]} * ${e}`:`index -= ${t[r]} * ${e}`};`).join("")}function cy(t){const e=r.computeStrides(t).map(t=>t.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const hy="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:dy}=b;const py="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",fy="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",my="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",gy="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function yy(t){return"offset"+t}function by(t){const e=t.name,n=r.sizeFromShape(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function xy(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function wy(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function vy(t,e){return e.map(e=>t[e]).join(", ")}class Cy{constructor(t,e,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,r.assert(t.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const a=Math.ceil(t[t.length-1]/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,u=xy(o),l=oy("coords",o);let c,h;if(1===a){h=o+1;const t=xy(h);c=`\n        ${t} sourceLocR = ${t}(${l.join()}, 0);\n        ++${l[o-1]};\n        ${t} sourceLocG = ${t}(${l.join()}, 0);\n        ++${l[o-2]};\n        ${t} sourceLocA = ${t}(${l.join()}, 0);\n        --${l[o-1]};\n        ${t} sourceLocB = ${t}(${l.join()}, 0);\n        --${l[o-2]};`}else h=o,c=`\n        ${u} sourceLocR = coords;\n        ++${l[o-1]};\n        ${u} sourceLocG = coords;\n        ++${l[o-2]};\n        ${u} sourceLocA = coords;\n        --${l[o-1]};\n        ${u} sourceLocB = coords;\n        --${l[o-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),p="."+d[h-1],f=d.map(t=>"int "+t),m=oy("sourceLocR",h-1).concat("inIdx.r"),g=oy("sourceLocG",h-1).concat("inIdx.g"),y=oy("sourceLocB",h-1).concat("inIdx.b"),b=oy("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,C=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${C}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${l[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\n          sourceLocB${p}, sourceLocA${p}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class Sy{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.effectiveFilterHeight,n=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${n-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e};\n            wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${n};\n            wC+= ${t.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ny{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.effectiveFilterDepth,n=t.effectiveFilterHeight,r=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${e-1-t.padInfo.front}, ${n-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterDepth*t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${e};\n            wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${n};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${r};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Iy{constructor(t,e,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],b.assertAndGetBroadcastShape(t,e),b.assertAndGetBroadcastShape(t,n);let i="0.0";null!=r&&(b.assertAndGetBroadcastShape(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(b.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class ky{constructor(t,e,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],b.assertAndGetBroadcastShape(t,e),b.assertAndGetBroadcastShape(t,n);let i="vec4(0.0)";null!=r&&(b.assertAndGetBroadcastShape(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(b.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}class $y{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=b.assertAndGetBroadcastShape(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const Ey="return a + b;",Ay="return a - b;",Ry="return a * b;",Ty="return (a < 0.) ? b * a : a;";class Dy{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=b.assertAndGetBroadcastShape(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const Fy="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class _y{constructor(t,e,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=b.assertAndGetBroadcastShape(e,n);const a=this.outputShape.length;let i="";if(s)if(0===a||1===r.sizeFromShape(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i=`\n          ${xy(a)} coords = getOutputCoords();\n        `,1===a)i+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=oy("coords",a);i+=`\n            bool nextRowOutOfBounds =\n              (${t[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${t[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}class Oy{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class My{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class zy{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class Ly{constructor(t){this.outputShape=[],this.outputShape=b.computeOutShape(t,1),this.variableNames=t.map((t,e)=>"T"+e);const e=new Array(t.length-1);e[0]=t[0][1];for(let r=1;r<e.length;r++)e[r]=e[r-1]+t[r][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let r=1;r<e.length;r++)n.push(`else if (yC < ${e[r]}) setOutput(getT${r}(yR, yC-${e[r-1]}));`);n.push(`else setOutput(getT${e.length}(yR, yC-${e[e.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class By{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=b.computeOutShape(t,e);const n=this.outputShape,r=n.length,s=xy(r),a=oy("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((t,e)=>"T"+e);const o=new Array(t.length-1);o[0]=t[0][e];for(let p=1;p<o.length;p++)o[p]=o[p-1]+t[p][e];const u=i[e],l=i.slice(-2),c=i.join();let h=`if (${u} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let p=1;p<o.length;p++){const t=o[p-1];h+=`\n        if (${u} < ${o[p]}  && ${u} >= ${o[p-1]}) {\n          return getChannel(\n            getT${p}(${Py(i,u,t)}),\n            vec2(${Py(l,u,t)}));\n        }`}const d=o[o.length-1];h+=`\n        return getChannel(\n          getT${o.length}(${Py(i,u,d)}),\n          vec2(${Py(l,u,d)}));`,this.userCode=`\n      float getValue(${i.map(t=>"int "+t)}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function Py(t,e,n){const r=t.indexOf(e);return t.map((t,e)=>e===r?`${t} - ${n}`:t).join()}class Wy{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${"channelsLast"===t.dataFormat}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Vy{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r="channelsLast"===t.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${n-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${r?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${r?1:2}], coords[${r?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${r}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Uy{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${t.strideDepth} - ${t.padInfo.front};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Gy{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${e-1-t.padInfo.front}, ${n-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${t.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class qy{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${t.outChannels/t.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Hy{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${n-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${r}; dm++) {\n              int d2 = d1 * ${r} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class jy{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,o=t.strideWidth,u=t.dilationHeight,l=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,d=4*Math.floor(t.inChannels/4),p=t.inChannels%4,f="channelsLast"===t.dataFormat,m=f?1:2,g=f?2:3,y=f?3:1;let b="",x="";n&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const w=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${y}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${l};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===p}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===p}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===p}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}class Ky{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,u=t.dilationHeight,l=t.dilationWidth,c=t.filterDepth,h=t.filterHeight,d=t.filterWidth,p=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Xy{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,u=t.strideHeight,l=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=t.outChannels/t.inChannels;let m="",g="";n&&(m=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,g="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${a}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${y}\n        ${g}\n        setOutput(result);\n      }\n    `}}class Yy{constructor(t,e=!1,n=null,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const a=t.inHeight,i=t.inWidth,o=t.padInfo.top,u=t.padInfo.left,l=t.strideHeight,c=t.strideWidth,h=t.dilationHeight,d=t.dilationWidth,p=t.filterHeight,f=t.filterWidth,m=f;let g="int xR; int xC; int xCOffset;";for(let r=0;r<p;r++)for(let t=0;t<f;t++)g+=`\n          vec4 xTexelR${r}C${2*t} = vec4(0.);\n          vec4 wR${r}C${t} = vec4(0.);\n          vec4 xR${r}C${t} = vec4(0.);`;for(let w=0;w<p;w++)for(let t=0;t<m;t++){const e=2*t;if(g+=`\n          xR = xRCorner + ${w*h};\n          xC = xCCorner + ${e*d};\n        `,1===c){if(e<f&&(g+=u%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${w}C${e} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    xTexelR${w}C${e}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${w}C${e} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${w}C${e} = vec4(previous.zw, xTexelR${w}C${e}.xy);\n                } else {\n                  xR${w}C${e} = vec4(0, 0, xTexelR${w}C${e}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${a} && xC >= 0 && xC < ${i}) {\n                  xTexelR${w}C${e} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${w}C${e} = vec4(0.);\n                }\n\n                xR${w}C${e} = xTexelR${w}C${e};\n              `,e+1<f)){const t=u%2==0?r.nearestLargerEven(d):d;d%2==0&&u%2==1||d%2!=0&&u%2!=1?(g+=`\n                  xCOffset = xC + ${u%2} + ${t};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${w}C${e+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,d>1&&(g+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${a} &&\n                      xCOffset >= 0 && xCOffset < ${i}) {\n                      xTexelR${w}C${e} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${w}C${e} = vec4(0.);\n                    }\n                  `),g+=`\n                  xR${w}C${e+1} = vec4(\n                    xTexelR${w}C${e}.zw, xTexelR${w}C${e+2}.xy);\n                `):g+=`\n                  xCOffset = xC + ${t};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${w}C${e+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${w}C${e+1} = xTexelR${w}C${e+2};\n                `}}else e<f&&(g+=`\n              if(xR >= 0 && xR < ${a}) {\n            `,u%2==1?(g+=`\n                xCOffset = xC + 1 - ${c};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${w}C${e} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${w}C${e} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${i}) {\n                  xTexelR${w}C${e+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${w}C${e+2} = vec4(0.);\n                }\n\n                xR${w}C${e} = vec4(\n                  xTexelR${w}C${e}.zw, xTexelR${w}C${e+2}.zw);\n              `,e+1<f&&(g+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${c};\n                  if(xCOffset >= 0 && xCOffset < ${i}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${w}C${e+1} = vec4(xTexelR${w}C${e+2}.xy, final.xy);\n                `)):(g+=`\n                if(xC >= 0 && xC < ${i}) {\n                  xTexelR${w}C${e} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${w}C${e} = vec4(0.);\n                }\n\n                xCOffset = xC + ${c};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${w}C${e+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${w}C${e+2} = vec4(0.);\n                }\n\n                xR${w}C${e} = vec4(\n                  xTexelR${w}C${e}.xy, xTexelR${w}C${e+2}.xy);\n              `,e+1<f&&(g+=`\n                  xR${w}C${e+1} = vec4(\n                    xTexelR${w}C${e}.zw, xTexelR${w}C${e+2}.zw);\n                `)),g+="}");e<f&&(g+=`\n            vec4 wTexelR${w}C${e} = getW(${w}, ${e}, d1, q);\n            wR${w}C${e} = vec4(wTexelR${w}C${e}.xz, wTexelR${w}C${e}.xz);\n          `,e+1<f&&(g+=`\n              vec4 wTexelR${w}C${e+1} = getW(${w}, ${e+1}, d1, q);\n              wR${w}C${e+1} =\n                vec4(wTexelR${w}C${e+1}.xz, wTexelR${w}C${e+1}.xz);`))}for(let r=0;r<p;r++)for(let t=0;t<f;t++)g+=`dotProd += xR${r}C${t} * wR${r}C${t};`;let y="",b="";n&&(y=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,b="result = activation(result);");const x=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${l}, ${c});\n      const ivec2 pads = ivec2(${o}, ${u});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${g}\n\n        vec4 result = dotProd;\n        ${x}\n        ${b}\n        setOutput(result);\n      }\n    `}}class Jy{constructor(t,e,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,u]=t,[l]=e,[c,h]=n;this.outputShape=[l,c,h,u];const d="bilinear"===r?1:0,[p,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+p],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class Zy{constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const r=t.length,s=t[t.length-1],a=n?"<":">";this.userCode=`\n      int getIndex(int i) {\n        ${n?`return ${s} -i - 1;`:"return i;"}\n      }\n\n      void main() {\n        ${xy(r)} coords = getOutputCoords();\n        int end = ${Qy(r,"coords")};\n        float val = 0.0;\n        for (int i = ${s} - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx ${a} end) {\n            continue;\n          }\n          if (idx == end && ${e}) {\n            continue;\n          }\n          ${Qy(r,"coords")} = idx;\n          val += getX(${function(t,e){if(1===t)return""+e;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}}function Qy(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class tb{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Ag.DENSE;const e=Fg(t),n=uy();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${ly(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class eb{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Ag.DENSE;const e=Fg(t),n=uy();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${ly(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class nb{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class rb{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class sb{constructor(t){this.variableNames=["A"],this.outTexUsage=Rg.DOWNLOAD;const e=uy();this.outputShape=t,this.userCode=`\n      ${hy}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class ab{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Rg.DOWNLOAD;const e=uy();this.outputShape=t,this.userCode=`\n      ${hy}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class ib{constructor(t,e,n=!1){this.variableNames=["A"];const r=uy(),[s,a]=e;this.outputShape=t;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${cy(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class ob{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=uy(),[s,a]=e;this.outputShape=t;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let u=0;u<=1;u++)for(let e=0;e<=1;e++){const n=2*u+e;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${e} < ${t[2]}) {\n            localCoords[2] += ${e};\n            if(localCoords[1] + ${u} < ${t[1]}) {\n              localCoords[1] += ${u};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${n}] = values[0];\n              } else if(offset == 1) {\n                result[${n}] = values[1];\n              } else if(offset == 2) {\n                result[${n}] = values[2];\n              } else {\n                result[${n}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${cy(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}class ub{constructor(t,e,n){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const s=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI;this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${t}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${n?r+".0":"1.0"};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}class lb{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class cb{constructor(t,e,n){this.variableNames=["A","indices"];const r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;const s=xy(this.rank),a=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let a=0;a<t.length;a++)s.push(a===e?`int(getIndices(${r[a]}))`:""+r[a]);return s.join()}(t,n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}class hb{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const r=xy(e.length),s=xy(n.length);this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${this.sliceDim>1?"strides[j]":"strides"};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function db(t,e,n,r,s,a,i){!function(t,e){const n=j().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0)throw new Error(`Requested texture size [${t}x${e}] is invalid.`);if(t>n||e>n)throw new Error(`Requested texture size [${t}x${e}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(n,r);const o=function(t,e){return qg(t,e,()=>t.createTexture(),"Unable to create WebGLTexture.")}(t,e),u=t.TEXTURE_2D;return Mg(t,e,()=>t.bindTexture(u,o)),Mg(t,e,()=>t.texParameteri(u,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)),Mg(t,e,()=>t.texParameteri(u,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),Mg(t,e,()=>t.texParameteri(u,t.TEXTURE_MIN_FILTER,t.NEAREST)),Mg(t,e,()=>t.texParameteri(u,t.TEXTURE_MAG_FILTER,t.NEAREST)),Mg(t,e,()=>t.texImage2D(u,0,s,n,r,0,a,i,null)),Mg(t,e,()=>t.bindTexture(t.TEXTURE_2D,null)),o}class pb{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=j().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){kg[t]=e}(e,t)):this.gl=Eg(e);let n="WEBGL_color_buffer_float";if(1===j().getNumber("WEBGL_VERSION")){const t="OES_texture_half_float";if(this.textureFloatExtension=Lg(this.gl,this.debug,"OES_texture_float"),Qg(this.gl,t))this.textureHalfFloatExtension=Lg(this.gl,this.debug,t);else if(j().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Qg(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=Lg(this.gl,this.debug,"EXT_color_buffer_half_float");else if(j().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Qg(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Qg(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=function(t,e){return function(t,e,n){const r=qg(t,e,()=>t.createBuffer(),"Unable to create WebGLBuffer");return Mg(t,e,()=>t.bindBuffer(t.ARRAY_BUFFER,r)),Mg(t,e,()=>t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW)),r}(t,e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl,this.debug),this.indexBuffer=function(t,e){return function(t,e,n){const r=qg(t,e,()=>t.createBuffer(),"Unable to create WebGLBuffer");return Mg(t,e,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)),Mg(t,e,()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)),r}(t,e,new Uint16Array([0,1,2,2,1,3]))}(this.gl,this.debug),this.framebuffer=function(t,e){return qg(t,e,()=>t.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl,this.debug),this.textureConfig=Og(this.gl,this.textureHalfFloatExtension)}get debug(){return j().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;Mg(t,this.debug,()=>t.finish()),Mg(t,this.debug,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),Mg(t,this.debug,()=>t.deleteFramebuffer(this.framebuffer)),Mg(t,this.debug,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),Mg(t,this.debug,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),Mg(t,this.debug,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=Dg(n,r);return db(t,e,a,i,s.internalFormatFloat,s.textureFormatFloat,t.FLOAT)}(this.gl,this.debug,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=Dg(n,r);return db(t,e,a,i,s.internalFormatHalfFloat,s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,this.debug,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=Dg(n,r);return db(t,e,a,i,t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}(this.gl,this.debug,t,e)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n,r){Mg(t,e,()=>t.bindTexture(t.TEXTURE_2D,n)),r.data instanceof Uint8Array?Mg(t,e,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r.width,r.height,0,t.RGBA,t.UNSIGNED_BYTE,r.data)):Mg(t,e,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r)),Mg(t,e,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,this.debug,t,e)}uploadDenseMatrixToTexture(t,e,n,r){this.throwIfDisposed(),function(t,e,n,r,s,a,i){let o,u,l;Mg(t,e,()=>t.bindTexture(t.TEXTURE_2D,n)),a instanceof Uint8Array?(o=new Uint8Array(r*s*4),u=t.UNSIGNED_BYTE,l=t.RGBA):(o=new Float32Array(r*s*4),u=t.FLOAT,l=i.internalFormatPackedFloat),o.set(a),Mg(t,e,()=>t.texImage2D(t.TEXTURE_2D,0,l,r,s,0,t.RGBA,u,o)),Mg(t,e,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,this.debug,t,e,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=_g(n,r);return db(t,e,a,i,s.internalFormatPackedHalfFloat,t.RGBA,s.textureTypeHalfFloat)}(this.gl,this.debug,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=_g(n,r);return db(t,e,a,i,s.internalFormatPackedFloat,t.RGBA,t.FLOAT)}(this.gl,this.debug,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(Ug(this.gl,this.debug,this.framebuffer),this.outputTexture=null),Mg(this.gl,this.debug,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n,r,s){const[a,i]=Dg(n,r),o=new Uint8Array(n*r*4);return Mg(t,e,()=>t.readPixels(0,0,a,i,s.downloadTextureFormat,t.UNSIGNED_BYTE,o)),new Float32Array(o.buffer)}(this.gl,this.debug,e,n,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,n,r,s,a){return function(t,e,n,r,s,a,i,o){const u=t,l=new Float32Array(function(t,e){const[n,r]=_g(t,e);return n*r*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}(this.gl,t,0,0,0,s,a)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const r=t,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const r=function(t,e,n,r,s){const a=t.createBuffer();Mg(t,e,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,a));const i=16*n*r;return Mg(t,e,()=>t.bufferData(t.PIXEL_PACK_BUFFER,i,t.STREAM_READ)),Mg(t,e,()=>t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,0)),Mg(t,e,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null)),a}(this.gl,this.debug,e,n);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(j().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=r.clientWaitSync(s,0,0);return t===r.ALREADY_SIGNALED||t===r.CONDITION_SATISFIED},e=s}else j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n,r){const s=new Float32Array(n*r*4);return Mg(t,e,()=>t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,s)),s}(this.gl,this.debug,e,n))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=function(t,e,n){const s=qg(t,e,()=>t.createShader(t.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(Mg(t,e,()=>t.shaderSource(s,n)),Mg(t,e,()=>t.compileShader(s)),!1===t.getShaderParameter(s,t.COMPILE_STATUS))throw function(t,e){const n=Bg.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);const s=+n[1],a=t.split("\n"),i=a.length.toString().length+2,o=a.map((t,e)=>r.rightPad((e+1).toString(),i)+t);let u=0;for(let r=0;r<o.length;r++)u=Math.max(o[r].length,u);const l=o.slice(0,s-1),c=o.slice(s-1,s),h=o.slice(s);console.log(l.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+r.rightPad(c[0],u),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}(n,t.getShaderInfoLog(s)),new Error("Failed to compile fragment shader.");return s}(e,this.debug,t),s=function(t,e){const n=uy();return function(t,e,n){const r=qg(t,e,()=>t.createShader(t.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(Mg(t,e,()=>t.shaderSource(r,n)),Mg(t,e,()=>t.compileShader(r)),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(r)),new Error("Failed to compile vertex shader.");return r}(t,e,`${n.version}\n    precision highp float;\n    ${n.attribute} vec3 clipSpacePos;\n    ${n.attribute} vec2 uv;\n    ${n.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(e,this.debug),a=function(t,e){return qg(t,e,()=>t.createProgram(),"Unable to create WebGLProgram.")}(e,this.debug);return Mg(e,this.debug,()=>e.attachShader(a,s)),Mg(e,this.debug,()=>e.attachShader(a,n)),function(t,e,n){if(Mg(t,e,()=>t.linkProgram(n)),!1===t.getProgramParameter(n,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Failed to link vertex and fragment shaders.")}(e,this.debug,a),this.debug&&Pg(e,this.debug,a),this.vertexAttrsAreBound||(this.setProgram(a),this.vertexAttrsAreBound=function(t,e,n,r){return Mg(t,e,()=>t.bindBuffer(t.ARRAY_BUFFER,r)),Wg(t,e,n,"clipSpacePos",r,3,20,0)&&Wg(t,e,n,"uv",r,2,20,12)}(e,this.debug,this.program,this.vertexBuffer)),a}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&Mg(this.gl,this.debug,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&Pg(this.gl,this.debug,this.program),Mg(this.gl,this.debug,()=>this.gl.useProgram(t))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n,r){return qg(t,e,()=>t.getUniformLocation(n,r),'uniform "'+r+'" not present in program.')}(this.gl,this.debug,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),Mg(this.gl,this.debug,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(t,e,n,r,s,a){Mg(t,e,()=>function(t,e,n,r){(function(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(t,r),Mg(t,e,()=>t.activeTexture(t.TEXTURE0+r)),Mg(t,e,()=>t.bindTexture(t.TEXTURE_2D,n))}(t,e,r,a)),Mg(t,e,()=>t.uniform1i(s,a))}(this.gl,this.debug,0,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[r,s]=_g(e,n);this.setOutputMatrixTextureDriver(t,r,s)}setOutputMatrixWriteRegion(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Pg(this.gl,this.debug,this.program),Gg(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),Mg(t,this.debug,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Mg(this.gl,this.debug,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Lg(this.gl,this.debug,2===j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await r.repeatedTry(()=>this.disposed||this.isQueryAvailable(t,j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function(t){let e=0;for(;e<t.length&&t[e]();++e);return e-1}(this.itemsToPoll.map(t=>t.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||r.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),Vg(this.gl,this.debug,t,this.framebuffer),this.debug&&Gg(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Vg(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&Gg(this.gl)):Ug(this.gl,this.debug,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const r=this.gl;Vg(r,this.debug,t,this.framebuffer),this.debug&&Gg(r),this.outputTexture=t,Mg(r,this.debug,()=>r.viewport(0,0,e,n)),Mg(r,this.debug,()=>r.scissor(0,0,e,n))}setOutputMatrixWriteRegionDriver(t,e,n,r){this.throwIfDisposed(),Mg(this.gl,this.debug,()=>this.gl.scissor(t,e,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function fb(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach((t,n)=>{const s=t.logicalShape,a=e[n],i=a.shape;if(!r.arraysEqual(s,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${i} must match`);if(t.isUniform&&a.isUniform)return;const o=t.texShape,u=a.isUniform?null:a.texData.texShape;if(!r.arraysEqual(o,u))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${u} must match`)})}class mb{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:h}=n,{left:d,top:p}=o,f=s*r,m=uy(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let w=0;w<=1;w++)for(let n=0;n<=1;n++)x+=`\n          blockIndex = rc.y + ${n};\n          pos = rc.x + ${w};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${i} - ${p};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${e[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${a}. - ${d}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${e[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*w+n}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*w+n}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}class gb{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let o;this.outputShape=t;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class yb{constructor(t,e,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class bb{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let o;this.outputShape=t;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}class xb{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.effectiveFilterHeight,n=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${n-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e};\n          wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${e*n-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${n} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class wb{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.effectiveFilterDepth,n=t.effectiveFilterHeight,r=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${e-1-t.padInfo.front}, ${n-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${e};\n           wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${n};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${r};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${e*n*r-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${n} * ${r} +\n                  wR * ${r} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class vb{constructor(t,e,n=!1,r=!1,s=!1,a=null,i=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const o=Math.ceil((n?t[1]:t[2])/2),u=n?"i * 2, rc.y":"rc.y, i * 2",l=r?"rc.z, i * 2":"i * 2, rc.z",c=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],h=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let d="",p="";a&&(d=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${a}\n        }`:`vec4 activation(vec4 x) {\n          ${a}\n        }`,p="result = activation(result);");const f=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${d}\n\n      const float sharedDimension = ${o}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${o}; i++) {\n          vec4 a = getMatrixA(rc.x, ${u});\n          vec4 b = getMatrixB(rc.x, ${l});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${c[0]} * ${h[0]});\n          result += (${c[1]} * ${h[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${f}\n\n        ${p}\n\n        setOutput(result);\n      }\n    `}}class Cb{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class Sb{constructor(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class Nb{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=oy("rc",e),r=xy(e),s=function(t,e,n){if(1===t)return"rc > "+e[0];let r="";for(let s=t-2;s<t;s++)r+=`${n[s]} >= ${e[s]}`,s<t-1&&(r+="||");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){const n=t.length,r=function(t,e){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<t;n++)a=e[e.length-1-n]+","+a;n.push(a)}return n}(n,e);return 1===n?`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class Ib{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,s=xy(r),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class kb{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,s=xy(r),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=oy("rc",r),u=oy("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[s+" rc = outputLoc;",`${o[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${l}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let f=0,m=1===r?2:4;f<m;f++)p+=`\n        ${h[f]}\n        if (${d}) {\n          result[${f}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${f}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;p+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}class $b{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,o=t.strideWidth,u=t.dilationHeight,l=t.dilationWidth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.top,p=t.padInfo.left;this.outputShape=t.outShape;const f="avg"===e;let m="0.0";if(f||(m="-1.0 / 1e-20"),n)return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`:`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let g=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(g="avgValue / count");const y=4*Math.floor(a/4),b=a%4,x=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${m};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${m});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${y}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${x}\n          }\n\n          int xC = xCCorner + ${y};\n          if (${1===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${x}\n          } else if (${2===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${x}\n          } else if (${3===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${x}\n          }\n        }\n        setOutput(${g});\n      }\n    `}}class Eb{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,o=t.strideHeight,u=t.strideWidth,l=t.dilationDepth,c=t.dilationHeight,h=t.dilationWidth,d=t.effectiveFilterDepth,p=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=t.padInfo.front,g=t.padInfo.top,y=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let x="0.0";if(b||(x="-1.0 / 1e-20"),n)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const v=4*Math.floor(a/4),C=a%4,S=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${S}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${S}\n            } else if (${2===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${S}\n            } else if (${3===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${S}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}class Ab{constructor(t,e){this.variableNames=["x"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=Math.ceil(s/n);this.outputShape=[r,a];let i="0.0",o="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",o="min"):"max"===e&&(i="-1.0 / 1e-20",o="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,d="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";s%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}class Rb{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let s=0;s<4;s++){let t="thisRC = rc;";s%2==1&&(t+="thisRC.z += 1;"),s>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${s>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${s}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${s>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${ly(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${cy(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Tb{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class Db{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Fb{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]},\n          ${u[1]/l[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${o-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class _b{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class Ob{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class Mb{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const r=t.map((n,r)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),s=xy(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class zb{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const r=oy("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=xy(n);function o(n){const r=t.map((r,s)=>function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${r[n]} - 1`:""+r[n]}(s,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return o(t)}(r.slice())};\n          if(${s}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",o(t)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class Lb{constructor(t,e,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=xy(s.length),u=xy(a.length);let l="";1===n?l="i":2===n&&(l="i, j");let c="";1===r?c="i":2===r&&(c="i, coords[1]"),this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(getIndices(${l}));\n              flattenedIndex += index * ${e>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${c});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class Bb{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=t.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Pb{constructor(t,e,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<e.length;r++)i.push(""+n[r]),r<t&&a.push(""+n[r]);r=a.join(),s=i.join()}const a=xy(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}class Wb{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=xy(this.rank),n=`uniform int start[${this.rank}];`,r=function(t){if(1===t)return"sourceLoc";if(t<=6)return Vb.slice(0,t).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let s;s=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((t,e)=>`sourceLoc.${Vb[e]} = start[${e}] + coords.${Vb[e]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const Vb=["x","y","z","w","u","v"];class Ub{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=xy(this.rank),n=oy("coords",this.rank),r=oy("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((t,e)=>`start[${e}]`).join()});`:t.map((t,e)=>`${r[e]} = ${n[e]} + start[${e}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class Gb{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=xy(n.length),a=xy(n.length);let i="";if(1===r)i="coords * strides + begin";else{let t=0;i=n.map((e,r)=>(t++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${t-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${s} begin = ${s}(${t});\n      ${s} strides = ${s}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}class qb{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const r=Hb(e,n),s=jb(t,r,n);if(s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]),this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();const t=this.freeTextures[s].shift();return this.usedTextures[s].push(t),t}let a;return this.numUsedTextures++,this.log(),r===Tg.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===Tg.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===Tg.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===Tg.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===Tg.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(a),a}releaseTexture(t,e,n,r){if(null==this.freeTextures)return;const s=jb(e,Hb(n,r),r);s in this.freeTextures||(this.freeTextures[s]=[]),this.freeTextures[s].push(t),this.numFreeTextures++,this.numUsedTextures--;const a=this.usedTextures[s],i=a.indexOf(t);if(i<0)throw new Error("Cannot release a texture that was never provided by this texture manager");a.splice(i,1),this.log()}log(){this.logEnabled&&console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`)}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});for(const t in this.usedTextures)this.usedTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}}}function Hb(t,e){if(t===Rg.UPLOAD)return Tg.PACKED_2X2_FLOAT32;if(t===Rg.RENDER||null==t)return function(t){return j().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?Tg.PACKED_2X2_FLOAT32:Tg.UNPACKED_FLOAT32:t?Tg.PACKED_2X2_FLOAT16:Tg.UNPACKED_FLOAT16}(e);if(t===Rg.DOWNLOAD||t===Rg.PIXELS)return Tg.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function jb(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class Kb{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let a=0;a<n.length;a++)n[a]=t[a]*e[a];this.outputShape=n,this.rank=n.length;const r=xy(this.rank),s=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let s=0;s<t.length;s++)r.push(`imod(${n[s]}, ${t[s]})`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}class Xb{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Yb="return abs(x);",Jb="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",Zb="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Qb=`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${b.SELU_SCALEALPHA};\n  float scale = ${b.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`,tx="return -x;",ex="return ceil(x);",nx="return floor(x);",rx="return exp(x);",sx="return exp(x) - 1.0;",ax=`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${b.ERF_P};\n  float a1 = ${b.ERF_A1};\n  float a2 = ${b.ERF_A2};\n  float a3 = ${b.ERF_A3};\n  float a4 = ${b.ERF_A4};\n  float a5 = ${b.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`,ix="return x;",ox="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",ux="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",lx="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class cx{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class hx{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=oy("rc",e),r=xy(e),s=function(t,e){if(1===t)return"rc";let n="";for(let r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const{segment_util:dx}=b,px=x.split,fx=x.tile,mx=x.topkImpl,gx=x.whereImpl,yx={};function bx(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?ox:Jb;if("elu"===t)return e?lx:"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===t)return e?ux:Zb;if("prelu"===t)return e?Fy:Ty;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class xx extends uc{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!j().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=Eg(j().getNumber("WEBGL_VERSION"));this.binaryCache=((e=j().getNumber("WEBGL_VERSION"))in yx||(yx[e]={}),yx[e]),this.gpgpu=new pb(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new qb(this.gpgpu),this.numMBBeforeWarning=null==j().global.screen?1024:j().global.screen.height*j().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new oc(this,Ei())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,n){if(j().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:Rg.UPLOAD}),r}move(t,e,n,r){if(j().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:r,values:e,usage:Rg.UPLOAD})}readSync(t){const e=this.texData.get(t),{values:n,dtype:s,complexTensors:a,slice:i,shape:o,isPacked:u}=e;if(null!=i){let e;e=u?new cx(o,ix):new Xb(o,ix);const n=this.runWebGLProgram(e,[{dataId:t,shape:o,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeData(n.dataId),r}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===s)return n;const l=null!=this.activeTimers;let c,h;if(l&&(c=r.now()),"complex64"===s){const t=a.real.dataSync(),e=a.imag.dataSync();h=b.mergeRealAndImagArrays(t,e)}else h=this.getValuesFromTexture(t);return l&&(this.downloadWaitMs+=r.now()-c),this.convertAndCacheOnCPU(t,h)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise(t=>e.push(t))}const e=this.texData.get(t),{values:n,shape:s,slice:a,dtype:i,complexTensors:o,isPacked:u}=e;if(null!=a){let e;e=u?new cx(s,ix):new Xb(s,ix);const n=this.runWebGLProgram(e,[{dataId:t,shape:s,dtype:i}],i),r=this.read(n.dataId);return this.disposeData(n.dataId),r}if(null!=n)return this.convertAndCacheOnCPU(t);if(!j().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===j().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,c,h=null;if("complex64"!==i&&j().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(t);const e=this.texData.get(l.dataId);h=this.gpgpu.createBufferFromTexture(e.texture,...Fg(s))}if(this.pendingRead.set(t,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const t=await Promise.all([o.real.data(),o.imag.data()]);c=b.mergeRealAndImagArrays(t[0],t[1])}else if(null==h)c=this.getValuesFromTexture(t);else{const t=r.sizeFromShape(s);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,t)}null!=l&&this.disposeData(l.dataId);const d=this.convertAndCacheOnCPU(t,c),p=this.pendingRead.get(t);return this.pendingRead.delete(t),p.forEach(t=>t(d)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),d}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const n=t[e];if(!zg(n)){if(j().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:s}=this.texData.get(t),a=r.sizeFromShape(e);if(j().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...Fg(e)).subarray(0,a);return this.disposeData(n.dataId),s}const i=j().getBool("WEBGL_PACK")&&!0===s,o=i?Kg(e):e,u=i?new ab(o):new sb(o),l=this.runWebGLProgram(u,[{shape:o,dtype:n,dataId:t}],"float32"),c=this.texData.get(l.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,a);return this.disposeData(l.dataId),h}async time(t){const e=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,t();const a=r.flatten(this.activeTimers.map(t=>t.query)).filter(t=>null!=t),i=r.flatten(this.activeTimers.map(t=>t.name)).filter(t=>null!=t);this.activeTimers=e,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(a);o.kernelMs=r.sum(t),o.getExtraProfileInfo=()=>t.map((t,e)=>({name:i[e],ms:t})).map(t=>`${t.name}: ${t.ms}`).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}}startTimer(){return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:r.now(),endMs:null}}endTimer(t){return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=r.now(),t)}async getQueryTime(t){return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.waitForQueryAndGetTime(t):t.endMs-t.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;this.releaseGPUData(t);const{complexTensors:e}=this.texData.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(t),o=i&&i.origDataId||t,u=this.dataRefCount.get(o);u>1?this.dataRefCount.set(o,u-1):(this.dataRefCount.delete(o),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(e,r,s,a)));const l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return j().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Ei().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){return null!=this.getCPUBackend()&&t.every(t=>null==this.texData.get(t.dataId).texture&&r.sizeFromShape(t.shape)<e)}getGPGPUContext(){return this.gpgpu}complex(t,e){const n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Ei().keep(t.clone()),imag:Ei().keep(e.clone())},n}real(t){return this.texData.get(t.dataId).complexTensors.real.clone()}imag(t){return this.texData.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===r.sizeFromShape(n))return Ge([],n,t.dtype);const{isPacked:s}=this.texData.get(t.dataId),a=i.isSliceContinous(t.shape,e,n);if(s||!a){const r=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ub(n):new Wb(n),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[t],null,s)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)}shallowSlice(t,e,n){const r=this.texData.get(t.dataId),s=this.makeOutput(n,t.dtype),a=this.texData.get(s.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;let o=i.computeFlatOffset(e,t.strides);r.slice&&(o+=r.slice.flatOffset),a.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||t.dataId};const u=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,u+1),s}stridedSlice(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);const s=i.computeOutShape(e,n,r);if(s.some(t=>0===t))return Ge([],s);const a=new Gb(e,r,s);return this.compileAndRun(a,[t])}reverse(t,e){const n=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new zb(t.shape,e):new Mb(t.shape,e);return this.compileAndRun(n,[t])}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>Ue(t)),r=t.map(t=>Ve(t));return We(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>j().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(t.length/2),r=this.concat(t.slice(0,n),e),s=this.concat(t.slice(n),e);return this.concat([r,s],e)}if(j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){const n=new By(t.map(t=>t.shape),e);return this.compileAndRun(n,t)}const n=b.computeOutShape(t.map(t=>t.shape),e),s=t.map(t=>t.as2D(-1,r.sizeFromShape(t.shape.slice(e)))),a=new Ly(s.map(t=>t.shape));return this.compileAndRun(a,s).reshape(n)}neg(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(j().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,tx,t.dtype);const e=new Xb(t.shape,tx);return this.compileAndRun(e,[t])}batchMatMul(t,e,n,r){const s=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],[o,,]=t.shape;if((1===s||1===a)&&i>1e3){n&&(t=Qr(t,[0,2,1])),r&&(e=Qr(e,[0,2,1]));const s=1===a?t:t.as3D(o,i,1),u=1===a?2:1,l=1===a?e.as3D(o,1,i):e;return this.multiply(s,l).sum(u,!0)}const u=ye(t.dtype,e.dtype),l=new vb(t.shape,[o,s,a],n,r);return this.compileAndRun(l,[t,e],u)}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){const o=n?t.shape[2]:t.shape[1],u=r?e.shape[1]:e.shape[2],[l,,]=t.shape,c=ye(t.dtype,e.dtype),h=null!=s,d=null!=i,p=a?bx(a,!0):null,f=new vb(t.shape,[l,o,u],n,r,h,p,d),m=[t,e];return s&&m.push(s),i&&m.push(i),this.compileAndRun(f,m,c)}multiply(t,e){if("complex64"===t.dtype){const n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),s=new $y("return areal * breal - aimag * bimag;",t.shape,e.shape),a=new $y("return areal * bimag + aimag * breal;",t.shape,e.shape),i=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],o=this.compileAndRun(s,i),u=this.compileAndRun(a,i),l=this.complex(o,u);return o.dispose(),u.dispose(),l}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(j().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Ry,t.dtype);const n=new Dy(Ry,t.shape,e.shape);return this.compileAndRun(n,[t,e],t.dtype)}batchNorm(t,e,n,r,s,a){const i=[t,e,n];let o=null;null!=r&&(o=r.shape,i.push(r));let u=null;if(null!=s&&(u=s.shape,i.push(s)),j().getBool("WEBGL_PACK_NORMALIZATION")){const r=new ky(t.shape,e.shape,n.shape,o,u,a);return this.compileAndRun(r,i)}const l=new Iy(t.shape,e.shape,n.shape,o,u,a);return this.compileAndRun(l,i)}localResponseNormalization4D(t,e,n,r,s){const a=j().getBool("WEBGL_PACK_NORMALIZATION")?new bb(t.shape,e,n,r,s):new gb(t.shape,e,n,r,s);return this.compileAndRun(a,[t])}LRNGrad(t,e,n,r,s,a,i){const o=new yb(e.shape,r,s,a,i);return this.compileAndRun(o,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map(t=>r.decodeString(t)),s=un(t.shape,t.dtype,n);return fx(s,e)}const n=new Kb(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,n){const r=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new kb(t.shape,e,n):new Ib(t.shape,e,n);return this.compileAndRun(r,[t])}gather(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);const r=new cb(t.shape,e.size,n);return this.compileAndRun(r,[t,e])}batchToSpaceND(t,e,n){r.assert(t.rank<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const s=e.reduce((t,e)=>t*e),a=b.getReshaped(t.shape,e,s),i=b.getPermuted(a.length,e.length),o=b.getReshapedPermuted(t.shape,e,s),u=b.getSliceBeginCoords(n,e.length),l=b.getSliceSize(o,n,e.length);return Qr(t.reshape(a),i).reshape(o).slice(u,l)}spaceToBatchND(t,e,n){r.assert(t.rank<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const s=e.reduce((t,e)=>t*e),a=[[0,0]];a.push(...n);for(let r=1+e.length;r<t.shape.length;++r)a.push([0,0]);const i=t.pad(a),o=b.getReshaped(i.shape,e,s,!1),u=b.getPermuted(o.length,e.length,!1),l=b.getReshapedPermuted(i.shape,e,s,!1);return Qr(i.reshape(o),u).reshape(l)}reduce(t,e,n){const r=t.shape[0],s=t.shape[1],a=b.computeOptimalWindowSize(s),i=new Ab({windowSize:a,inSize:s,batchSize:r},e),o=this.compileAndRun(i,[t],n);return 1===o.shape[1]?o:this.reduce(o,e,n)}argReduce(t,e,n=null){let r=t.shape[0],s=t.shape[1];null!=n&&(r=n.shape[0],s=n.shape[1]);const a=b.computeOptimalWindowSize(s),i=new ay({windowSize:a,inSize:s,batchSize:r},e,null==n),o=[t];null!=n&&o.push(n);const u=this.compileAndRun(i,o,"int32");return 1===u.shape[1]?u:this.argReduce(t,e,u)}argReducePacked(t,e,n=null){const r=null!=n?n.shape:t.shape,s=b.computeOptimalWindowSize(r[r.length-1]),a=new Cy(r,s,e,null==n),i=this.compileAndRun(a,null==n?[t]:[t,n],"int32");return i.rank===t.rank?this.argReducePacked(t,e,i):i}sum(t,e){b.assertAxesAreInnerMostDims("sum",e,t.rank);const[n,s]=b.computeOutAndReduceShapes(t.shape,e),a=r.sizeFromShape(s),i=t.as2D(-1,a),o=be(t.dtype);return this.reduce(i,"sum",o).reshape(n)}prod(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);const[n,s]=b.computeOutAndReduceShapes(t.shape,e),a=r.sizeFromShape(s),i=t.as2D(-1,a),o=be(t.dtype);return this.reduce(i,"prod",o).reshape(n)}unsortedSegmentSum(t,e,n){let s=0;const a=b.getAxesPermutation([s],t.rank);let i=t;null!=a&&(i=Qr(t,a),s=b.getInnerMostAxes(1,t.rank)[0]);const o=dx.computeOutShape(i.shape,s,n),u=r.sizeFromShape([i.shape[s]]),l=i.as2D(-1,u),c=be(t.dtype);let h=this.segOpCompute(l,"unsortedSegmentSum",e,c,n).reshape(o);return null!=a&&(h=Qr(h,b.getUndoAxesPermutation(a))),h}segOpCompute(t,e,n,r,s){const a=t.shape[0],i=t.shape[1],o=dx.segOpComputeOptimalWindowSize(i,s),u=new Bb({windowSize:o,inSize:i,batchSize:a,numSegments:s},e),l=this.compileAndRun(u,[t,n],r);return l.shape[1]===s?l:(n=rn(0,s).tile([i/o]),this.segOpCompute(l,e,n,r,s))}argMinMaxReduce(t,e,n){const s=[e];if(b.assertAxesAreInnerMostDims("arg"+n.charAt(0).toUpperCase()+n.slice(1),s,t.rank),!j().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,a]=b.computeOutAndReduceShapes(t.shape,s),i=r.sizeFromShape(a),o=t.as2D(-1,i);return this.argReduce(o,n).reshape(e)}return this.argReducePacked(t,n)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,r){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=new Zy(t.shape,n,r);return this.compileAndRun(s,[t])}equal(t,e){if(j().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");const n=new Dy("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}notEqual(t,e){if(j().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");const n=new Dy("return float(a != b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}less(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(j().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");const n=new Dy("return float(a < b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}lessEqual(t,e){if(j().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");const n=new Dy("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greater(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(j().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");const n=new Dy("return float(a > b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greaterEqual(t,e){if(j().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const n=new Dy("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalNot(t){const e=new Xb(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(t,e){if(j().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const n=new Dy("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalOr(t,e){if(j().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const n=new Dy("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}select(t,e,n){const r=new Pb(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],ye(e.dtype,n.dtype))}where(t){b.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return gx(t.shape,e)}topk(t,e,n){const r=t.dataSync();return mx(r,t.shape,t.dtype,e,n)}min(t,e){b.assertAxesAreInnerMostDims("min",e,t.rank);const[n,s]=b.computeOutAndReduceShapes(t.shape,e),a=r.sizeFromShape(s),i=t.as2D(-1,a);return this.reduce(i,"min",i.dtype).reshape(n)}minimum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);const n=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _y("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Dy("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}mod(t,e){const n=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _y("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Dy("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}maximum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);const n=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _y("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Dy("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}all(t,e){b.assertAxesAreInnerMostDims("all",e,t.rank);const[n,s]=b.computeOutAndReduceShapes(t.shape,e),a=r.sizeFromShape(s),i=t.as2D(-1,a);return this.reduce(i,"all",i.dtype).reshape(n)}any(t,e){b.assertAxesAreInnerMostDims("any",e,t.rank);const[n,s]=b.computeOutAndReduceShapes(t.shape,e),a=r.sizeFromShape(s),i=t.as2D(-1,a);return this.reduce(i,"any",i.dtype).reshape(n)}floorDiv(t,e){if(j().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");const n=new Dy("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(n,[t,e],"int32")}add(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Ey);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);const n=ye(t.dtype,e.dtype);if(j().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Ey,n);const r=new Dy(Ey,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)}packedUnaryOp(t,e,n){const r=new cx(t.shape,e);return this.compileAndRun(r,[t],n)}packedBinaryOp(t,e,n,r,s=!1){const a=new _y(n,t.shape,e.shape,s);return this.compileAndRun(a,[t,e],r)}complexSeparableBinaryOp(t,e,n){const r=this.texData.get(t.dataId),s=this.texData.get(e.dataId),[a,i]=[[r.complexTensors.real,s.complexTensors.real],[r.complexTensors.imag,s.complexTensors.imag]].map(r=>{const[s,a]=r,i=this.makeComplexComponentTensorInfo(t,s),o=this.makeComplexComponentTensorInfo(e,a),u=new Dy(n,t.shape,e.shape);return this.compileAndRun(u,[i,o],ye(s.dtype,a.dtype))}),o=this.complex(a,i);return a.dispose(),i.dispose(),o}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>j().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}const e=t.map(t=>t.dtype).reduce((t,e)=>ye(t,e)),n=t.map(t=>t.shape),r=j().getBool("WEBGL_PACK")?new sy(t[0].shape,n):new ry(t[0].shape,n);return this.compileAndRun(r,t,e)}subtract(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Ay);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);const n=ye(t.dtype,e.dtype);if(j().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Ay,t.dtype);const r=new Dy(Ay,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)}pow(t,e){const n=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _y("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Dy("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),r=ye(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],r)}ceil(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(j().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,ex,t.dtype);const e=new Xb(t.shape,ex);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(j().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,nx,t.dtype);const e=new Xb(t.shape,nx);return this.compileAndRun(e,[t])}sign(t){const e=new Xb(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new Xb(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new Xb(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new Xb(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new Xb(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(j().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,rx,t.dtype);const e=new Xb(t.shape,rx);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(j().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,sx,t.dtype);const e=new Xb(t.shape,sx);return this.compileAndRun(e,[t])}softmax(t,e){const n=r.parseAxisParam([e],t.shape),s=ho(t,n),a=b.expandShapeToKeepDim(s.shape,n),i=this.subtract(t,s.reshape(a)),o=this.exp(i),u=this.sum(o,n).reshape(a);return bn(o,u)}log(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(j().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new Xb(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new Xb(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new Xb(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);const e=new Xb(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new Xb(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=j().getBool("WEBGL_PACK")?new cx(t.shape,ox):new Xb(t.shape,Jb),this.compileAndRun(e,[t])}relu6(t){let e;return e=j().getBool("WEBGL_PACK")?new cx(t.shape,ux):new Xb(t.shape,Zb),this.compileAndRun(e,[t])}prelu(t,e){const n=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _y(Fy,t.shape,e.shape):new Dy(Ty,t.shape,e.shape);return this.compileAndRun(n,[t,e])}elu(t){if(j().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,lx,t.dtype);const e=new Xb(t.shape,"return (x >= 0.0) ? x : (exp(x) - 1.0);");return this.compileAndRun(e,[t])}eluDer(t,e){const n=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _y("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new Dy("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}selu(t){const e=new Xb(t.shape,Qb);return this.compileAndRun(e,[t])}int(t){const e=new Xb(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")}clip(t,e,n){let r;r=j().getBool("WEBGL_PACK_CLIP")?new My(t.shape):new Oy(t.shape);const s=r.getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,s)}abs(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(j().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Yb,t.dtype);const e=new Xb(t.shape,Yb);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new zy(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)}sigmoid(t){const e=new Xb(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new Xb(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}sin(t){const e=new Xb(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(e,[t])}cos(t){const e=new Xb(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(e,[t])}tan(t){const e=new Xb(t.shape,"return tan(x);");return this.compileAndRun(e,[t])}asin(t){const e=new Xb(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new Xb(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new Xb(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}atan2(t,e){const n=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _y("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Dy("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}sinh(t){const e=new Xb(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new Xb(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new Xb(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new Xb(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new Xb(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new Xb(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new Xb(t.shape,ax);return this.compileAndRun(e,[t])}step(t,e){const n=new Xb(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,e,n,s,a,i){const o=t.shape,u=this.texData.get(t.dataId),l="channelsLast"===n.dataFormat,c=o[2]%2!=0&&!!u.isPacked;if((1==o[0]*o[1]*o[2]||1===n.outChannels)&&n.inChannels>1e3||!j().getBool("WEBGL_LAZILY_UNPACK")||!j().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!c){const r=this.reshape(t,[1,l?o[0]*o[1]*o[2]:o[0]*o[2]*o[3],n.inChannels]),u=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:r,b:u,transposeA:!1,transposeB:!1,bias:s,activation:a,preluActivationWeights:i}),n.outShape)}const h={dataId:t.dataId,shape:[1,l?o[0]*o[1]*(o[2]+1):o[0]*o[2]*(o[3]+1),n.inChannels],dtype:t.dtype},d=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,r.assert(Yg(u.shape,h.shape),()=>`packed reshape ${u.shape} to ${h.shape} isn't free`);const p=this.reshape(e,[1,n.inChannels,n.outChannels]),f=this.fusedBatchMatMul({a:h,b:p,transposeA:!1,transposeB:!1,bias:s,activation:a,preluActivationWeights:i}),m=this.texData.get(f.dataId);return r.assert(m.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=d,m.shape=n.outShape,Ei().makeTensorFromDataId(f.dataId,n.outShape,f.dtype)}conv2dWithIm2Row(t,e,n,r,s,a){const{filterWidth:i,filterHeight:o,inChannels:u,outWidth:l,outHeight:c,dataFormat:h}=n,d="channelsLast"===h,p=i*o*u,f=c*l,m=[p,f],g=t.squeeze([0]),y=e.reshape([1,p,-1]),b=new mb(m,g.shape,n),x=this.compileAndRun(b,[g]).reshape([1,m[0],m[1]]),w=null!=r,v=null!=a,C=s?bx(s,!0):null,S=new vb(x.shape,[1,f,n.outChannels],!0,!1,w,C,v),N=[x,y];return r&&N.push(r),v&&N.push(a),this.compileAndRun(S,N).reshape(d?[1,c,l,n.outChannels]:[1,n.outChannels,c,l])}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n,r,s,a);if(j().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n,r,s,a);const i=null!=r,o=null!=a,u=s?bx(s,!1):null,l=new jy(n,i,u,o),c=[t,e];return r&&c.push(r),a&&c.push(a),this.compileAndRun(l,c)}conv2d(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(j().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);const r=new jy(n);return this.compileAndRun(r,[t,e])}conv2dDerInput(t,e,n){const r=new Vy(n);return this.compileAndRun(r,[t,e])}conv2dDerFilter(t,e,n){const r=new Wy(n);return this.compileAndRun(r,[t,e])}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){const i=j().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,o=s?bx(s,i):null,u=[t,e],l=null!=r,c=null!=a;let h;return l&&u.push(r),c&&u.push(a),i?(h=new Yy(n,l,o,c),this.compileAndRun(h,u)):(h=new Xy(n,l,o,c),this.compileAndRun(h,u))}depthwiseConv2D(t,e,n){let r;return j().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new Yy(n),this.compileAndRun(r,[t,e])):(r=new Xy(n),this.compileAndRun(r,[t,e]))}depthwiseConv2DDerInput(t,e,n){const r=new Hy(n);return this.compileAndRun(r,[t,e])}depthwiseConv2DDerFilter(t,e,n){const r=new qy(n);return this.compileAndRun(r,[t,e])}conv3d(t,e,n){const r=new Ky(n);return this.compileAndRun(r,[t,e])}conv3dDerInput(t,e,n){const r=new Gy(n);return this.compileAndRun(r,[t,e])}conv3dDerFilter(t,e,n){const r=new Uy(n);return this.compileAndRun(r,[t,e])}maxPool(t,e){const n=new $b(e,"max",!1);return this.compileAndRun(n,[t])}avgPool(t,e){const n=new $b(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}maxPoolBackprop(t,e,n,r){const s=new $b(r,"max",!0),a=this.compileAndRun(s,[e]),i=new xb(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}avgPoolBackprop(t,e,n){const r=new Sy(n);return this.compileAndRun(r,[t],e.dtype)}cast(t,e){return b.castTensor(t,e,this)}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let u=0;u<t.rank;u++)u!==e&&(r[s++]=t.shape[u]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let u=0;u<o.length;u++)a[e]=u,o[u]=this.slice(t,a,i).reshape(r);return o}avgPool3d(t,e){const n=new Eb(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const r=new Ny(n);return this.compileAndRun(r,[t],e.dtype)}maxPool3d(t,e){const n=new Eb(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,r){const s=new Eb(r,"max",!0),a=this.compileAndRun(s,[e]),i=new wb(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}reshape(t,e){const n=this.texData.get(t.dataId);if(n.isPacked&&!Yg(t.shape,e)&&(null===n.texture||!Yg(n.shape,e))){const n=this.packedReshape(t,e);return Ei().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}return b.reshapeTensor(t,e)}resizeBilinear(t,e,n,r){const s=j().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Fb(t.shape,e,n,r):new Db(t.shape,e,n,r);return this.compileAndRun(s,[t],"float32")}resizeBilinearBackprop(t,e,n){const r=new Tb(t,e,n);return this.compileAndRun(r,[t])}resizeNearestNeighbor(t,e,n,r){const s=new Ob(t.shape,e,n,r);return this.compileAndRun(s,[t])}resizeNearestNeighborBackprop(t,e,n){const r=new _b(t,e,n);return this.compileAndRun(r,[t])}multinomial(t,e,n,r){const s=e?t:yu(t),a=new Cb(s.shape[0],s.shape[1],n),i=a.getCustomSetupFunc(r);return this.compileAndRun(a,[s],"int32",i)}oneHot(t,e,n,r){const s=new Sb(t.size,e,n,r);return this.compileAndRun(s,[t])}diag(t){const e=new rb(t.size);return this.compileAndRun(e,[t])}cropAndResize(t,e,n,r,s,a){const i=new Jy(t.shape,e.shape,r,s,a);return this.compileAndRun(i,[t,e,n],"float32")}depthToSpace(t,e,n){r.assert(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const s=t.shape[0],a=("NHWC"===n?t.shape[1]:t.shape[2])*e,i=("NHWC"===n?t.shape[2]:t.shape[3])*e,o=("NHWC"===n?t.shape[3]:t.shape[1])/(e*e),u=new nb("NHWC"===n?[s,a,i,o]:[s,o,a,i],e,n);return this.compileAndRun(u,[t])}split(t,e,n){return px(t,e,n)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=b.calculateShapes(e,t,n),u=[o/a,a],l=t.reshape([s,r]),c=e.reshape([s,a]);if(0===o)return b.reshapeTensor(Ge([]),n);const h=He(0),d=new Lb(s,r,l.rank,c.rank,i,u);return this.compileAndRun(d,[c,l,h]).reshape(n)}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,strides:i,outputSize:o}=b.calculateShapes(e,t,n),u=new Lb(a,s,t.rank,e.rank,i,[o,1],!1);return this.compileAndRun(u,[e,t,r]).reshape(n)}fft(t){return this.fftImpl(t,!1)}ifft(t){return this.fftImpl(t,!0)}fftImpl(t,e){const n=this.texData.get(t.dataId),r=new ub("return real * expR - imag * expI;",t.shape,e),s=new ub("return real * expI + imag * expR;",t.shape,e),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],i=this.compileAndRun(r,a),o=this.compileAndRun(s,a),u=this.complex(i,o).as2D(t.shape[0],t.shape[1]);return i.dispose(),o.dispose(),u}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=b.prepareAndValidate(t,e),u=e.reshape([a,r]),l=t.reshape([t.size/i,i]),c=new hb(r,o,[a,i]);return this.compileAndRun(c,[l,u]).reshape(s)}fill(t,e,n){if("string"===(n=n||r.inferDtype(e))){const s=r.getArrayFromDType(n,r.sizeFromShape(t));return s.fill(e),Ei().makeTensor(s,t,n,this)}{const r=new lb(t,e),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[],n,s)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return b.linspaceImpl(t,e,n)}makeTensorInfo(t,e){const n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e){const{dataId:n}=this.makeTensorInfo(t,e);return Ei().makeTensorFromDataId(n,t,e,this)}unpackTensor(t){const e=new hx(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new Nb(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[Hg(t.shape),...jg(t.shape)],r={dtype:t.dtype,shape:n,dataId:t.dataId},s=[Hg(e),...jg(e)],a=new Rb(s,n),i=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:r,dtype:s}=e,a=Kg(r);let i;return i=n?new eb(a):new tb(a),{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:t}],s,null,!0).dataId}}runWebGLProgram(t,e,n,s,a=!1){const i=this.makeTensorInfo(t.outputShape,n),o=this.texData.get(i.dataId);if(t.packedOutput&&(o.isPacked=!0),t.outPackingScheme===Ag.DENSE){const e=Fg(t.outputShape);o.texShape=e.map(t=>2*t)}if(null!=t.outTexUsage&&(o.usage=t.outTexUsage),0===r.sizeFromShape(i.shape))return o.values=r.getTypedArrayFromDType(i.dtype,0),i;const u=[],l=e.map(e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&r.sizeFromShape(e.shape)<=j().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?this.unpackTensor(e):this.packTensor(e),u.push(e),n=this.texData.get(e.dataId);else if(n.isPacked&&!Yg(n.shape,e.shape)){const t=e,r=e.shape;e.shape=n.shape,e=this.packedReshape(e,r),u.push(e),n=this.texData.get(e.dataId),t.shape=r}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}});this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(t,e,n){let r="";e.concat(n).forEach(t=>{r+=`${t.shape}_${t.isUniform?"uniform":t.texData.texShape}_${null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0}`});let s=t.constructor.name;return s+="_"+r+"_"+t.userCode,s}(t,l,c),d=this.getAndSaveBinary(h,()=>function(t,e,n,s){const a=e.userCode,i=n.map((t,n)=>{const r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}}),o=i.map(t=>t.shapeInfo),u={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=function(t,e,n,s){const a=[];t.forEach(t=>{const e=r.sizeFromShape(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?a.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(a.push(`uniform sampler2D ${t.name};`),a.push(`uniform int offset${t.name};`))});const i=a.join("\n"),o=t.map(t=>function(t,e,n=!1){let s="";return s+=n?function t(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name;return`\n    vec4 ${"get"+e.charAt(0).toUpperCase()+e.slice(1)}() {\n      return ${uy().texture2D}(${e}, halfCR);\n    }\n  `}(e);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=uy();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `}(e);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t.shapeInfo.texShape,i=a[0],o=a[1],u=uy();if(null!=a&&r.arraysEqual(e,a))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${u.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(e[1]/2)}, ${l[0]}, ${l[1]}, row, col);\n      return ${u.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const r=[1,2],a=wy(e,n.slice(1)),i=["b","row","col"];return`\n        ${t(a)}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${vy(i,r)});\n        }\n      `}const o=i[0],u=i[1],l=Math.ceil(n[2]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${o}, ${u}, ${l*Math.ceil(n[1]/2)}, ${l}, b, row, col);\n      return ${uy().texture2D}(${r}, uv);\n    }\n  `}(e);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,r=t.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],u=i[1],l=Math.ceil(e[n-1]/2);let c=l*Math.ceil(e[n-2]/2),h="int b, int row, int col",d=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let p=2;p<n-1;p++)h=`int b${p}, `+h,c*=e[n-p-1],d=`b${p} * ${c} + `+d;return`\n    vec4 ${s}(${h}) {\n      int index = ${d};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${o});\n      return ${uy().texture2D}(${r}, uv);\n    }\n  `}(e)}}(t):function t(e){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[r,s]=t.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[a,i]=t.shapeInfo.texShape;return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${yy(e)});\n      return sampleTexture(${e}, uv);\n    }\n  `}(e);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${by(t)}\n      }\n    `;const r=t.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=yy(e);return 1===a?`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `:1===s?`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(e);case 2:return function(e){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=e.shapeInfo.texShape;if(null!=i&&r.arraysEqual(n,i))return`\n    float ${a}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${i[1]}.0, ${i[0]}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const{newShape:o,keptDims:u}=r.squeezeShape(n);if(o.length<n.length){const n=wy(e,o),r=["row","col"];return`\n      ${t(n)}\n      float ${a}(int row, int col) {\n        return ${a}(${vy(r,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${by(e)}\n      }\n    `;const l=i[0],c=i[1],h=yy(s);return 1===c?`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===l?`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n  float ${a}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${l}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e);case 3:return function(e){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=n[1]*n[2],o=n[2],{newShape:u,keptDims:l}=r.squeezeShape(n);if(u.length<n.length){const n=wy(e,u),r=["row","col","depth"];return`\n        ${t(n)}\n        float ${a}(int row, int col, int depth) {\n          return ${a}(${vy(r,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${i}, ${o}, 1)));\n        ${by(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],d=c[1],p=e.shapeInfo.flatOffset;return d===i&&null==p?`\n        float ${a}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `:d===o&&null==p?`\n    float ${a}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n      float ${a}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${i} + col * ${o} + depth + ${yy(s)};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e);case 4:return function(e){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=n[3],o=n[2]*i,u=n[1]*o,{newShape:l,keptDims:c}=r.squeezeShape(n);if(l.length<n.length){const n=wy(e,l),r=["row","col","depth","depth2"];return`\n      ${t(n)}\n      float ${a}(int row, int col, int depth, int depth2) {\n        return ${a}(${vy(r,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${u}, ${o}, ${i}, 1)));\n        ${by(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1];return f===u&&null==h?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${i}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:f===i&&null==h?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${u} + col * ${o} +\n          depth * ${i} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${f}, index + ${yy(s)});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e);case 5:return function(e){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=n[4],o=n[3]*i,u=n[2]*o,l=n[1]*u,{newShape:c,keptDims:h}=r.squeezeShape(n);if(c.length<n.length){const n=wy(e,c),r=["row","col","depth","depth2","depth3"];return`\n      ${t(n)}\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        return ${a}(${vy(r,h)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${l}, ${u}, ${o}, ${i})) +\n          depth3;\n        ${by(e)}\n      }\n    `;const d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,f=p[0],m=p[1];return m===l&&null==d?`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${u}, ${o}, ${i}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:m===i&&null==d?`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${n[1]*n[2]*n[3]},\n               ${n[2]*n[3]}, ${n[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${l} + col * ${u} + depth * ${o} +\n          depth2 * ${i} + depth3 + ${yy(s)};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${s}, uv);\n    }\n  `}(e);case 6:return function(e){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),{newShape:i,keptDims:o}=r.squeezeShape(n);if(i.length<n.length){const n=wy(e,i),r=["row","col","depth","depth2","depth3","depth4"];return`\n      ${t(n)}\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${a}(${vy(r,o)});\n      }\n    `}const u=n[5],l=n[4]*u,c=n[3]*l,h=n[2]*c,d=n[1]*h;if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${d}, ${h}, ${c}, ${l})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${u}, 1)));\n        ${by(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,f=e.shapeInfo.texShape,m=f[0],g=f[1];return g===d&&null==p?`\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${h}, ${c}, ${l}, ${u})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${g}.0, ${m}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:g===u&&null==p?`\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${n[1]*n[2]*n[3]*n[4]},\n               ${n[2]*n[3]*n[4]},\n               ${n[3]*n[4]},\n               ${n[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${g}.0, ${m}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${d} + col * ${h} + depth * ${c} +\n          depth2 * ${l} + depth3 * ${u} + depth4 + ${yy(s)};\n      vec2 uv = uvFromFlat(${m}, ${g}, index);\n      return sampleTexture(${s}, uv);\n    }\n  `}(e);default:throw new Error(n.length+"-D input sampling is not yet supported")}}(t),t.shapeInfo.logicalShape.length<=e.logicalShape.length&&(s+=n?function(t,e){const n=t.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",i=t.shapeInfo.logicalShape.length,o=e.logicalShape.length,u=dy(t.shapeInfo.logicalShape,e.logicalShape),l=xy(o),c=o-i;let h;const d=["x","y","z","w","u","v"];h=0===i?"":o<2&&u.length>=1?"coords = 0;":u.map(t=>`coords.${d[t+c]} = 0;`).join("\n");let p="";p=o<2&&i>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+d[e+c]).join(", ");let f="return outputValue;";const m=1===r.sizeFromShape(t.shapeInfo.logicalShape),g=1===r.sizeFromShape(e.logicalShape);if(1!==i||m||g){if(m&&!g)f=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){const t=i-2,e=i-1;u.indexOf(t)>-1&&u.indexOf(e)>-1?f="return vec4(outputValue.x);":u.indexOf(t)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(e)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${l} coords = getOutputCoords();\n      ${h}\n      vec4 outputValue = get${s}(${p});\n      ${f}\n    }\n  `}(t,e):function(t,e){const n=t.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",i=t.shapeInfo.logicalShape.length,o=e.logicalShape.length;if(!t.shapeInfo.isUniform&&i===o&&null==t.shapeInfo.flatOffset&&r.arraysEqual(t.shapeInfo.texShape,e.texShape))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=xy(o),l=dy(t.shapeInfo.logicalShape,e.logicalShape),c=o-i;let h;const d=["x","y","z","w","u","v"];h=0===i?"":o<2&&l.length>=1?"coords = 0;":l.map(t=>`coords.${d[t+c]} = 0;`).join("\n");let p="";return p=o<2&&i>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+d[e+c]).join(", "),`\n    float ${a}() {\n      ${u} coords = getOutputCoords();\n      ${h}\n      return get${s}(${p});\n    }\n  `}(t,e)),s}(t,e,s)).join("\n"),u=e.texShape,l=uy(),c=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let h,d,p=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${py}\n    ${fy}\n    ${my}\n  `}(l);return e.isPacked?(h=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return 1===n[0]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(r.arraysEqual(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const s=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[2]/2),s=r*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),s=r*Math.ceil(t[t.length-2]/2);let a=s,i="",o="b, r, c";for(let u=2;u<t.length-1;u++)a*=t[t.length-u-1],i=`\n      int b${u} = index / ${a};\n      index -= b${u} * ${a};\n    `+i,o=`b${u}, `+o;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${o});\n    }\n  `}(t,e)}}(e.logicalShape,u),d=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(l)):(h=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return 1===(n=e)[0]?`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `;case 2:return function(t,e){return r.arraysEqual(t,e)?`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `:1===t[1]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===t[0]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=ly(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=ly(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=ly(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=ly(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}var n}(e.logicalShape,u),d=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),s&&(p+=gy),[p,c,d,i,h,o,n].join("\n")}(i,u,a,e.packedInputs),c=t.createProgram(l);let h=null;const d=t.getUniformLocation(c,"NAN",!1);1===j().getNumber("WEBGL_VERSION")&&(h=t.getUniformLocation(c,"INFINITY",!1));const p={};for(let r=0;r<e.variableNames.length;r++){const n=e.variableNames[r],s=!1;p[n]=t.getUniformLocation(c,n,s),p["offset"+n]=t.getUniformLocation(c,"offset"+n,s)}return{program:e,source:l,webGLProgram:c,uniformLocations:p,inShapeInfos:o,outShapeInfo:u,infLoc:h,nanLoc:d}}(this.gpgpu,t,l,c)),p=null!=this.activeTimers;let f;if(p&&(f=this.startTimer()),function(t,e,n,s,a){fb(e.inShapeInfos,n),fb([e.outShapeInfo],[s]);const i=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?t.setOutputPackedMatrixTexture(i,o[0],o[1]):t.setOutputMatrixTexture(i,o[0],o[1]),t.setProgram(e.webGLProgram),1===j().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((n,s)=>{const a=e.program.variableNames[s],i=e.uniformLocations[a],o=e.uniformLocations["offset"+a];if(null!=i)if(n.isUniform)if(r.sizeFromShape(n.shape)<2)t.gl.uniform1f(i,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(i,e)}else null!=n.texData.slice&&null!=o&&t.gl.uniform1i(o,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,i,s)}),null!=a&&a(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,d,l,c,s),u.forEach(t=>this.disposeData(t.dataId)),p&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!j().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===a){const t=this.unpackTensor(i);return this.disposeData(i.dataId),t}return i}compileAndRun(t,e,n,r,s=!1){const a=this.runWebGLProgram(t,e,n=n||e[0].dtype,r,s);return Ei().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(j().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]}),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Ri(()=>{if(!j().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=j().getBool("DEBUG");j().set("DEBUG",!1);const e=this.abs(He(1e-8)).dataSync()[0];if(j().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:s,values:a,texture:i,usage:o,isPacked:u}=e;if(null!=i)return;const l=null!=this.activeTimers;let c;l&&(c=r.now());let h=e.texShape;if(null==h&&(h=function(t,e=!1){let n=j().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(n*=2,1===(t=t.map((e,n)=>n>=t.length-2?r.nearestLargerEven(t[n]):t[n])).length&&(t=[2,t[0]])),2!==t.length){const e=r.squeezeShape(t);t=e.newShape}let s=r.sizeFromShape(t);if(t.length<=1&&s<=n)return[1,s];if(2===t.length&&t[0]<=n&&t[1]<=n)return t;if(3===t.length&&t[0]*t[1]<=n&&t[2]<=n)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=n&&t[1]*t[2]<=n)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n)return[t[0],t[1]*t[2]*t[3]];if(e){const e=Hg(t);let n=2,a=2;return t.length&&([n,a]=jg(t)),s=e*(n/2)*(a/2),r.sizeToSquarishShape(s).map(t=>2*t)}return r.sizeToSquarishShape(s)}(n,u),e.texShape=h),null!=a){const t=Kg(n);let i,o=h[1],d=h[0];const p=a instanceof Uint8Array;u?([o,d]=_g(h[0],h[1]),i=new ob(t,[d,o],p)):i=new ib(t,[d,o],p);const f=this.makeTensorInfo([d,o],s);this.texData.get(f.dataId).usage=p?Rg.PIXELS:Rg.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,d,a);const m=this.runWebGLProgram(i,[f],s,null,!0),g=this.texData.get(m.dataId);e.texture=g.texture,e.texShape=g.texShape,e.isPacked=g.isPacked,e.usage=g.usage,this.disposeData(f.dataId),this.texData.delete(m.dataId),e.values=null,l&&(this.uploadWaitMs+=r.now()-c)}else{const t=this.acquireTexture(h,o,s,u);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:r}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values}acquireTexture(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*r.bytesPerElement(e)}}const wx={kernelName:"Div",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:n,b:r}=t;return function(t,e,n){let r=new Dy("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,e.shape);return j().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&(r=new _y("\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",t.shape,e.shape,!0)),n.runWebGLProgram(r,[t,e],"float32")}(n,r,e)}};class vx{constructor(t){this.variableNames=["A"];const e=uy(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class Cx{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=uy(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const Sx={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t;let{pixels:s}=e;const{numChannels:a}=r,i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[u,l]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[l,u],h=[l,u,a];(o||i)&&(null==Nx&&(Nx=document.createElement("canvas").getContext("2d")),Nx.canvas.width=u,Nx.canvas.height=l,Nx.drawImage(s,0,0,u,l),s=Nx.canvas);const d=n.makeTensorInfo(c,"int32");n.texData.get(d.dataId).usage=Rg.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),s);const p=j().getBool("WEBGL_PACK")?new Cx(h):new vx(h),f=n.runWebGLProgram(p,[d],"int32");return n.disposeData(d.dataId),f}};let Nx;const{maxImpl:Ix,transposeImpl:kx}=M;function $x(t,e,n){const r=n.texData.get(t.dataId);return!r.isPacked||Yg(t.shape,e)||null!==r.texture&&Yg(r.shape,e)?{dataId:t.dataId,shape:e,dtype:t.dtype}:function(t,e,n){const r=[Hg(t.shape),...jg(t.shape)],s={dtype:t.dtype,shape:r,dataId:t.dataId},a=[Hg(e),...jg(e)],i=new Rb(a,r),o=n.runWebGLProgram(i,[s],t.dtype,null,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}}(t,e,n)}class Ex{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let a=0;a<n.length;a++)n[a]=t[e[a]];this.outputShape=n,this.rank=n.length;const r=xy(this.rank),s=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let s=0;s<t.length;s++)r[t[s]]=n[s];return r.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class Ax{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let l=0;l<n.length;l++)n[l]=t[e[l]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=xy(this.rank),s=iy("rc",this.rank),a=new Array(this.rank);for(let l=0;l<e.length;l++)a[e[l]]=s[l];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${o}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${o}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Rx(t,e,n){const r=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ax(t.shape,e):new Ex(t.shape,e);return n.runWebGLProgram(r,[t],t.dtype)}const Tx={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{b.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=n,u=e,l=u.readSync(r.dataId),c=u.readSync(s.dataId);return x.nonMaxSuppressionV3(l,c,a,i,o)}},Dx=x.nonMaxSuppressionV5,Fx=[{kernelName:"Max",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{reductionIndices:a}=e,i=n,o=s.shape.length;let u=r.parseAxisParam(a,s.shape);const l=b.getAxesPermutation(u,o),c=null!=l,h=i.shouldExecuteOnCPU([s]);let d=s;if(c){if(h){const t=i.texData.get(d.dataId).values,e=new Array(o);for(let r=0;r<e.length;r++)e[r]=s.shape[l[r]];const n=kx(t,s.shape,s.dtype,l,e);d=i.makeTensorInfo(e,s.dtype),i.texData.get(d.dataId).values=n}else d=Rx(s,l,i);u=b.getInnerMostAxes(u.length,o)}b.assertAxesAreInnerMostDims("max",u,o);const[p,f]=b.computeOutAndReduceShapes(d.shape,u);let m;if(h){const t=i.texData.get(d.dataId),e=Ix(t.values,r.sizeFromShape(f),p,s.dtype);m=i.makeTensorInfo(p,s.dtype),i.texData.get(m.dataId).values=e}else m=function(t,e,n,s){const a=r.sizeFromShape(e),i=$x(t,[r.sizeFromShape(t.shape)/a,a],s),o=function t(e,n,r,s){const[a,i]=e.shape,o=b.computeOptimalWindowSize(i),u=new Ab({windowSize:o,inSize:i,batchSize:a},r),l=s.runWebGLProgram(u,[e],n);return 1===l.shape[1]?l:t(l,n,r,s)}(i,t.dtype,"max",s);return i.dataId!==t.dataId&&s.disposeData(i.dataId),$x(o,n,s)}(d,f,p,i);return c&&i.disposeData(d.dataId),m}},Sx,wx,Tx,{kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{b.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=n,l=e,c=l.readSync(r.dataId),h=l.readSync(s.dataId),d=a,p=i,f=o,m=u,{selectedIndices:g,selectedScores:y}=Dx(c,h,d,p,f,m);return[g,y]}},{kernelName:"Square",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e,s=new Xb(n.shape,"return x * x;");return r.runWebGLProgram(s,[n],n.dtype)}},{kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:n,b:r}=t,s=e,a=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _y("return (a - b) * (a - b);",n.shape,r.shape):new Dy("return (a - b) * (a - b);",n.shape,r.shape);return s.compileAndRun(a,[n,r])}},{kernelName:"Transpose",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n,i=new Array(r.shape.length);for(let u=0;u<i.length;u++)i[u]=r.shape[s[u]];let o;if(a.shouldExecuteOnCPU([r])){const t=a.texData.get(r.dataId),e=kx(t.values,r.shape,r.dtype,s,i);o=a.makeTensorInfo(i,r.dtype),a.texData.get(o.dataId).values=e}else o=Rx(r,s,a);return o}},{kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{filterSize:a,strides:i,pad:o,includeBatchInIndex:u}=e,l=n;r.assert(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const c=[1,1];r.assert(b.eitherStridesOrDilationsAreOne(i,c),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);const h=b.computePool2DInfo(s.shape,a,i,c,o),[d,p]=function(t,e,n,r){let s=new $b(n,"max",!1);const a=r.runWebGLProgram(s,[t],"float32");return s=new $b(n,"max",!0,!0,e),[a,r.runWebGLProgram(s,[t],"float32")]}(s,u,h,l);return[d,p]}}];for(const Jx of Fx)rt(Jx);a.isBrowser()&&Fi("webgl",()=>new xx,2);var _x=n("PLTk"),Ox=n("2Vo4"),Mx=n("3UWI"),zx=n("lJxs"),Lx=n("/uUt"),Bx=n("TUr7"),Px=n("Ng4T"),Wx=function(t,e,n,r){return new(n||(n=Promise))((function(s,a){function i(t){try{u(r.next(t))}catch(e){a(e)}}function o(t){try{u(r.throw(t))}catch(e){a(e)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,o)}u((r=r.apply(t,e||[])).next())}))};const Vx=(t,e,n,r,s)=>(t-e)*(s-r)/(n-e)+r;class Ux extends Px.a{constructor(t,e,n){super(e),this.canvasDraw=n,this.modelSubject=new Ox.a({a:NaN,b:NaN}),this.model$=this.modelSubject.pipe(Object(Mx.a)(1e3),Object(zx.a)(({a:t,b:e})=>({a:t.toFixed(3),b:e.toFixed(3)})),Object(zx.a)(({a:t,b:e})=>`Y = ${t}X + ${e}`),Object(Lx.a)()),this.costSubject=new Ox.a(NaN),this.cost$=this.costSubject.pipe(Object(Mx.a)(1e3),Object(zx.a)(t=>t.toFixed(3)),Object(Lx.a)()),this.xs=[],this.ys=[],this._a=Qe(He(Math.random())),this._b=Qe(He(Math.random())),t.setTitle("Linear Regression with TensorFlow")}get a(){return this._a.dataSync()[0]}get b(){return this._b.dataSync()[0]}get Ys(){return this.ys}ngOnInit(){this.canvas=this.canvasRef.nativeElement,this.canvasDraw.setCanvas(this.canvas)}onMouseClick(t){return Wx(this,void 0,void 0,(function*(){const e=this.normalizeX(t.offsetX),n=this.normalizeY(t.offsetY);this.canvasDraw.setPointOnCanvas(this.denormalizeX(e),this.denormalizeY(n),255,0,0,255),this.xs.push(e),this.ys.push(n),yield this.train(75),yield this.updateCanvas()}))}predict(t){return Ri(()=>this._a.mul(je(t)).add(this._b))}typeset(){this.mathJax.MathJaxTypeset()}normalizeX(t){return Vx(t,0,this.canvas.clientWidth,0,1)}denormalizeX(t){return Vx(t,0,1,0,this.canvas.clientWidth)}normalizeY(t){return Vx(t,0,this.canvas.clientHeight,1,0)}denormalizeY(t){return Vx(t,0,1,this.canvas.clientHeight,0)}drawPredictions(t,e){return new Promise(n=>{for(let r=0;r<t.length;r++)this.canvasDraw.setPointOnCanvas(t[r],e[r],255,0,0,255);n()})}drawPoint(){for(let t=0;t<this.xs.length;t++){const e=this.denormalizeX(this.xs[t]),n=this.denormalizeY(this.ys[t]);this.canvasDraw.setPointOnCanvas(e,n,255,0,0,255)}}updateCanvas(){return Wx(this,void 0,void 0,(function*(){this.canvasDraw.cleanCanvas(),this.drawPoint();const t=Array.from(Array(this.canvas.clientWidth).keys()).filter(t=>t%2==0),e=this.predict(t.map(this.normalizeX,this)).dataSync().map(this.denormalizeY,this);yield this.drawPredictions(t,e)}))}train(t=50){return Wx(this,void 0,void 0,(function*(){const e=Tl.sgd(.5);this._a.assign(He(Math.random())),this._b.assign(He(Math.random()));for(let n=0;n<t;n++)e.minimize(()=>{const t=je(this.ys),e=this.predict(this.xs),n=p.meanSquaredError(t,e);return this.costSubject.next(n.dataSync()[0]),this.modelSubject.next({a:this._a.dataSync()[0],b:this._b.dataSync()[0]}),n}),yield Fl()}))}}var Gx=z.ub({encapsulation:0,styles:[[".markdown-container[_ngcontent-%COMP%]{padding:2em}canvas[_ngcontent-%COMP%]{width:400px;height:400px;border:solid #000}div.fixed-height[_ngcontent-%COMP%]{height:25px}"]],data:{}});function qx(t){return z.Xb(2,[z.Qb(402653184,1,{mathJax:0}),z.Qb(402653184,2,{canvasRef:0}),(t()(),z.wb(2,0,null,null,3,"div",[["class","markdown-container"]],null,null,null,null,null)),(t()(),z.wb(3,0,null,null,2,"markdown",[["mathjax",""],["src","assets/blogs/tf-linear-regression.md"]],null,[[null,"load"]],(function(t,e,n){var r=!0;return"load"===e&&(r=!1!==t.component.typeset()&&r),r}),P.b,P.a)),z.vb(4,4866048,[[1,4]],0,W.a,[z.l,W.d],{MathJaxExpressions:[0,"MathJaxExpressions"]},null),z.vb(5,4767744,[["article",4]],0,V.a,[z.l,V.c],{src:[0,"src"]},{load:"load"}),(t()(),z.wb(6,0,null,null,8,"div",[],null,null,null,null,null)),z.vb(7,4866048,null,0,W.a,[z.l,W.d],{MathJaxExpressions:[0,"MathJaxExpressions"]},null),z.Mb(131072,U.b,[z.h]),z.Mb(131072,U.b,[z.h]),z.Lb(10,2),(t()(),z.wb(11,0,null,null,1,"div",[["class","fixed-height"]],null,null,null,null,null)),(t()(),z.Ub(12,null,["model: \\( "," \\)"])),(t()(),z.wb(13,0,null,null,1,"div",[["class","fixed-height"]],null,null,null,null,null)),(t()(),z.Ub(14,null,["cost = \\( "," \\)"])),(t()(),z.wb(15,0,null,null,1,"div",[],null,null,null,null,null)),(t()(),z.wb(16,0,[[2,0],["canvas",1]],null,0,"canvas",[],null,[[null,"click"]],(function(t,e,n){var r=!0;return"click"===e&&(r=!1!==t.component.onMouseClick(n)&&r),r}),null,null))],(function(t,e){var n=e.component;t(e,4,0,""),t(e,5,0,"assets/blogs/tf-linear-regression.md");var r=t(e,10,0,z.Vb(e,7,0,z.Kb(e,8).transform(n.model$)),z.Vb(e,7,0,z.Kb(e,9).transform(n.cost$)));t(e,7,0,r)}),(function(t,e){t(e,12,0,"{}"),t(e,14,0,"{}")}))}function Hx(t){return z.Xb(0,[(t()(),z.wb(0,0,null,null,2,"app-tfjs-linear-regression",[],null,null,null,qx,Gx)),z.Pb(512,null,G.a,G.a,[q.l]),z.vb(2,114688,null,0,Ux,[Bx.a,G.a,_x.a],null,null)],(function(t,e){t(e,2,0)}),null)}var jx=z.sb("app-tfjs-linear-regression",Ux,Hx,{},{},[]);class Kx{}var Xx=z.tb(L,[],(function(t){return z.Hb([z.Ib(512,z.j,z.Y,[[8,[B.a,jx]],[3,z.j],z.x]),z.Ib(4608,U.m,U.l,[z.u]),z.Ib(1073742336,U.c,U.c,[]),z.Ib(1073742336,q.n,q.n,[[2,q.s],[2,q.l]]),z.Ib(1073742336,Kx,Kx,[]),z.Ib(1073742336,W.b,W.b,[W.d,W.c]),z.Ib(1073742336,V.b,V.b,[]),z.Ib(1073742336,L,L,[]),z.Ib(1024,q.j,(function(){return[[{path:"",component:Ux}]]}),[])])}))},YuTi:function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},euyF:function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this;e.next=function(){var t,n,r=e.w,s=e.X,a=e.i;return e.w=r=r+1640531527|0,n=s[a+34&127],t=s[a=a+1&127],n^=n<<13,t^=t<<17,n=s[a]=(n^=n>>>15)^(t^=t>>>12),e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,s,a,i,o=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),s=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(s=0==(n=o[127&a]^=r+(i=i+1640531527|0))?s+1:0);for(s>=128&&(o[127&(e&&e.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,o[s]=(r^=r>>>15)^(n^=n>>>12);t.w=i,t.X=o,t.i=s}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function u(t,e){null==t&&(t=+new Date);var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(e,n,e,s))||(s.exports=r):this.xor4096=u}(0,t,n("B9Yq"))}).call(this,n("YuTi")(t))},ie1u:function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function u(t,e){var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(e,n,e,s))||(s.exports=r):this.tychei=u}(0,t,n("B9Yq"))}).call(this,n("YuTi")(t))},"pJ3+":function(t,e,n){var r;!function(s,a){var i,o=this,u=a.pow(256,6),l=a.pow(2,52),c=2*l;function h(t,e,n){var r=[],h=f(function t(e,n){var r,s=[],a=typeof e;if(n&&"object"==a)for(r in e)try{s.push(t(e[r],n-1))}catch(i){}return s.length?s:"string"==a?e:e+"\0"}((e=1==e?{entropy:!0}:e||{}).entropy?[t,m(s)]:null==t?function(){try{var t;return i&&(t=i.randomBytes)?t=t(256):(t=new Uint8Array(256),(o.crypto||o.msCrypto).getRandomValues(t)),m(t)}catch(r){var e=o.navigator,n=e&&e.plugins;return[+new Date,o,n,o.screen,m(s)]}}():t,3),r),g=new d(r),y=function(){for(var t=g.g(6),e=u,n=0;t<l;)t=256*(t+n),e*=256,n=g.g(1);for(;t>=c;)t/=2,e/=2,n>>>=1;return(t+n)/e};return y.int32=function(){return 0|g.g(4)},y.quick=function(){return g.g(4)/4294967296},y.double=y,f(m(g.S),s),(e.pass||n||function(t,e,n,r){return r&&(r.S&&p(r,g),t.state=function(){return p(g,{})}),n?(a.random=t,e):t})(y,h,"global"in e?e.global:this==a,e.state)}function d(t){var e,n=t.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(t=[n++]);s<256;)i[s]=s++;for(s=0;s<256;s++)i[s]=i[a=255&a+t[s%n]+(e=i[s])],i[a]=e;(r.g=function(t){for(var e,n=0,s=r.i,a=r.j,i=r.S;t--;)e=i[s=255&s+1],n=256*n+i[255&(i[s]=i[a=255&a+e])+(i[a]=e)];return r.i=s,r.j=a,n})(256)}function p(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function f(t,e){for(var n,r=t+"",s=0;s<r.length;)e[255&s]=255&(n^=19*e[255&s])+r.charCodeAt(s++);return m(e)}function m(t){return String.fromCharCode.apply(0,t)}if(a.seedrandom=h,f(a.random(),s),t.exports){t.exports=h;try{i=n(6)}catch(g){}}else void 0===(r=(function(){return h}).call(e,n,e,t))||(t.exports=r)}([],Math)},pJ6O:function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function u(t,e){var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(e,n,e,s))||(s.exports=r):this.xorwow=u}(0,t,n("B9Yq"))}).call(this,n("YuTi")(t))},uDiL:function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function u(t,e){var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(e,n,e,s))||(s.exports=r):this.xor128=u}(0,t,n("B9Yq"))}).call(this,n("YuTi")(t))},yuCN:function(t,e,n){(function(t){var r;!function(t,s,a){function i(t){var e=this;e.next=function(){var t,n,r=e.x,s=e.i;return t=r[s],n=(t^=t>>>7)^t<<24,n^=(t=r[s+1&7])^t>>>10,n^=(t=r[s+3&7])^t>>>3,n^=(t=r[s+4&7])^t<<7,t=r[s+7&7],r[s]=n^=(t^=t<<13)^t<<9,e.i=s+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n&&(r[7]=-1),t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function u(t,e){null==t&&(t=+new Date);var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(e,n,e,s))||(s.exports=r):this.xorshift7=u}(0,t,n("B9Yq"))}).call(this,n("YuTi")(t))}}]);