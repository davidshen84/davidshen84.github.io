(self.webpackChunkblog=self.webpackChunkblog||[]).push([[522],{2522:(Ge,ct,ae)=>{"use strict";ae.r(ct),ae.d(ct,{TfjsModule:()=>LW});var ze={};ae.r(ze),ae.d(ze,{assertParamsValid:()=>Ac,computeFlatOffset:()=>Oc,computeOutShape:()=>yf,getNormalizedAxes:()=>vf,isSliceContinous:()=>Rc,maskToAxes:()=>nl,parseSliceParams:()=>sl,sliceInfo:()=>Fc,startForAxis:()=>If,startIndicesWithElidedDims:()=>Nf,stopForAxis:()=>Sf,stopIndicesWithElidedDims:()=>Cf,stridesForAxis:()=>kf,stridesWithElidedDims:()=>xf});var qt={};ae.r(qt),ae.d(qt,{collectGatherOpShapeInfo:()=>zd,computeOutShape:()=>hm,segOpComputeOptimalWindowSize:()=>dm});var Ie={};ae.r(Ie),ae.d(Ie,{ERF_A1:()=>Ad,ERF_A2:()=>Rd,ERF_A3:()=>Od,ERF_A4:()=>Fd,ERF_A5:()=>Pd,ERF_P:()=>Dd,PARALLELIZE_THRESHOLD:()=>Sd,SELU_SCALE:()=>Cl,SELU_SCALEALPHA:()=>Nl,applyActivation:()=>gl,assertAndGetBroadcastShape:()=>Re,assertAxesAreInnerMostDims:()=>Mt,assertParamsConsistent:()=>Id,assignToTypedArray:()=>lm,axesAreInnerMostDims:()=>qc,calculateShapes:()=>fa,castTensor:()=>MC,combineLocations:()=>Of,complexWithEvenIndex:()=>am,complexWithOddIndex:()=>im,computeConv2DInfo:()=>Dt,computeConv3DInfo:()=>bs,computeDefaultPad:()=>zc,computeDilation2DInfo:()=>oa,computeOptimalWindowSize:()=>vl,computeOutAndReduceShapes:()=>At,computeOutShape:()=>us,computePool2DInfo:()=>yn,computePool3DInfo:()=>rs,convertConv2DDataFormat:()=>os,eitherStridesOrDilationsAreOne:()=>mt,expandShapeToKeepDim:()=>yt,exponent:()=>cm,exponents:()=>um,fromStringArrayToUint8:()=>pm,fromUint8ToStringArray:()=>Vd,getAxesPermutation:()=>xt,getBroadcastDims:()=>ia,getComplexWithIndex:()=>Ld,getFusedBiasGradient:()=>ml,getFusedDyActivation:()=>fl,getImageCenter:()=>Td,getInnerMostAxes:()=>Nt,getPermuted:()=>ha,getReductionAxes:()=>kt,getReshaped:()=>da,getReshapedPermuted:()=>pa,getSliceBeginCoords:()=>_d,getSliceSize:()=>$d,getUndoAxesPermutation:()=>Sr,log:()=>LC,mergeRealAndImagArrays:()=>cs,prepareAndValidate:()=>Ed,prepareSplitSize:()=>Md,reshapeTensor:()=>zC,segment_util:()=>qt,shouldFuse:()=>yl,slice_util:()=>ze,splitRealAndImagArrays:()=>om,tupleValuesAreOne:()=>ws,upcastType:()=>ln,validateInput:()=>PC,validateUpdateShape:()=>rm,warn:()=>Dr});var Wt={};ae.r(Wt),ae.d(Wt,{addImpl:()=>Ry,bincountImpl:()=>Yh,bincountReduceImpl:()=>zy,ceilImpl:()=>Vy,concatImpl:()=>By,expImpl:()=>Hy,expm1Impl:()=>qy,floorImpl:()=>Zy,gatherV2Impl:()=>Yy,greaterImpl:()=>Jy,lessImpl:()=>Qy,linSpaceImpl:()=>ex,logImpl:()=>tx,maxImpl:()=>nx,maximumImpl:()=>rx,minimumImpl:()=>ox,multiplyImpl:()=>Jh,negImpl:()=>ix,notEqualImpl:()=>lx,prodImpl:()=>hx,rangeImpl:()=>px,rsqrtImpl:()=>fx,simpleAbsImpl:()=>Fy,sliceImpl:()=>My,squaredDifferenceImpl:()=>yx,stridedSliceImpl:()=>xx,subImpl:()=>Ky,tileImpl:()=>bx,topKImpl:()=>wx,transposeImpl:()=>Xh,uniqueImpl:()=>vx});var Qe=ae(6895),at=ae(4353),M=ae(5861);class ee{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class ie{decComplexRef(t){}time(t){return T("time")}read(t){return T("read")}readSync(t){return T("readSync")}numDataIds(){return T("numDataIds")}disposeData(t){return T("disposeData")}write(t,e,s){return T("write")}move(t,e,s,r){return T("move")}memory(){return T("memory")}floatPrecision(){return T("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,s,r){return T("batchMatMul")}fusedBatchMatMul({}){return T("fusedBatchMatMul")}slice(t,e,s){return T("slice")}stridedSlice(t,e,s,r){return T("stridedSlice")}unstack(t,e){return T("unstack")}reverse(t,e){return T("reverse")}concat(t,e){return T("concat")}neg(t){return T("neg")}add(t,e){return T("add")}addN(t){return T("addN")}subtract(t,e){return T("subtract")}multiply(t,e){return T("multiply")}realDivide(t,e){return T("realDivide")}floorDiv(t,e){return T("floorDiv")}sum(t,e){return T("sum")}prod(t,e){return T("prod")}unsortedSegmentSum(t,e,s){return T("unsortedSegmentSum")}argMin(t,e){return T("argMin")}argMax(t,e){return T("argMax")}equal(t,e){return T("equal")}notEqual(t,e){return T("notEqual")}less(t,e){return T("less")}lessEqual(t,e){return T("lessEqual")}greater(t,e){return T("greater")}greaterEqual(t,e){return T("greaterEqual")}logicalNot(t){return T("logicalNot")}logicalAnd(t,e){return T("logicalAnd")}logicalOr(t,e){return T("logicalOr")}where(t){return T("where")}select(t,e,s){return T("select")}topk(t,e,s){return T("topk")}min(t,e){return T("min")}minimum(t,e){return T("minimum")}mod(t,e){return T("mod")}max(t,e){return T("max")}maximum(t,e){return T("maximum")}all(t,e){return T("all")}any(t,e){return T("any")}squaredDifference(t,e){return T("squaredDifference")}ceil(t){return T("ceil")}floor(t){return T("floor")}round(t){return T("round")}sign(t){return T("sign")}isNaN(t){return T("isNaN")}isInf(t){return T("isInf")}isFinite(t){return T("isFinite")}pow(t,e){return T("pow")}exp(t){return T("exp")}expm1(t){return T("expm1")}softmax(t,e){return T("softmax")}log(t){return T("log")}log1p(t){return T("log1p")}sqrt(t){return T("sqrt")}rsqrt(t){return T("rsqrt")}square(t){return T("square")}reciprocal(t){return T("reciprocal")}relu(t){return T("relu")}relu6(t){return T("relu6")}prelu(t,e){return T("prelu")}elu(t){return T("elu")}eluDer(t,e){return T("eluDer")}selu(t){return T("selu")}int(t){return T("int")}clip(t,e,s){return T("clip")}abs(t){return T("abs")}complexAbs(t){return T("complexAbs")}sigmoid(t){return T("sigmoid")}softplus(t){return T("softplus")}sin(t){return T("sin")}cos(t){return T("cos")}tan(t){return T("tan")}asin(t){return T("asin")}acos(t){return T("acos")}atan(t){return T("atan")}atan2(t,e){return T("atan2")}sinh(t){return T("sinh")}cosh(t){return T("cosh")}tanh(t){return T("tanh")}asinh(t){return T("asinh")}acosh(t){return T("acosh")}atanh(t){return T("atanh")}erf(t){return T("erf")}step(t,e){return T("step")}fusedConv2d({}){return T("fusedConv2d")}conv2d(t,e,s){return T("conv2d")}conv2dDerInput(t,e,s){return T("conv2dDerInput")}conv2dDerFilter(t,e,s){return T("conv2dDerFilter")}fusedDepthwiseConv2D({}){return T("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,s){return T("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,s){return T("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,s){return T("depthwiseConv2DDerFilter")}conv3d(t,e,s){return T("conv3d")}conv3dDerInput(t,e,s){return T("conv3dDerInput")}conv3dDerFilter(t,e,s){return T("conv3dDerFilter")}maxPool(t,e){return T("maxPool")}maxPoolBackprop(t,e,s,r){return T("maxPoolBackprop")}avgPool(t,e){return T("avgPool")}avgPoolBackprop(t,e,s){return T("avgPoolBackprop")}avgPool3d(t,e){return T("avgPool3d")}avgPool3dBackprop(t,e,s){return T("avgPool3dBackprop")}maxPool3d(t,e){return T("maxPool3d")}maxPool3dBackprop(t,e,s,r){return T("maxPool3dBackprop")}reshape(t,e){return T("reshape")}cast(t,e){return T("cast")}tile(t,e){return T("tile")}pad(t,e,s){return T("pad")}transpose(t,e){return T("transpose")}gather(t,e,s,r=0){return T("gather")}gatherND(t,e){return T("gatherND")}scatterND(t,e,s){return T("scatterND")}batchToSpaceND(t,e,s){return T("batchToSpaceND")}spaceToBatchND(t,e,s){return T("spaceToBatchND")}resizeBilinear(t,e,s,r,o){return T("resizeBilinear")}resizeBilinearBackprop(t,e,s){return T("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,s,r,o){return T("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,s){return T("resizeNearestNeighborBackprop")}batchNorm(t,e,s,r,o,a){return T("batchNorm")}localResponseNormalization4D(t,e,s,r,o){return T("localResponseNormalization4D")}LRNGrad(t,e,s,r,o,a,i){return T("LRNGrad")}multinomial(t,e,s,r){return T("multinomial")}oneHot(t,e,s,r){return T("oneHot")}cumsum(t,e,s,r){return T("cumsum")}nonMaxSuppression(t,e,s,r,o){return T("nonMaxSuppression")}fft(t){return T("fft")}ifft(t){return T("ifft")}complex(t,e){return T("complex")}real(t){return T("real")}imag(t){return T("imag")}cropAndResize(t,e,s,r,o,a){return T("cropAndResize")}depthToSpace(t,e,s){return T("depthToSpace")}split(t,e,s){return T("split")}sparseToDense(t,e,s,r){return T("sparseToDense")}diag(t){return T("diag")}fill(t,e,s){return T("fill")}onesLike(t){return T("onesLike")}zerosLike(t){return T("zerosLike")}linspace(t,e,s){return T("linspace")}dispose(){return T("dispose")}}function T(n){throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function J(n){let t=n.length,e=0,s=0;for(;t>0;)s=Math.random()*t|0,t--,e=n[t],n[t]=n[s],n[s]=e}function pe(n,t,e){return Math.max(n,Math.min(t,e))}function ye(n){return n%2==0?n:n+1}function C(n,t){if(!n)throw new Error("string"==typeof t?t:t())}function Me(n,t,e=""){C(Se(n,t),()=>e+` Shapes ${n} and ${t} must match`)}function Be(n){C(null!=n,()=>"The input to the tensor constructor must be a non-null value.")}function Ve(n,t=[],e=!1){if(null==t&&(t=[]),Array.isArray(n)||Bn(n)&&!e)for(let s=0;s<n.length;++s)Ve(n[s],t,e);else t.push(n);return t}function V(n){if(0===n.length)return 1;let t=n[0];for(let e=1;e<n.length;e++)t*=n[e];return t}function Se(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==t[e])return!1;return!0}function We(n){return n%1==0}function Kt(n){const t=Math.ceil(Math.sqrt(n));return[t,Math.ceil(n/t)]}function Gt(n,t){return t<=n.length?n:n+" ".repeat(t-n.length)}function En(n,t=(s=>0),e){return new Promise((s,r)=>{let o=0;const a=()=>{if(n())return void s();o++;const i=t(o);null!=e&&o>=e?r():setTimeout(a,i)};a()})}function Ms(n,t){let e=1,s=-1;for(let o=0;o<n.length;++o)if(n[o]>=0)e*=n[o];else if(-1===n[o]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${o}`);s=o}else if(n[o]<0)throw Error(`Shapes can not be < 0. Found ${n[o]} at dim ${o}`);if(-1===s){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${n}`);return n}if(0===e)throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);if(t%e!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);const r=n.slice();return r[s]=t/e,r}function Te(n,t){const e=t.length;return C((n=null==n?t.map((s,r)=>r):[].concat(n)).every(s=>s>=-e&&s<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`),C(n.every(s=>We(s)),()=>`All values in axis param must be integers but got axis ${n}`),n.map(s=>s<0?e+s:s)}function zs(n,t){const e=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,o=null==t||r?null:Te(t,n).sort();let a=0;for(let i=0;i<n.length;++i){if(null!=o){if(o[a]===i&&1!==n[i])throw new Error(`Can't squeeze axis ${i} since its dim '${n[i]}' is not 1`);(null==o[a]||o[a]>i)&&1===n[i]&&(e.push(n[i]),s.push(i)),o[a]<=i&&a++}1!==n[i]&&(e.push(n[i]),s.push(i))}return{newShape:e,keptDims:s}}function Ut(n,t){let e=null;if(null==n||"float32"===n)e=new Float32Array(t);else if("int32"===n)e=new Int32Array(t);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);e=new Uint8Array(t)}return e}function dr(n,t){let e=null;if(null==n||"float32"===n)e=new Float32Array(t);else if("int32"===n)e=new Int32Array(t);else if("bool"===n)e=new Uint8Array(t);else{if("string"!==n)throw new Error(`Unknown data type ${n}`);e=new Array(t)}return e}function vu(n,t){return!("complex64"===t||"float32"===t&&"complex64"!==n||"int32"===t&&"float32"!==n&&"complex64"!==n||"bool"===t&&"bool"===n)}function Bn(n){return n instanceof Float32Array||n instanceof Int32Array||n instanceof Uint8Array}function Np(n){if("float32"===n||"int32"===n)return 4;if("complex64"===n)return 8;if("bool"===n)return 1;throw new Error(`Unknown dtype ${n}`)}function to(n){return"string"==typeof n||n instanceof String}function Nu(n){return"number"==typeof n}function no(n){return Array.isArray(n)?no(n[0]):n instanceof Float32Array?"float32":n instanceof Int32Array||n instanceof Uint8Array?"int32":Nu(n)?"float32":to(n)?"string":function jb(n){return"boolean"==typeof n}(n)?"bool":"float32"}function Cu(n){return!!(n&&n.constructor&&n.call&&n.apply)}function ku(n,t){for(let e=t;e<n;++e)if(n%e==0)return e;return n}function Ce(n){const t=n.length;if(t<2)return[];const e=new Array(t-1);e[t-2]=n[t-1];for(let s=t-3;s>=0;--s)e[s]=e[s+1]*n[s+1];return e}function Cp(n,t,e){const s=new Array;if(1===t.length){const r=t[0];for(let o=0;o<r;o++)s[o]=e[n+o]}else{const r=t[0],o=t.slice(1),a=o.reduce((i,l)=>i*l);for(let i=0;i<r;i++)s[i]=Cp(n+i*a,o,e)}return s}function Dn(n,t){if(0===n.length)return t[0];const e=n.reduce((s,r)=>s*r);if(0===e)return[];if(e!==t.length)throw new Error(`[${n}] does not match the input size ${t.length}.`);return Cp(0,n,t)}function kp(n,t){const e=Ht(n,t);for(let s=0;s<e.length;s++)e[s]=1;return e}function Ht(n,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t)return new Uint8Array(n);throw new Error(`Unknown data type ${t}`)}function Ip(n,t){const e=n.reduce((s,r)=>s*r,1);if(null==t||"float32"===t)return Dn(n,new Float32Array(e));if("int32"===t)return Dn(n,new Int32Array(e));if("bool"===t)return Dn(n,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function Sp(n){n.forEach(t=>{C(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${n}].`)})}function Wn(n,t,e){if(0===t)return 0;if(1===t)return n[0];let s=n[n.length-1];for(let r=0;r<n.length-1;++r)s+=e[r]*n[r];return s}function so(n,t,e){if(0===t)return[];if(1===t)return[n];const s=new Array(t);for(let r=0;r<s.length-1;++r)s[r]=Math.floor(n/e[r]),n-=s[r]*e[r];return s[s.length-1]=n,s}function Tp(n){return n&&n.then&&"function"==typeof n.then}const _p="tfjsflags";class qb{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,s){if(this.flagRegistry[t]={evaluationFn:e,setHook:s},null!=this.urlFlags[t]){const r=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${r}.`),this.set(t,r)}}getAsync(t){var e=this;return(0,M.Z)(function*(){return t in e.flags||(e.flags[t]=yield e.evaluateFlag(t)),e.flags[t]})()}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(Tp(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;const t=function Kb(n){const t={};return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...s)=>(function Xb(n,t,e){n[decodeURIComponent(t)]=decodeURIComponent(e||"")}(t,s[0],s[1]),s.join("="))),t}(this.global.location.search);_p in t&&t[_p].split(",").forEach(s=>{const[r,o]=s.split(":");this.urlFlags[r]=function Zb(n,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${n}.`)}(r,o)})}}function q(){return $p}let Iu,$p=null;function Ep(){if(null==Iu){let n;if(typeof window<"u")n=window;else if(typeof global<"u")n=global;else if(typeof process<"u")n=process;else{if(!(typeof self<"u"))throw new Error("Could not find a global object");n=self}Iu=n}return Iu}function Dp(n,t){const e=function Jb(){const n=Ep();return null==n._tfGlobals&&(n._tfGlobals=new Map),n._tfGlobals}();if(e.has(n))return e.get(n);{const s=t();return e.set(n,s),e.get(n)}}const Va="Abs",ro="Acos",oo="Acosh",hr="Add",Su="AddN",Ba="ArgMax",Wa="ArgMin",ao="Asin",lo="Asinh",uo="Atan",co="Atanh",ho="Atan2",Ga="AvgPool",$u="AvgPoolGrad",Ua="AvgPool3D",Eu="AvgPool3DGrad",Ha="BatchMatMul",ja="BatchToSpaceND",Ap="Bincount",po="Cast",fo="Ceil",mo="ClipByValue",Du="Complex",qa="ComplexAbs",Ka="Concat",Xa="Conv2D",Au="Conv2DBackpropFilter",Za="Conv2DBackpropInput",Ya="Conv3D",Ru="Conv3DBackpropFilterV2",Ou="Conv3DBackpropInputV2",go="Cos",yo="Cosh",Ja="Cumsum",Fu="CropAndResize",Rp="DenseBincount",Pu="DepthToSpace",Qa="DepthwiseConv2dNative",Lu="DepthwiseConv2dNativeBackpropFilter",Mu="DepthwiseConv2dNativeBackpropInput",ei="Dilation2D",zu="Dilation2DBackpropInput",Vu="Dilation2DBackpropFilter",xo="RealDiv",bo="Elu",Bu="EluGrad",wo="Erf",ti="Equal",vo="Exp",ni="ExpandDims",No="Expm1",Gu="Fill",Uu="FlipLeftRight",Co="Floor",ko="FloorDiv",si="FusedBatchNorm",ri="GatherV2",Fp="GatherNd",oi="Greater",Io="GreaterEqual",ai="Identity",Hu="IFFT",ju="Imag",So="IsFinite",To="IsInf",_o="IsNan",ii="LeakyRelu",li="Less",ui="LessEqual",Pp="LinSpace",$o="Log",Eo="Log1p",ci="LogicalAnd",di="LogicalNot",hi="LogicalOr",pi="LRN",qu="LRNGrad",fi="Max",Do="Maximum",mi="MaxPool",Ku="MaxPoolGrad",gi="MaxPool3D",Xu="MaxPool3DGrad",Lp="MaxPoolWithArgmax",yi="Mean",xi="Min",Ao="Minimum",bi="MirrorPad",Ro="Mod",Mp="Multinomial",Oo="Multiply",wi="Neg",vi="NotEqual",Zu="NonMaxSuppressionV3",Yu="NonMaxSuppressionV4",Ju="NonMaxSuppressionV5",Ni="OnesLike",Ci="OneHot",ki="Pack",Ii="PadV2",Fo="Pow",Si="Prelu",Qu="Prod",ec="Range",tc="Real",Po="Reciprocal",Lo="Relu",Ti="Reshape",_i="ResizeNearestNeighbor",nc="ResizeNearestNeighborGrad",$i="ResizeBilinear",sc="ResizeBilinearGrad",Mo="Relu6",Ei="Reverse",zo="Round",Vo="Rsqrt",zp="ScatterNd",Di="Select",Bo="Selu",Ai="Slice",Wo="Sin",Go="Sinh",Uo="Sign",Ho="Sigmoid",jo="Softplus",qo="Sqrt",Ri="Sum",Oi="SpaceToBatchND",Fi="SplitV",Pi="Softmax",Ko="SquaredDifference",rc="Square",Xo="Sub",Vp="SparseToDense",oc="StridedSlice",Zo="Tan",Yo="Tanh",Jo="Tile",ac="TopK",Li="Transpose",ic="Unique",Mi="Unpack",zi="UnsortedSegmentSum",Vi="ZerosLike",Qo="Step",lc="RotateWithOffset",Bi="_FusedMatMul",Wi="FusedConv2D",Gi="FusedDepthwiseConv2D",pr=Dp("kernelRegistry",()=>new Map),ea=Dp("gradRegistry",()=>new Map);function Bp(n){return ea.get(n)}function uc(n){const t=pr.entries(),e=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[o,a]=r,[i]=o.split("_");i===n&&e.push(a)}return e}function cc(n){const{kernelName:t,backendName:e}=n,s=dc(t,e);pr.has(s)&&console.warn(`The kernel '${t}' for backend '${e}' is already registered`),pr.set(s,n)}function s0(n){const{kernelName:t}=n;ea.has(t)&&q().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),ea.set(t,n)}function dc(n,t){return`${t}_${n}`}class r0{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new a0)}profileKernel(t,e,s){let r;const a=this.backendTimer.time(()=>{r=s()});if(q().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let l=0;l<r.length;l++){const u=r[l];u.data().then(c=>{o0(c,u.dtype,t)})}return{kernelName:t,outputs:r,inputs:e,timeMs:a.then(l=>l.kernelMs),extraInfo:a.then(l=>null!=l.getExtraProfileInfo?l.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:s,timeMs:r,inputs:o,extraInfo:a}=t;s.forEach(i=>{Promise.all([i.data(),r,a]).then(l=>{this.logger.logKernelProfile(e,i,l[0],l[1],o,l[2])})})}}function o0(n,t,e){if("float32"!==t)return!1;for(let s=0;s<n.length;s++){const r=n[s];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${e}'`),!0}return!1}class a0{logKernelProfile(t,e,s,r,o,a){const i="number"==typeof r?Gt(`${r}ms`,9):r.error,l=Gt(t,25),u=e.rank,c=e.size,d=Gt(e.shape.toString(),14);let h="";for(const p in o){const f=o[p];if(null!=f){const m=f.shape||e.shape,g=m.length;h+=`${p}: ${g}D ${g>0?m:""} `}}console.log(`%c${l}\t%c${i}\t%c${u}D ${d}\t%c${c}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function u0(n,t,e,s){const r=Ce(t),o=function c0(n,t,e,s){const r=V(t),o=s[s.length-1],a=new Array(o).fill(0),i=t.length,l="complex64"===e?sa(n):n;if(i>1)for(let u=0;u<r/o;u++){const c=u*o;for(let d=0;d<o;d++)a[d]=Math.max(a[d],na(l[c+d],0,e).length)}return a}(n,t,e,r),a=t.length,i=Ui(n,t,e,r,o),l=["Tensor"];return s&&(l.push(`  dtype: ${e}`),l.push(`  rank: ${a}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map(u=>"    "+u).join("\n")),l.join("\n")}function na(n,t,e){let s;return s=Array.isArray(n)?`${parseFloat(n[0].toFixed(7))} + ${parseFloat(n[1].toFixed(7))}j`:to(n)?`'${n}'`:"bool"===e?Gp(n):parseFloat(n.toFixed(7)).toString(),Gt(s,t)}function Gp(n){return 0===n?"false":"true"}function Ui(n,t,e,s,r,o=!0){const a="complex64"===e?2:1,i=t[0],l=t.length;if(0===l)return"complex64"===e?[na(sa(n)[0],0,e)]:"bool"===e?[Gp(n[0])]:[n[0].toString()];if(1===l){if(i>20){let y=Array.from(n.slice(0,3*a)),x=Array.from(n.slice((i-3)*a,i*a));return"complex64"===e&&(y=sa(y),x=sa(x)),["["+y.map((v,b)=>na(v,r[b],e)).join(", ")+", ..., "+x.map((v,b)=>na(v,r[i-3+b],e)).join(", ")+"]"]}return["["+("complex64"===e?sa(n):Array.from(n)).map((g,y)=>na(g,r[y],e)).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),d=s[0]*a,h=[];if(i>20){for(let m=0;m<3;m++){const g=m*d;h.push(...Ui(n.slice(g,g+d),u,e,c,r,!1))}h.push("...");for(let m=i-3;m<i;m++){const g=m*d;h.push(...Ui(n.slice(g,g+d),u,e,c,r,m===i-1))}}else for(let m=0;m<i;m++){const g=m*d;h.push(...Ui(n.slice(g,g+d),u,e,c,r,m===i-1))}const p=2===l?",":"";h[0]="["+h[0]+p;for(let m=1;m<h.length-1;m++)h[m]=" "+h[m]+p;let f=",\n";for(let m=2;m<l;m++)f+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(o?"":f),h}function sa(n){const t=[];for(let e=0;e<n.length;e+=2)t.push([n[e],n[e+1]]);return t}function gs(n,t){return"string"===t?ra(n):Vs([n],t)}function Vs(n,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(n)&&(n=Ve(n)),q().getBool("DEBUG")&&function Gb(n,t){for(let e=0;e<n.length;e++){const s=n[e];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(n,t),function d0(n,t){return n instanceof Float32Array&&"float32"===t||n instanceof Int32Array&&"int32"===t||n instanceof Uint8Array&&"bool"===t}(n,t))return n;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t){const e=new Uint8Array(n.length);for(let s=0;s<e.length;++s)0!==Math.round(n[s])&&(e[s]=1);return e}throw new Error(`Unknown data type ${t}`)}function mn(){return q().platform.now()}function ra(n,t="utf-8"){return t=t||"utf-8",q().platform.encode(n,t)}function fr(n,t="utf-8"){return t=t||"utf-8",q().platform.decode(n,t)}class jt{constructor(t,e,s){if(this.dtype=e,this.shape=t.slice(),this.size=V(t),null!=s){const r=s.length;C(r===this.size,()=>`Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=s||dr(e,this.size),this.strides=Ce(t)}set(t,...e){0===e.length&&(e=[0]),C(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const s=this.locToIndex(e);this.values[s]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const r of t){if(r<0||r>=this.shape[e])throw new Error(`Requested out of range element at ${t}.   Buffer shape=${this.shape}`);e++}let s=t[t.length-1];for(let r=0;r<t.length-1;++r)s+=this.strides[r]*t[r];return this.values[s]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let s=0;s<t.length-1;++s)e+=this.strides[s]*t[s];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let s=0;s<e.length-1;++s)e[s]=Math.floor(t/this.strides[s]),t-=e[s]*this.strides[s];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return Gn().makeTensor(this.values,this.shape,this.dtype)}}let Gn=null,mr=null,Up=null;class O{constructor(t,e,s,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=V(t),this.strides=Ce(t),this.dataId=s,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}buffer(){var t=this;return(0,M.Z)(function*(){const e=yield t.data();return mr.buffer(t.shape,t.dtype,e)})()}bufferSync(){return mr.buffer(this.shape,this.dtype,this.dataSync())}array(){var t=this;return(0,M.Z)(function*(){const e=yield t.data();return Dn(t.shape,e)})()}arraySync(){return Dn(this.shape,this.dataSync())}data(){var t=this;return(0,M.Z)(function*(){t.throwIfDisposed();const e=Gn().read(t.dataId);if("string"===t.dtype){const s=yield e;try{return s.map(r=>fr(r))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e})()}dataSync(){this.throwIfDisposed();const t=Gn().readSync(this.dataId);if("string"===this.dtype)try{return t.map(e=>fr(e))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}bytes(){var t=this;return(0,M.Z)(function*(){t.throwIfDisposed();const e=yield Gn().read(t.dataId);return"string"===t.dtype?e:new Uint8Array(e.buffer)})()}dispose(){this.isDisposed||(Gn().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return mr.print(this,t)}clone(){return this.throwIfDisposed(),mr.clone(this)}toString(t=!1){return u0(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),mr.cast(this,t)}variable(t=!0,e,s){return this.throwIfDisposed(),Gn().makeVariable(this,t,e,s)}}Object.defineProperty(O,Symbol.hasInstance,{value:n=>!!n&&null!=n.data&&null!=n.dataSync&&null!=n.throwIfDisposed});class Hi extends O{constructor(t,e,s,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=s}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!Se(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);Gn().disposeTensor(this),this.dataId=t.dataId,Gn().incRef(this,null)}dispose(){Gn().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(Hi,Symbol.hasInstance,{value:n=>n instanceof O&&null!=n.assign&&n.assign instanceof Function});var ji=(()=>{return(n=ji||(ji={})).float32="float32",n.int32="int32",n.bool="int32",n.complex64="complex64",ji;var n})(),qi=(()=>{return(n=qi||(qi={})).float32="float32",n.int32="int32",n.bool="bool",n.complex64="complex64",qi;var n})(),Ki=(()=>{return(n=Ki||(Ki={})).float32="float32",n.int32="float32",n.bool="float32",n.complex64="complex64",Ki;var n})(),Xi=(()=>{return(n=Xi||(Xi={})).float32="complex64",n.int32="complex64",n.bool="complex64",n.complex64="complex64",Xi;var n})();const m0={float32:Ki,int32:ji,bool:qi,complex64:Xi};function ln(n,t){if("string"===n||"string"===t){if("string"===n&&"string"===t)return"string";throw new Error(`Can not upcast ${n} with ${t}`)}return m0[n][t]}function pc(n){return ln(n,"int32")}function ft(n,t){if(n.dtype===t.dtype)return[n,t];const e=ln(n.dtype,t.dtype);return[n.cast(e),t.cast(e)]}function Hp(n){const t=[];return jp(n,t,new Set),t}function jp(n,t,e){if(null==n)return;if(n instanceof O)return void t.push(n);if(!function g0(n){return Array.isArray(n)||"object"==typeof n}(n))return;const s=n;for(const r in s){const o=s[r];e.has(o)||(e.add(o),jp(o,t,e))}}class qp{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}let y0=(()=>{class n{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new qp}ready(){var e=this;return(0,M.Z)(function*(){if(null!=e.pendingBackendInit)return e.pendingBackendInit.then(()=>{});if(null!=e.backendInstance)return;const s=e.getSortedBackends();for(let r=0;r<s.length;r++){const o=s[r];if(yield e.initializeBackend(o).success)return void(yield e.setBackend(o))}throw new Error("Could not initialize any backends, all backend initializations failed.")})()}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:s}=this.initializeBackendsAndReturnBest();if(s)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:s}=this.initializeBackend(e);if(s)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,s,r=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:s,priority:r},!0)}setBackend(e){var s=this;return(0,M.Z)(function*(){if(null==s.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(s.backendName=e,null==s.registry[e]){s.backendInstance=null;const{success:r,asyncInit:o}=s.initializeBackend(e);if(!(o?yield r:r))return!1}return s.backendInstance=s.registry[e],s.setupRegisteredKernels(),s.profiler=new r0(s.backendInstance),!0})()}setupRegisteredKernels(){uc(this.backendName).forEach(s=>{null!=s.setupFunc&&s.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){uc(e).forEach(r=>{null!=r.disposeFunc&&r.disposeFunc(this.registry[e])})}initializeBackend(e){const s=this.registryFactory[e];if(null==s)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const r=s.factory();if(!r||r instanceof ie||"function"!=typeof r.then)return this.registry[e]=r,{success:!0,asyncInit:!1};{const o=++this.pendingBackendInitId,a=r.then(i=>!(o<this.pendingBackendInitId||(this.registry[e]=i,this.pendingBackendInit=null,0))).catch(i=>(o<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(i.stack||i.message)),!1));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}}catch(r){return console.warn(`Initialization of backend ${e} failed`),console.warn(r.stack||r.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,s)=>this.registryFactory[s].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let s=0;s<e.length;s++){const r=e[s],{success:o,asyncInit:a}=this.initializeBackend(r);if(a||o)return{name:r,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,s){const r=this.state.tensorInfo.get(s),o=r.backend,a=this.readSync(s);o.disposeData(s),r.backend=e,e.move(s,a,r.shape,r.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,s){let o,r=null;if(null==s){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");s=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof s)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(o),()=>(o=s(),o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),o))}scopedRun(e,s,r){e();try{const o=r();return s(),o}catch(o){throw s(),o}}nextTensorId(){return n.nextTensorId++}nextVariableId(){return n.nextVariableId++}clone(e){const s=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype);return this.addTapeNode(this.state.activeScope.name,{x:e},[s],i=>({x:()=>{const l="float32";return D.runKernelFunc(d=>d.cast(i,l),{x:i},null,po,{dtype:l})}}),[],{}),s}runKernel(e,s,r,o,a){return this.runKernelFunc(null,s,null,e,r,o,a)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,s,r){const o=this.backend.numDataIds();let a=0;r.forEach(u=>{a+="complex64"===u.dtype?3:1});const l=o-s-a-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(l>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${l} data ids) after running '${e}'`)}runKernelFunc(e,s,r,o,a,i,l){let u,c=[];const d=this.isTapeOn();null==o&&(o=null!=this.state.activeScope?this.state.activeScope.name:"");const h=this.state.numBytes,p=this.state.numTensors;let f;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const m=function n0(n,t){const e=dc(n,t);return pr.get(e)}(o,this.backendName);let g,y;if(null!=m)f=()=>{const x=this.backend.numDataIds();g=m.kernelFunc({inputs:s,attrs:a,backend:this.backend});const v=Array.isArray(g)?g:[g];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(o,x,v);const b=v.map(w=>{if(null!=w.rank)return w;const{dataId:k,shape:N,dtype:S}=w;return this.makeTensorFromDataId(k,N,S)});if(d){let w=this.getTensorsForGradient(o,s,b);if(null==w){null==l&&(l=[]);const k=b.filter((N,S)=>l[S]);w=(i||[]).slice().concat(k)}c=this.saveTensorsForBackwardMode(w)}return b};else{if(null==e)throw new Error(`Error running ${o}: Neither modular kernel nor forward func passed`);const x=v=>{!d||(c=v.map(b=>this.keep(this.clone(b))))};f=()=>{const v=this.backend.numDataIds();g=this.tidy(()=>e(this.backend,x));const b=Array.isArray(g)?g:[g];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(o,v,b),b}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(y=this.profiler.profileKernel(o,s,()=>f()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(y),u=y.outputs):u=f()}),d&&this.addTapeNode(o,s,u,r,c,a),this.state.profiling&&this.state.activeProfile.kernels.push({name:o,bytesAdded:this.state.numBytes-h,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-p,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(s).map(x=>null!=s[x]?s[x].shape:null),outputShapes:u.map(x=>x.shape),kernelTimeMs:y.timeMs,extraInfo:y.extraInfo}),Array.isArray(g)?u:u[0]}saveTensorsForBackwardMode(e){return e.map(r=>this.keep(this.clone(r)))}getTensorsForGradient(e,s,r){const o=Bp(e);if(null!=o){const a=o.inputsToSave||[],i=o.outputsToSave||[];let l;o.saveAllInputs?(C(Array.isArray(s),()=>"saveAllInputs is true, expected inputs to be an array."),l=Object.keys(s).map(c=>s[c])):l=a.map(c=>s[c]);const u=r.filter((c,d)=>i[d]);return l.concat(u)}return null}makeTensor(e,s,r,o){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");o=o||this.backend;let a=e;"string"===(r=r||"float32")&&to(e[0])&&(a=e.map(u=>ra(u)));const i=o.write(a,s,r),l=new O(s,r,i,this.nextTensorId());if(this.incRef(l,o),"string"===r){const u=this.state.tensorInfo.get(i),c=function Hb(n){if(null==n)return 0;let t=0;return n.forEach(e=>t+=e.length),t}(a);this.state.numBytes+=c-u.bytes,u.bytes=c}return l}makeTensorFromDataId(e,s,r,o){const a=new O(s,r=r||"float32",e,this.nextTensorId());return this.incRef(a,o),a}makeVariable(e,s=!0,r,o){r=r||this.nextVariableId().toString(),null!=o&&o!==e.dtype&&(e=e.cast(o));const a=new Hi(e,s,r,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}incRef(e,s){const r=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===r){this.state.numDataBuffers++;let o=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(o=e.size*Np(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:s||this.backend,dtype:e.dtype,shape:e.shape,bytes:o,refCount:0}),this.state.numBytes+=o}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof Hi||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;const s=this.state.tensorInfo.get(e.dataId);s.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=s.bytes),this.state.numDataBuffers--,s.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):(s.backend.decComplexRef(e.dataId),this.state.tensorInfo.get(e.dataId).refCount--)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}profile(e){var s=this;return(0,M.Z)(function*(){s.state.profiling=!0;const r=s.state.numBytes,o=s.state.numTensors;s.state.activeProfile.kernels=[],s.state.activeProfile.result=yield e(),s.state.profiling=!1,s.state.activeProfile.peakBytes=Math.max(...s.state.activeProfile.kernels.map(a=>a.totalBytesSnapshot)),s.state.activeProfile.newBytes=s.state.numBytes-r,s.state.activeProfile.newTensors=s.state.numTensors-o;for(const a of s.state.activeProfile.kernels)a.kernelTimeMs=yield a.kernelTimeMs,a.extraInfo=yield a.extraInfo;return s.state.activeProfile})()}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,s,r,o,a,i){const l={id:this.state.nextTapeNodeId++,kernelName:e,inputs:s,outputs:r,saved:a},u=Bp(e);null!=u&&(o=u.gradFunc),null!=o&&(l.gradient=c=>(c=c.map((d,h)=>{if(null==d){const p=r[h],f=Ht(p.size,p.dtype);return this.makeTensor(f,p.shape,p.dtype)}return d}),o(c.length>1?c:c[0],a,i))),this.state.activeTape.push(l)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const s={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(s.name=e),this.state.scopeStack.push(s),this.state.activeScope=s}endScope(e){const s=Hp(e),r=new Set(s.map(a=>a.id));for(let a=0;a<this.state.activeScope.track.length;a++){const i=this.state.activeScope.track[a];!i.kept&&!r.has(i.id)&&i.dispose()}const o=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],s.forEach(a=>{!a.kept&&a.scopeId===o.id&&this.track(a)})}gradients(e,s,r,o=!1){if(C(s.length>0,()=>"gradients() received an empty list of xs."),null!=r&&"float32"!==r.dtype)throw new Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);const a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));C(a instanceof O,()=>"The result y returned by f() must be a tensor.");const i=function i0(n,t,e){const s={},r={};for(let l=0;l<t.length;l++)s[t[l].id]=!0;for(let l=0;l<n.length;l++){const u=n[l],c=u.inputs;for(const d in c){const h=c[d];let p=!1;for(let f=0;f<t.length;f++)if(s[h.id]){u.outputs.forEach(m=>s[m.id]=!0),p=!0,r[u.id]=!0;break}if(p)break}}const o={};o[e.id]=!0;const a={};for(let l=n.length-1;l>=0;l--){const u=n[l],c=u.inputs;for(let d=0;d<u.outputs.length;d++)if(o[u.outputs[d].id]){for(const h in c)o[c[h].id]=!0,a[u.id]=!0;break}}const i=[];for(let l=0;l<n.length;l++){const u=n[l];if(r[u.id]&&a[u.id]){const c={};for(const h in u.inputs){const p=u.inputs[h];s[p.id]&&(c[h]=p)}const d=Object.assign({},u);d.inputs=c,d.outputs=u.outputs,i.push(d)}}return i}(this.state.activeTape,s,a);if(!o&&0===i.length&&s.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const l={};l[a.id]=r??function x0(n){const t=kp(V(n),"float32");return D.makeTensor(t,n,"float32")}(a.shape),function l0(n,t,e,s){for(let r=t.length-1;r>=0;r--){const o=t[r],a=[];if(o.outputs.forEach(l=>{const u=n[l.id];a.push(null!=u?u:null)}),null==o.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);const i=o.gradient(a);for(const l in o.inputs){if(!(l in i))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(i)}.`);const u=e(()=>i[l]());if("float32"!==u.dtype)throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);const c=o.inputs[l];if(!Se(u.shape,c.shape))throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(null==n[c.id])n[c.id]=u;else{const d=n[c.id];n[c.id]=s(d,u),d.dispose()}}}}(l,i,c=>this.tidy(c),b0);const u=s.map(c=>l[c.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(c=>{for(const d of c.saved)d.dispose()}),this.state.activeTape=null),{value:a,grads:u}})}customGrad(e){return C(Cu(e),()=>"The f passed in customGrad(f) must be a function."),(...s)=>{let r;C(s.every(a=>a instanceof O),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const o={};return s.forEach((a,i)=>{o[i]=a}),this.runKernelFunc((a,i)=>(r=e(...s,i),C(r.value instanceof O,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),C(Cu(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),o,(a,i)=>{const l=r.gradFunc(a,i),u=Array.isArray(l)?l:[l];C(u.length===s.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),C(u.every(d=>d instanceof O),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const c={};return u.forEach((d,h)=>{c[h]=()=>d}),c})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}time(e){var s=this;return(0,M.Z)(function*(){const r=mn(),o=yield s.backend.time(e);return o.wallMs=mn()-r,o})()}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new qp;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}return n.nextTensorId=0,n.nextVariableId=0,n})();function Kp(){const n=Ep();if(null==n._tfengine){const t=new qb(n);n._tfengine=new y0(t)}return function Yb(n){$p=n}(n._tfengine.ENV),function h0(n){Gn=n}(()=>n._tfengine),n._tfengine}const D=Kp();function b0(n,t){return D.runKernel(hr,{a:n,b:t})}function Xp(){return typeof window<"u"&&null!=window.document||typeof WorkerGlobalScope<"u"}const Un=q();function Zi(n,t){let e=n;if(Bn(n))return"string"===t?[]:[n.length];if(!Array.isArray(n))return[];const s=[];for(;Array.isArray(e)||Bn(e)&&"string"!==t;)s.push(e.length),e=e[0];return Array.isArray(n)&&q().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Zp(n,s,[]),s}function Zp(n,t,e){if(e=e||[],!Array.isArray(n)&&!Bn(n))return void C(0===t.length,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);C(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${n.length} elements`),C(n.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${n.length} elements`);const s=t.slice(1);for(let r=0;r<n.length;++r)Zp(n[r],s,e.concat(r))}function Yp(n,t,e,s){if("string_or_numeric"!==n){if(null==n)throw new Error("Expected dtype cannot be null.");if("numeric"!==n&&n!==t||"numeric"===n&&"string"===t)throw new Error(`Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`)}}function I(n,t,e,s="numeric"){if(n instanceof O)return Yp(s,n.dtype,t,e),n;let r=no(n);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Yp(s,r,t,e),null==n||!Bn(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${null==n?"null":n.constructor.name}'`);const o=Zi(n,r);!Bn(n)&&!Array.isArray(n)&&(n=[n]);const i="string"!==r?Vs(n,r):Ve(n,[],!0);return D.makeTensor(i,o,r)}function Jp(n,t,e,s="numeric"){if(!Array.isArray(n))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return n.map((o,a)=>I(o,`${t}[${a}]`,e,s))}function $(n){const t=Object.keys(n);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0];const s=n[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e+="__op";const r=(...o)=>{D.startScope(e);try{const a=s(...o);return Tp(a)&&console.error("Cannot return a Promise inside of tidy."),D.endScope(a),a}catch(a){throw D.endScope(null),a}};return Object.defineProperty(r,"name",{value:e,configurable:!0}),r}Un.registerFlag("DEBUG",()=>!1,n=>{n&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Un.registerFlag("IS_BROWSER",()=>Xp()),Un.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"),Un.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Un.registerFlag("PROD",()=>!1),Un.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Un.getBool("DEBUG")),Un.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Un.registerFlag("IS_TEST",()=>!1),Un.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0);const gr=$({complex_:function C0(n,t){const e=I(n,"real","complex"),s=I(t,"imag","complex");return Me(e.shape,s.shape,`real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`),D.runKernel(Du,{real:e,imag:s})}});function Yi(n,t,e,s){if(null==s&&(s=no(n)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Bn(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Sp(t);const r=V(t),o=V(e);C(r===o,()=>`Based on the provided shape, [${t}], the tensor should have ${r} values but has ${o}`);for(let a=0;a<e.length;++a){const i=e[a],l=a!==e.length-1||i!==V(t.slice(a));C(e[a]===t[a]||!l,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!Bn(n)&&!Array.isArray(n)&&(n=[n]),t=t||e,n="string"!==s?Vs(n,s):Ve(n,[],!0),D.makeTensor(n,t,s)}function Qp(n,t){return gc.apply(this,arguments)}function gc(){return gc=(0,M.Z)(function*(n,t){const e=[],s=[],r=Array.isArray(n)?n.map(a=>a.name):Object.keys(n);for(let a=0;a<r.length;++a){const i=r[a],l=Array.isArray(n)?n[a].tensor:n[i];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype&&"complex64"!==l.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${l.dtype}`);const u={name:i,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){const c=new Promise(function(){var d=(0,M.Z)(function*(h){const p=yield l.bytes(),f=p.reduce((y,x)=>y+x.length,0)+4*p.length,m=new Uint8Array(f);let g=0;for(let y=0;y<p.length;y++){const x=p[y],v=new Uint8Array(new Uint32Array([x.length]).buffer);m.set(v,g),g+=4,m.set(x,g),g+=x.length}h(m)});return function(h){return d.apply(this,arguments)}}());s.push(c)}else s.push(l.data());null!=t&&(u.group=t),e.push(u)}return{data:I0(yield Promise.all(s)),specs:e}}),gc.apply(this,arguments)}function I0(n){if(null===n)throw new Error(`Invalid input value: ${JSON.stringify(n)}`);let t=0;const e=[];n.forEach(o=>{if(t+=o.byteLength,e.push(o.byteLength===o.buffer.byteLength?o:new o.constructor(o)),!(o instanceof Float32Array||o instanceof Int32Array||o instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${o.constructor.name}`)});const s=new Uint8Array(t);let r=0;return e.forEach(o=>{s.set(new Uint8Array(o.buffer),r),r+=o.byteLength}),s.buffer}const yc=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function ef(n){return yc?Buffer.byteLength(n):new Blob([n]).size}function xc(n){if(1===n.length)return n[0];let t=0;n.forEach(r=>{t+=r.byteLength});const e=new Uint8Array(t);let s=0;return n.forEach(r=>{e.set(new Uint8Array(r),s),s+=r.byteLength}),e.buffer}function Qi(n){if(n.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==n.modelTopology?0:ef(JSON.stringify(n.modelTopology)),weightSpecsBytes:null==n.weightSpecs?0:ef(JSON.stringify(n.weightSpecs)),weightDataBytes:null==n.weightData?0:n.weightData.byteLength}}class dt{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==dt.instance&&(dt.instance=new dt),dt.instance}static registerSaveRouter(t){dt.getInstance().saveRouters.push(t)}static registerLoadRouter(t){dt.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return dt.getHandlers(t,"save")}static getLoadHandlers(t,e){return dt.getHandlers(t,"load",e)}static getHandlers(t,e,s){const r=[];return("load"===e?dt.getInstance().loadRouters:dt.getInstance().saveRouters).forEach(a=>{const i=a(t,s);null!==i&&r.push(i)}),r}}const el="tensorflowjs",Bs="models_store",ys="model_info_store";function vc(){if(!q().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const n=typeof window>"u"?self:window,t=n.indexedDB||n.mozIndexedDB||n.webkitIndexedDB||n.msIndexedDB||n.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Nc(n){const t=n.result;t.createObjectStore(Bs,{keyPath:"modelPath"}),t.createObjectStore(ys,{keyPath:"modelPath"})}let yr=(()=>{class n{constructor(e){if(this.indexedDB=vc(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}save(e){var s=this;return(0,M.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return s.databaseAction(s.modelPath,e)})()}load(){var e=this;return(0,M.Z)(function*(){return e.databaseAction(e.modelPath)})()}databaseAction(e,s){return new Promise((r,o)=>{const a=this.indexedDB.open(el,1);a.onupgradeneeded=()=>Nc(a),a.onsuccess=()=>{const i=a.result;if(null==s){const l=i.transaction(Bs,"readonly"),c=l.objectStore(Bs).get(this.modelPath);c.onsuccess=()=>{if(null==c.result)return i.close(),o(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));r(c.result.modelArtifacts)},c.onerror=d=>(i.close(),o(c.error)),l.oncomplete=()=>i.close()}else{const l=Qi(s),u=i.transaction(ys,"readwrite");let c=u.objectStore(ys);const d=c.put({modelPath:this.modelPath,modelArtifactsInfo:l});let h;d.onsuccess=()=>{h=i.transaction(Bs,"readwrite");const f=h.objectStore(Bs).put({modelPath:this.modelPath,modelArtifacts:s,modelArtifactsInfo:l});f.onsuccess=()=>r({modelArtifactsInfo:l}),f.onerror=m=>{c=u.objectStore(ys);const g=c.delete(this.modelPath);g.onsuccess=()=>(i.close(),o(f.error)),g.onerror=y=>(i.close(),o(f.error))}},d.onerror=p=>(i.close(),o(d.error)),u.oncomplete=()=>{null==h?i.close():h.oncomplete=()=>i.close()}}},a.onerror=i=>o(a.error)})}}return n.URL_SCHEME="indexeddb://",n})();const sf=n=>q().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(yr.URL_SCHEME)?function R0(n){return new yr(n)}(n.slice(yr.URL_SCHEME.length)):null;dt.registerSaveRouter(sf),dt.registerLoadRouter(sf);class F0{constructor(){this.indexedDB=vc()}listModels(){var t=this;return(0,M.Z)(function*(){return new Promise((e,s)=>{const r=t.indexedDB.open(el,1);r.onupgradeneeded=()=>Nc(r),r.onsuccess=()=>{const o=r.result,a=o.transaction(ys,"readonly"),l=a.objectStore(ys).getAll();l.onsuccess=()=>{const u={};for(const c of l.result)u[c.modelPath]=c.modelArtifactsInfo;e(u)},l.onerror=u=>(o.close(),s(l.error)),a.oncomplete=()=>o.close()},r.onerror=o=>s(r.error)})})()}removeModel(t){var e=this;return(0,M.Z)(function*(){return t=function O0(n){return n.startsWith(yr.URL_SCHEME)?n.slice(yr.URL_SCHEME.length):n}(t),new Promise((s,r)=>{const o=e.indexedDB.open(el,1);o.onupgradeneeded=()=>Nc(o),o.onsuccess=()=>{const a=o.result,i=a.transaction(ys,"readwrite"),l=i.objectStore(ys),u=l.get(t);let c;u.onsuccess=()=>{if(null==u.result)return a.close(),r(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const d=l.delete(t),h=()=>{c=a.transaction(Bs,"readwrite");const f=c.objectStore(Bs).delete(t);f.onsuccess=()=>s(u.result.modelArtifactsInfo),f.onerror=m=>r(u.error)};d.onsuccess=h,d.onerror=p=>(h(),a.close(),r(u.error))}},u.onerror=d=>(a.close(),r(u.error)),i.oncomplete=()=>{null==c?a.close():c.oncomplete=()=>a.close()}},o.onerror=a=>r(o.error)})})()}}const Hn="/",Ws="tensorflowjs_models",rf="info",P0="model_topology",L0="weight_specs",M0="weight_data",z0="model_metadata";function of(n){return{info:[Ws,n,rf].join(Hn),topology:[Ws,n,P0].join(Hn),weightSpecs:[Ws,n,L0].join(Hn),weightData:[Ws,n,M0].join(Hn),modelMetadata:[Ws,n,z0].join(Hn)}}function af(n){const t=n.split(Hn);if(t.length<3)throw new Error(`Invalid key format: ${n}`);return t.slice(1,t.length-1).join(Hn)}let xr=(()=>{class n{constructor(e){if(!q().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=of(this.modelPath)}save(e){var s=this;return(0,M.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const r=JSON.stringify(e.modelTopology),o=JSON.stringify(e.weightSpecs),a=Qi(e);try{s.LS.setItem(s.keys.info,JSON.stringify(a)),s.LS.setItem(s.keys.topology,r),s.LS.setItem(s.keys.weightSpecs,o),s.LS.setItem(s.keys.weightData,function S0(n){if(yc)return Buffer.from(n).toString("base64");const t=new Uint8Array(n);let e="";for(let s=0,r=t.length;s<r;s++)e+=String.fromCharCode(t[s]);return btoa(e)}(e.weightData));const i={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(i.signature=e.signature),null!=e.userDefinedMetadata&&(i.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(i.modelInitializer=e.modelInitializer),s.LS.setItem(s.keys.modelMetadata,JSON.stringify(i)),{modelArtifactsInfo:a}}catch{throw s.LS.removeItem(s.keys.info),s.LS.removeItem(s.keys.topology),s.LS.removeItem(s.keys.weightSpecs),s.LS.removeItem(s.keys.weightData),s.LS.removeItem(s.keys.modelMetadata),new Error(`Failed to save model '${s.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${a.modelTopologyBytes}, weightSpecsBytes=${a.weightSpecsBytes}, weightDataBytes=${a.weightDataBytes}.`)}}})()}load(){var e=this;return(0,M.Z)(function*(){const s=JSON.parse(e.LS.getItem(e.keys.info));if(null==s)throw new Error(`In local storage, there is no model with name '${e.modelPath}'`);if("JSON"!==s.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const r={},o=JSON.parse(e.LS.getItem(e.keys.topology));if(null==o)throw new Error(`In local storage, the topology of model '${e.modelPath}' is missing.`);r.modelTopology=o;const a=JSON.parse(e.LS.getItem(e.keys.weightSpecs));if(null==a)throw new Error(`In local storage, the weight specs of model '${e.modelPath}' are missing.`);r.weightSpecs=a;const i=e.LS.getItem(e.keys.modelMetadata);if(null!=i){const u=JSON.parse(i);r.format=u.format,r.generatedBy=u.generatedBy,r.convertedBy=u.convertedBy,null!=u.signature&&(r.signature=u.signature),null!=u.userDefinedMetadata&&(r.userDefinedMetadata=u.userDefinedMetadata),null!=u.modelInitializer&&(r.modelInitializer=u.modelInitializer)}const l=e.LS.getItem(e.keys.weightData);if(null==l)throw new Error(`In local storage, the binary weight values of model '${e.modelPath}' are missing.`);return r.weightData=function T0(n){if(yc){const s=Buffer.from(n,"base64");return s.buffer.slice(s.byteOffset,s.byteOffset+s.byteLength)}const t=atob(n),e=new Uint8Array(t.length);for(let s=0;s<t.length;++s)e.set([t.charCodeAt(s)],s);return e.buffer}(l),r})()}}return n.URL_SCHEME="localstorage://",n})();const lf=n=>q().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(xr.URL_SCHEME)?function B0(n){return new xr(n)}(n.slice(xr.URL_SCHEME.length)):null;dt.registerSaveRouter(lf),dt.registerLoadRouter(lf);class W0{constructor(){C(q().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),C(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}listModels(){var t=this;return(0,M.Z)(function*(){const e={},s=Ws+Hn,r=Hn+rf;for(let o=0;o<t.LS.length;++o){const a=t.LS.key(o);a.startsWith(s)&&a.endsWith(r)&&(e[af(a)]=JSON.parse(t.LS.getItem(a)))}return e})()}removeModel(t){var e=this;return(0,M.Z)(function*(){const s=of(t=function V0(n){return n.startsWith(xr.URL_SCHEME)?n.slice(xr.URL_SCHEME.length):n}(t));if(null==e.LS.getItem(s.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(e.LS.getItem(s.info));return e.LS.removeItem(s.info),e.LS.removeItem(s.topology),e.LS.removeItem(s.weightSpecs),e.LS.removeItem(s.weightData),r})()}}class nn{constructor(){this.managers={}}static getInstance(){return null==nn.instance&&(nn.instance=new nn),nn.instance}static registerManager(t,e){C(null!=t,()=>"scheme must not be undefined or null."),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),C(t.length>0,()=>"scheme must not be an empty string.");const s=nn.getInstance();C(null==s.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),s.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}class G0{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}if(q().get("IS_BROWSER")){q().setPlatform("browser",new G0);try{nn.registerManager(xr.URL_SCHEME,new W0)}catch{}try{nn.registerManager(yr.URL_SCHEME,new F0)}catch{}}let wr;function Ae(n,t="float32",e){return t=t||"float32",Sp(n),new jt(n,t,e)}q().get("IS_NODE")&&q().setPlatform("node",new class H0{constructor(){this.util=ae(8628),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=q().global.fetch?q().global.fetch(t,e):(null==wr&&(wr=ae(5410)),wr(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}});const me=$({cast_:function j0(n,t){const e=I(n,"x","cast");if(!function Ub(n){return"bool"===n||"complex64"===n||"float32"===n||"int32"===n||"string"===n}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==e.dtype||"string"!==t&&"string"===e.dtype)throw new Error("Only strings can be casted to strings");return D.runKernel(po,{x:e},{dtype:t})}}),vr=$({clone_:function q0(n){const e={x:I(n,"x","clone","string_or_numeric")};return D.runKernel(ai,e)}});function cf(n){return new Promise(t=>setTimeout(t)).then(n)}Kp(),function p0(n){mr=n}({buffer:Ae,cast:me,clone:vr,print:function K0(n,t=!1){console.log(n.toString(t))}});let _c=(()=>{class n{constructor(e){if(!q().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(n.URL_SCHEME)&&(e=e.slice(n.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}save(e){var s=this;return(0,M.Z)(function*(){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");const r=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const a={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:[{paths:["./"+s.weightDataFileName],weights:e.weightSpecs}]};null!=e.signature&&(a.signature=e.signature),null!=e.userDefinedMetadata&&(a.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(a.modelInitializer=e.modelInitializer);const i=window.URL.createObjectURL(new Blob([JSON.stringify(a)],{type:"application/json"})),l=s.jsonAnchor??document.createElement("a");if(l.download=s.modelTopologyFileName,l.href=i,yield cf(()=>l.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const u=s.weightDataAnchor??document.createElement("a");u.download=s.weightDataFileName,u.href=r,yield cf(()=>u.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Qi(e)}}})()}}return n.URL_SCHEME="downloads://",n})();function df(n,t,e,s){(function a(l){C(null!=l&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")})(n),function i(l,u){C(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),C(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),C(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}(e=e??0,s=s??1);let r=0;return Promise.all(n.map(l=>(l.then(u=>{const c=e+ ++r/n.length*(s-e);return t(c),u}),l)))}function hf(n,t){return $c.apply(this,arguments)}function $c(){return($c=(0,M.Z)(function*(n,t){null==t&&(t={});const e=t.fetchFunc??q().platform.fetch,s=n.map(d=>e(d,t.requestInit,{isBinary:!0})),i=(null==t.onProgress?yield Promise.all(s):yield df(s,t.onProgress,0,.5)).map(d=>d.arrayBuffer());return null==t.onProgress?yield Promise.all(i):yield df(i,t.onProgress,.5,1)})).apply(this,arguments)}dt.registerSaveRouter(n=>q().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(_c.URL_SCHEME)?function ew(n="model"){return new _c(n)}(n.slice(_c.URL_SCHEME.length)):null);let pf=(()=>{class n{constructor(e,s){if(this.DEFAULT_METHOD="POST",null==s&&(s={}),this.weightPathPrefix=s.weightPathPrefix,this.onProgress=s.onProgress,this.weightUrlConverter=s.weightUrlConverter,null!=s.fetchFunc?(C("function"==typeof s.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=s.fetchFunc):this.fetch=q().platform.fetch,C(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&C(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=s.requestInit&&null!=s.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=s.requestInit||{}}save(e){var s=this;return(0,M.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const r=Object.assign({method:s.DEFAULT_METHOD},s.requestInit);r.body=new FormData;const a={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:[{paths:["./model.weights.bin"],weights:e.weightSpecs}]};null!=e.signature&&(a.signature=e.signature),null!=e.userDefinedMetadata&&(a.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(a.modelInitializer=e.modelInitializer),r.body.append("model.json",new Blob([JSON.stringify(a)],{type:"application/json"}),"model.json"),null!=e.weightData&&r.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const i=yield s.fetch(s.path,r);if(i.ok)return{modelArtifactsInfo:Qi(e),responses:[i]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${i.status}.`)})()}load(){var e=this;return(0,M.Z)(function*(){const s=yield e.fetch(e.path,e.requestInit);if(!s.ok)throw new Error(`Request to ${e.path} failed with status code ${s.status}. Please verify this URL points to the model JSON of the model to load.`);let r;try{r=yield s.json()}catch{let y=`Failed to parse model JSON of response from ${e.path}.`;throw e.path.endsWith(".pb")?y+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":y+=" Please make sure the server is serving valid JSON for this request.",new Error(y)}const o=r.modelTopology,a=r.weightsManifest,i=r.generatedBy,l=r.convertedBy,u=r.format,c=r.signature,d=r.userDefinedMetadata;if(null==o&&null==a)throw new Error(`The JSON from HTTP path ${e.path} contains neither model topology or manifest for weights.`);let h,p;null!=a&&([h,p]=yield e.loadWeights(a));const f={modelTopology:o,weightSpecs:h,weightData:p,generatedBy:i,convertedBy:l,format:u};null!=c&&(f.signature=c),null!=d&&(f.userDefinedMetadata=d);const m=r.modelInitializer;return m&&(f.modelInitializer=m),f})()}loadWeights(e){var s=this;return(0,M.Z)(function*(){const r=Array.isArray(s.path)?s.path[1]:s.path,[o,a]=function rw(n){const t=n.lastIndexOf("/"),e=n.lastIndexOf("?");return[n.substring(0,t)+"/",e>t?n.substring(e):""]}(r),i=s.weightPathPrefix||o,l=[];for(const h of e)l.push(...h.weights);const u=[],c=[];for(const h of e)for(const p of h.paths)null!=s.weightUrlConverter?c.push(s.weightUrlConverter(p)):u.push(i+p+a);return s.weightUrlConverter&&u.push(...yield Promise.all(c)),[l,xc(yield hf(u,{requestInit:s.requestInit,fetchFunc:s.fetch,onProgress:s.onProgress}))]})()}}return n.URL_SCHEME_REGEX=/^https?:\/\//,n})();function ff(n){return null!=n.match(pf.URL_SCHEME_REGEX)}const mf=(n,t)=>{if(typeof fetch>"u"&&(null==t||null==t.fetchFunc))return null;{let e=!0;if(e=Array.isArray(n)?n.every(s=>ff(s)):ff(n),e)return function gf(n,t){return new pf(n,t)}(n,t)}return null};function Ac(n,t,e){const s=n.shape.length;C(s===t.length,()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`),C(s===e.length,()=>`Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`);for(let r=0;r<s;++r)C(t[r]+e[r]<=n.shape[r],()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+e[r]}) would overflow input.shape[${r}] (${n.shape[r]})`)}function nl(n){const t=[];let e=0;for(;n>0;)1&n&&t.push(e),n/=2,e++;return t}function yf(n,t,e){const s=[];for(let r=0;r<n.length;r++)s[r]=Math.ceil((t[r]-n[r])/e[r]);return s}function xf(n,t,e,s){const r=[...n];for(let o=r.length;o<s.length;o++)r.push(1);for(let o=0;o<e;o++)0===o?r[t]=1:(r.splice(t,0,1),r.pop());return r}function bf(n,t,e){return e<=n?e:e-(t-1)}function wf(n,t){const e=[];for(let s=0;s<n;s++)e.push(t+s);return e}function vf(n,t,e,s,r,o,a,i,l){const u=n.length;let c=new Array(u),d=new Array(u),h=new Array(u);if(t.length&&e>0){const p=t[0],f=e+1;c=Nf(a,p,f,s,n),d=Cf(i,p,f,r,n),h=xf(o,p,f,n)}else for(let p=0;p<u;p++)c[p]=If(a,s,o,n,p,l),d[p]=Sf(i,r,o,n,p,l),h[p]=kf(o,p,l);return{begin:c,end:d,strides:h}}function Nf(n,t,e,s,r){const o=[...r],a=wf(e,t);for(let i=0;i<o.length;i++)if(a.indexOf(i)>-1)o[i]=0;else{const l=bf(t,e,i);let u=s[l];n&1<<l&&(u=0),o[i]=u}return o}function Cf(n,t,e,s,r){const o=[...r],a=wf(e,t);for(let i=0;i<o.length;i++)if(a.indexOf(i)>-1)o[i]=Number.MAX_SAFE_INTEGER;else{const l=bf(t,e,i);let u=s[l];n&1<<l&&(u=Number.MAX_SAFE_INTEGER),o[i]=u}for(let i=0;i<o.length;i++){const l=r[i];o[i]<0&&(o[i]+=l),o[i]=pe(0,o[i],r[i])}return o}function kf(n,t,e){let s=n[t];return(e&1<<t||null==s)&&(s=1),s}function If(n,t,e,s,r,o){let a=t[r];(n&1<<r||o&1<<r||null==a)&&(a=(e[r]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return a<0&&(a+=l),a=pe(0,a,l-1),a}function Sf(n,t,e,s,r,o){let a=t[r];const i=e[r]||1;(n&1<<r||o&1<<r||null==a)&&(a=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return a<0&&(a+=l),a=i>0?pe(0,a,l):pe(-1,a,l-1),a}function Rc(n,t,e){let s=e.length;for(let r=0;r<e.length;r++)if(e[r]>1){s=r;break}for(let r=s+1;r<e.length;r++)if(t[r]>0||e[r]!==n[r])return!1;return!0}function Oc(n,t){let e=n.length>0?n[n.length-1]:1;for(let s=0;s<n.length-1;s++)e+=n[s]*t[s];return e}function sl(n,t,e){let s;const r=n.shape.length;let o;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach(a=>{C(-1!==a,()=>"slice() does not support negative begin indexing.")}),o=null==e?new Array(r).fill(-1):"number"==typeof e?[e,...new Array(r-1).fill(-1)]:e.length<r?e.concat(new Array(r-e.length).fill(-1)):e,o=o.map((a,i)=>a>=0?a:(C(-1===a,()=>`Negative size values should be exactly -1 but got ${a} for the slice() size at index ${i}.`),n.shape[i]-s[i])),[s,o]}function Fc(n,t,e,s,r,o,a,i,l){let u=t.slice(),c=e.slice(),d=s;null==s&&(d=new Array(u.length));const h=nl(a);if(h.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==a&&0!==i)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==a&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const p=n.length-u.length,f=nl(i),m=n.slice();f.forEach(N=>{u[N]=0,c[N]=1,m.splice(N,0,1)});const{begin:g,end:y,strides:x}=vf(m,h,p,u,c,d,r,o,a);u=g,c=y,d=x;const v=nl(l);v.forEach(N=>{c[N]=u[N]+1,d[N]=1});const b=yf(u,c,d),w=b.filter((N,S)=>-1===v.indexOf(S));return{nonStrided:d.every(N=>1===N),$begin:u,$end:c,$strides:d,size:b,newShape:m,outShape:w}}dt.registerSaveRouter(mf),dt.registerLoadRouter(mf);class Nr{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class gn{constructor(){this.classNameMap={}}static getMap(){return null==gn.instance&&(gn.instance=new gn),gn.instance}static register(t){gn.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function Z(n){C(null!=n.className,()=>"Class being registered does not have the static className property defined."),C("string"==typeof n.className,()=>"className is required to be a string, but got type "+typeof n.className),C(n.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),gn.register(n)}function Et(n){q().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(n+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Cr(){return D}function Pc(){return D.memory()}function F(n,t){return D.tidy(n,t)}function De(n){Hp(n).forEach(e=>e.dispose())}function jn(n){return D.keep(n)}function Tf(n,t,e=1){return D.registerBackend(n,t,e)}function ss(n){return D.customGrad(n)}function Ne(n,t){if((Bn(n)&&"string"!==t||Array.isArray(n))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Bn(n)&&!(n instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Yi(n,[],[],t)}!function f0(n){Up=n}(Et);class xs extends Nr{minimize(t,e=!1,s){const{value:r,grads:o}=this.computeGradients(t,s);if(null!=s){const a=s.map(i=>({name:i.name,tensor:o[i.name]}));this.applyGradients(a)}else this.applyGradients(o);return De(o),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return function lw(n,t){C(Cu(n),()=>"The f passed in variableGrads(f) must be a function"),C(null==t||Array.isArray(t)&&t.every(u=>u instanceof Hi),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const e=null!=t;if(!e){t=[];for(const u in D.registeredVariables)t.push(D.registeredVariables[u])}const s=e?t.filter(u=>!u.trainable):null,r=t.length;C((t=t.filter(u=>u.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);const{value:a,grads:i}=D.gradients(n,t,null,!0);C(i.some(u=>null!=u),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),C(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const l={};return t.forEach((u,c)=>{null!=i[c]&&(l[u.name]=i[c])}),s?.forEach(u=>l[u.name]=null),{value:a,grads:l}}(t,e)}dispose(){null!=this.iterations_&&De(this.iterations_)}saveIterations(){var t=this;return(0,M.Z)(function*(){return null==t.iterations_&&(t.iterations_=0),{name:"iter",tensor:Ne(t.iterations_,"int32")}})()}getWeights(){return(0,M.Z)(function*(){throw new Error("getWeights() is not implemented for this optimizer yet.")})()}setWeights(t){var e=this;return(0,M.Z)(function*(){throw new Error(`setWeights() is not implemented for this optimizer class ${e.getClassName()}`)})()}extractIterations(t){var e=this;return(0,M.Z)(function*(){return e.iterations_=(yield t[0].tensor.data())[0],t.slice(1)})()}}Object.defineProperty(xs,Symbol.hasInstance,{value:n=>null!=n.minimize&&null!=n.computeGradients&&null!=n.applyGradients});const Pt=$({abs_:function uw(n){const t=I(n,"x","abs");return D.runKernel("complex64"===t.dtype?qa:Va,{x:t})}}),te=$({add_:function cw(n,t){let e=I(n,"a","add"),s=I(t,"b","add");return[e,s]=ft(e,s),D.runKernel(hr,{a:e,b:s})}}),_f=$({all_:function dw(n,t=null,e=!1){const r={x:I(n,"x","all","bool")};return D.runKernel("All",r,{axis:t,keepDims:e})}}),Lc=$({any_:function hw(n,t=null,e=!1){const r={x:I(n,"x","any","bool")};return D.runKernel("Any",r,{axis:t,keepDims:e})}}),Mc=$({argMax_:function pw(n,t=0){const s={x:I(n,"x","argMax")};return D.runKernel(Ba,s,{axis:t})}});function oa(n,t,e,s,r="NHWC",o){return Dt(n,[...t,n[3]],e,o,s,null,null,os(r))}function yn(n,t,e,s,r,o,a="channelsLast"){const[i,l]=ol(t);let u;if("channelsLast"===a)u=[i,l,n[3],n[3]];else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);u=[i,l,n[1],n[1]]}return Dt(n,u,e,s,r,o,!1,a)}function rs(n,t,e,s,r,o,a="NDHWC"){const[i,l,u]=Vc(t);let c,d;if("NDHWC"===a)d="channelsLast",c=[i,l,u,n[4],n[4]];else{if("NCDHW"!==a)throw new Error(`Unknown dataFormat ${a}`);d="channelsFirst",c=[i,l,u,n[1],n[1]]}return bs(n,c,e,s,r,!1,d,o)}function Dt(n,t,e,s,r,o,a=!1,i="channelsLast"){let[l,u,c,d]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,d]=n;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,d,u,c]=n}const[h,p,,f]=t,[m,g]=ol(e),[y,x]=ol(s),v=kr(h,y),b=kr(p,x),{padInfo:w,outHeight:k,outWidth:N}=function gw(n,t,e,s,r,o,a,i,l){let u,c,d;if("number"==typeof n){u={top:n,bottom:n,left:n,right:n,type:0===n?"VALID":"NUMBER"};const p=function fw(n,t,e,s,r){null==s&&(s=zc(n,t,e));const a=n[1];return[Gs((n[0]-t+2*s)/e+1,r),Gs((a-t+2*s)/e+1,r)]}([t,e],o,s,n,i);c=p[0],d=p[1]}else if("same"===n){c=Math.ceil(t/s),d=Math.ceil(e/r);const h=Math.max(0,(c-1)*s+o-t),p=Math.max(0,(d-1)*r+a-e),f=Math.floor(h/2),m=h-f,g=Math.floor(p/2);u={top:f,bottom:m,left:g,right:p-g,type:"SAME"}}else if("valid"===n)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-o+1)/s),d=Math.ceil((e-a+1)/r);else{if("object"!=typeof n)throw Error(`Unknown padding parameter: ${n}`);{const h="channelsLast"===l?n[1][0]:n[2][0],p="channelsLast"===l?n[1][1]:n[2][1],f="channelsLast"===l?n[2][0]:n[3][0],m="channelsLast"===l?n[2][1]:n[3][1];u={top:h,bottom:p,left:f,right:m,type:0===h&&0===p&&0===f&&0===m?"VALID":"EXPLICIT"},c=Gs((t-o+h+p)/s+1,i),d=Gs((e-a+f+m)/r+1,i)}}return{padInfo:u,outHeight:c,outWidth:d}}(r,u,c,m,g,v,b,o,i),S=a?f*d:f;let _;return"channelsFirst"===i?_=[l,S,k,N]:"channelsLast"===i&&(_=[l,k,N,S]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:d,outHeight:k,outWidth:N,outChannels:S,padInfo:w,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:p,effectiveFilterHeight:v,effectiveFilterWidth:b,dilationHeight:y,dilationWidth:x,inShape:n,outShape:_,filterShape:t}}function bs(n,t,e,s,r,o=!1,a="channelsLast",i){let[l,u,c,d,h]=[-1,-1,-1,-1,-1];if("channelsLast"===a)[l,u,c,d,h]=n;else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);[l,h,u,c,d]=n}const[p,f,m,,g]=t,[y,x,v]=Vc(e),[b,w,k]=Vc(s),N=kr(p,b),S=kr(f,w),_=kr(m,k),{padInfo:A,outDepth:z,outHeight:U,outWidth:G}=function yw(n,t,e,s,r,o,a,i,l,u,c){let d,h,p,f;if("number"==typeof n){d={top:n,bottom:n,left:n,right:n,front:n,back:n,type:0===n?"VALID":"NUMBER"};const g=function mw(n,t,e,s,r,o){null==r&&(r=zc(n,t,s));const i=n[1],l=n[2];return[Gs((n[0]-t+2*r)/s+1,o),Gs((i-t+2*r)/s+1,o),Gs((l-t+2*r)/s+1,o),e]}([t,e,s,1],i,1,r,n,c);h=g[0],p=g[1],f=g[2]}else if("same"===n){h=Math.ceil(t/r),p=Math.ceil(e/o),f=Math.ceil(s/a);const m=(h-1)*r+i-t,g=(p-1)*o+l-e,y=(f-1)*a+u-s,x=Math.floor(m/2),v=m-x,b=Math.floor(g/2),w=g-b,k=Math.floor(y/2);d={top:b,bottom:w,left:k,right:y-k,front:x,back:v,type:"SAME"}}else{if("valid"!==n)throw Error(`Unknown padding parameter: ${n}`);d={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((t-i+1)/r),p=Math.ceil((e-l+1)/o),f=Math.ceil((s-u+1)/a)}return{padInfo:d,outDepth:h,outHeight:p,outWidth:f}}(r,u,c,d,y,x,v,N,S,_,i),H=o?g*h:g;let W;return"channelsFirst"===a?W=[l,H,z,U,G]:"channelsLast"===a&&(W=[l,z,U,G,H]),{batchSize:l,dataFormat:a,inDepth:u,inHeight:c,inWidth:d,inChannels:h,outDepth:z,outHeight:U,outWidth:G,outChannels:H,padInfo:A,strideDepth:y,strideHeight:x,strideWidth:v,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:S,effectiveFilterWidth:_,dilationDepth:b,dilationHeight:w,dilationWidth:k,inShape:n,outShape:W,filterShape:t}}function zc(n,t,e,s=1){const r=kr(t,s);return Math.floor((n[0]*(e-1)-e+r)/2)}function ol(n){return"number"==typeof n?[n,n,n]:2===n.length?[n[0],n[1],1]:n}function Vc(n){return"number"==typeof n?[n,n,n]:n}function kr(n,t){return t<=1?n:n+(n-1)*(t-1)}function Gs(n,t){if(!t)return Math.trunc(n);switch(t){case"round":return Math.round(n);case"ceil":return Math.ceil(n);case"floor":return Math.floor(n);default:throw new Error(`Unknown roundingMode ${t}`)}}function ws(n){const[t,e,s]=ol(n);return 1===t&&1===e&&1===s}function mt(n,t){return ws(n)||ws(t)}function os(n){if("NHWC"===n)return"channelsLast";if("NCHW"===n)return"channelsFirst";throw new Error(`Unknown dataFormat ${n}`)}const L=$({reshape_:function xw(n,t){const s={x:I(n,"x","reshape","string_or_numeric")};return D.runKernel(Ti,s,{shape:t})}}),Bc=$({avgPool_:function bw(n,t,e,s,r){const o=I(n,"x","avgPool","float32");C(mt(e,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`);let i=o,l=!1;3===o.rank&&(l=!0,i=L(o,[1,o.shape[0],o.shape[1],o.shape[2]])),C(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),null!=r&&C(We(s),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);let d=D.runKernel(Ga,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return d=me(d,o.dtype),l?L(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),vw=$({avgPool3d_:function ww(n,t,e,s,r,o="NDHWC",a){null==a?a=[1,1,1]:Et("dilations is deprecated, this field will be gone in v3.0.0.");const i=I(n,"x","avgPool3d","float32");let l=i,u=!1;4===i.rank&&(u=!0,l=L(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),C(5===l.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`),C("NDHWC"===o,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),C(mt(e,a),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${e} and dilations '${a}'`),null!=r&&C(We(s),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);let h=D.runKernel(Ua,{x:l},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:o,dilations:a});return h=me(h,l.dtype),u?L(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});function Nw(n){let t;return t=0===n.rank||1===n.rank?L(n,[1,1,1,n.size]):2===n.rank?L(n,[1,1,n.shape[0],n.shape[1]]):3===n.rank?L(n,[1,n.shape[0],n.shape[1],n.shape[2]]):n,t}const al=$({batchNorm_:function Cw(n,t,e,s,r,o){null==o&&(o=.001);const a=I(n,"x","batchNorm"),i=I(t,"mean","batchNorm"),l=I(e,"variance","batchNorm");let u,c;null!=r&&(u=I(r,"scale","batchNorm")),null!=s&&(c=I(s,"offset","batchNorm")),C(i.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),C(null==c||i.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),C(null==u||i.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h={x:Nw(a),scale:u,offset:c,mean:i,variance:l},f=D.runKernel(si,h,{varianceEpsilon:o});return L(f,a.shape)}}),Iw=$({batchNorm2d_:function kw(n,t,e,s,r,o){const a=I(n,"x","batchNorm"),i=I(t,"mean","batchNorm"),l=I(e,"variance","batchNorm");let u,c;return null!=r&&(u=I(r,"scale","batchNorm")),null!=s&&(c=I(s,"offset","batchNorm")),C(2===a.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${a.rank}.`),C(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),C(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&C(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&C(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),al(a,i,l,c,u,o)}}),Tw=$({batchNorm3d_:function Sw(n,t,e,s,r,o){const a=I(n,"x","batchNorm"),i=I(t,"mean","batchNorm"),l=I(e,"variance","batchNorm");let u,c;return null!=r&&(u=I(r,"scale","batchNorm")),null!=s&&(c=I(s,"offset","batchNorm")),C(3===a.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${a.rank}.`),C(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),C(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&C(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&C(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),al(a,i,l,c,u,o)}}),$w=$({batchNorm4d_:function _w(n,t,e,s,r,o){const a=I(n,"x","batchNorm"),i=I(t,"mean","batchNorm"),l=I(e,"variance","batchNorm");let u,c;return null!=r&&(u=I(r,"scale","batchNorm")),null!=s&&(c=I(s,"offset","batchNorm")),C(4===a.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${a.rank}.`),C(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),C(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&C(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&C(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),al(a,i,l,c,u,o)}}),un=$({clipByValue_:function Ew(n,t,e){const s=I(n,"x","clipByValue");return C(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`),D.runKernel(mo,{x:s},{clipValueMin:t,clipValueMax:e})}}),Lt=$({concat_:function Dw(n,t=0){C(n.length>=1,()=>"Pass at least one tensor to concat");const e=Jp(n,"tensors","concat","string_or_numeric");return"complex64"===e[0].dtype&&e.forEach(o=>{if("complex64"!==o.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${o.dtype}. `)}),1===e.length?vr(e[0]):D.runKernel(Ka,e,{axis:t})}}),Rw=$({concat1d_:function Aw(n){return Lt(n,0)}}),Fw=$({concat2d_:function Ow(n,t){return Lt(n,t)}}),Lw=$({concat3d_:function Pw(n,t){return Lt(n,t)}}),zw=$({concat4d_:function Mw(n,t){return Lt(n,t)}}),Us=$({conv2d_:function Vw(n,t,e,s,r="NHWC",o=[1,1],a){const i=I(n,"x","conv2d"),l=I(t,"filter","conv2d");let u=i,c=!1;3===i.rank&&(c=!0,u=L(i,[1,i.shape[0],i.shape[1],i.shape[2]])),C(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),C(4===l.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),null!=a&&C(We(s),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);const d="NHWC"===r?u.shape[3]:u.shape[1];C(d===l.shape[2],()=>`Error in conv2d: depth of input (${d}) must match input depth for filter ${l.shape[2]}.`),C(mt(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`);const f=D.runKernel(Xa,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a});return c?L(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),$f=$({conv1d_:function Bw(n,t,e,s,r="NWC",o=1,a){const i=I(n,"x","conv1d"),l=I(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=L(i,[1,i.shape[0],i.shape[1]])),C(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),C(3===l.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),null!=a&&C(We(s),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`),C(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),C(mt(e,o),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${o}'`),C("NWC"===r,()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);const d=L(l,[1,l.shape[0],l.shape[1],l.shape[2]]),h=L(u,[u.shape[0],1,u.shape[1],u.shape[2]]),g=Us(h,d,[1,e],s,"NHWC",[1,o],a);return L(g,c?[g.shape[2],g.shape[3]]:[g.shape[0],g.shape[2],g.shape[3]])}}),Wc=$({conv2DBackpropInput_:function Ww(n,t,e,s,r,o="NHWC",a){C(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let i=n,l=t,u=!1;3===t.rank&&(u=!0,l=L(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,n[0],n[1],n[2]]),C(4===i.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`),C(4===l.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),C(4===e.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);const c="NHWC"===o?i[3]:i[1],d="NHWC"===o?l.shape[3]:l.shape[1];C(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),C(d===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${d}) must match output depth for filter ${e.shape[3]}.`),null!=a&&C(We(r),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`);const f=D.runKernel(Za,{dy:l,filter:e},{strides:s,pad:r,dataFormat:o,dimRoundingMode:a,inputShape:i});return u?L(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Ef=$({conv2dTranspose_:function Gw(n,t,e,s,r,o){const a=I(n,"x","conv2dTranspose"),i=I(t,"filter","conv2dTranspose");return Wc(e,a,i,s,r,"NHWC",o)}}),Hw=$({conv3d_:function Uw(n,t,e,s,r="NDHWC",o=[1,1,1]){const a=I(n,"x","conv3d"),i=I(t,"filter","conv3d");let l=a,u=!1;4===a.rank&&(u=!0,l=L(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),C(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),C(5===i.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`),C(l.shape[4]===i.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`),C(mt(e,o),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),C("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`);const h=D.runKernel(Ya,{x:l,filter:i},{strides:e,pad:s,dataFormat:r,dilations:o});return u?L(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),aa=$({depthwiseConv2d_:function jw(n,t,e,s,r="NHWC",o=[1,1],a){const i=I(n,"x","depthwiseConv2d"),l=I(t,"filter","depthwiseConv2d");let u=i,c=!1;3===i.rank&&(c=!0,u=L(i,[1,i.shape[0],i.shape[1],i.shape[2]])),C(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),C(4===l.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`),C(u.shape[3]===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),null!=a&&C(We(s),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);const p=D.runKernel(Qa,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a});return c?L(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Df=$({floorDiv_:function qw(n,t){let e=I(n,"a","floorDiv"),s=I(t,"b","floorDiv");return[e,s]=ft(e,s),D.runKernel(ko,{a:e,b:s})}}),we=$({div_:function Kw(n,t){let e=I(n,"a","div"),s=I(t,"b","div");return[e,s]=ft(e,s),"int32"===e.dtype&&"int32"===s.dtype?Df(e,s):D.runKernel(xo,{a:e,b:s},{})}}),il=$({elu_:function Xw(n){const e={x:I(n,"x","elu")};return D.runKernel(bo,e)}});function ia(n,t){const e=n.length,s=[];for(let r=0;r<e;r++){const o=e-1-r,a=n[o]||1;(t[t.length-1-r]||1)>1&&1===a&&s.unshift(o)}return s}function kt(n,t){const e=[];for(let s=0;s<t.length;s++){const r=n[n.length-s-1],o=t.length-s-1,a=t[o];(null==r||1===r&&a>1)&&e.unshift(o)}return e}function Re(n,t){const e=[],s=Math.max(n.length,t.length);for(let r=0;r<s;r++){let o=n[n.length-r-1];null==o&&(o=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===o)e.unshift(a);else if(1===a)e.unshift(o);else{if(o!==a)throw Error(`Operands could not be broadcast together with shapes ${n} and ${t}.`);e.unshift(o)}}return e}const Hs=$({equal_:function Zw(n,t){let e=I(n,"a","equal"),s=I(t,"b","equal");return[e,s]=ft(e,s),Re(e.shape,s.shape),D.runKernel(ti,{a:e,b:s})}}),An=$({expandDims_:function Yw(n,t=0){const e=I(n,"x","expandDims","string_or_numeric");return C(t<=e.rank,()=>"Axis must be <= rank of the tensor"),D.runKernel(ni,{input:e},{dim:t})}}),Ir=$({tile_:function Jw(n,t){const e=I(n,"x","tile","string_or_numeric");return C(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`),D.runKernel(Jo,{x:e},{reps:t})}}),Af=$({eye_:function Qw(n,t,e,s="float32"){null==t&&(t=n);const r=Ae([n,t],s),o=n<=t?n:t;for(let i=0;i<o;++i)r.set(1,i,i);const a=L(r.toTensor(),[n,t]);if(null==e)return a;if(1===e.length)return Ir(An(a,0),[e[0],1,1]);if(2===e.length)return Ir(An(An(a,0),0),[e[0],e[1],1,1]);if(3===e.length)return Ir(An(An(An(a,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}});function Gc(n,t,e){return D.runKernel(Gu,{},{shape:n,value:t,dtype:e})}const ll=$({floor_:function ev(n){const e={x:I(n,"x","floor")};return D.runKernel(Co,e)}}),Uc=$({gather_:function tv(n,t,e=0,s=0){const r=I(n,"x","gather"),o=I(t,"indices","gather","int32");return D.runKernel(ri,{x:r,indices:o},{axis:e,batchDims:s})}}),qn=$({greater_:function nv(n,t){let e=I(n,"a","greater"),s=I(t,"b","greater");return[e,s]=ft(e,s),Re(e.shape,s.shape),D.runKernel(oi,{a:e,b:s})}}),js=$({greaterEqual_:function sv(n,t){let e=I(n,"a","greaterEqual"),s=I(t,"b","greaterEqual");return[e,s]=ft(e,s),Re(e.shape,s.shape),D.runKernel(Io,{a:e,b:s})}}),Hc=$({leakyRelu_:function rv(n,t=.2){const s={x:I(n,"x","leakyRelu")};return D.runKernel(ii,s,{alpha:t})}}),xn=$({log_:function ov(n){const e={x:I(n,"x","log")};return D.runKernel($o,e)}}),Rn=$({exp_:function av(n){const e={x:I(n,"x","exp")};return D.runKernel(vo,e)}}),On=$({max_:function iv(n,t=null,e=!1){const r={x:I(n,"x","max")};return D.runKernel(fi,r,{reductionIndices:t,keepDims:e})}}),R=$({mul_:function lv(n,t){let e=I(n,"a","mul"),s=I(t,"b","mul");return[e,s]=ft(e,s),D.runKernel(Oo,{a:e,b:s})}}),ge=$({sub_:function uv(n,t){let e=I(n,"a","sub"),s=I(t,"b","sub");return[e,s]=ft(e,s),D.runKernel(Xo,{a:e,b:s})}}),ve=$({sum_:function cv(n,t=null,e=!1){let s=I(n,"x","sum");return"bool"===s.dtype&&(s=me(s,"int32")),D.runKernel(Ri,{x:s},{axis:t,keepDims:e})}}),Rf=$({logSoftmax_:function dv(n,t=-1){const e=I(n,"logits","logSoftmax");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return ss((r,o)=>{const i=On(r,t,!0),l=ge(r,i),u=ge(me(l,"float32"),xn(ve(Rn(l),t,!0)));return o([u]),{value:u,gradFunc:(d,h)=>{const[p]=h,m=Rn(p);return ge(d,R(ve(d,t,!0),m))}}})(e)}}),as=$({logicalAnd_:function hv(n,t){const e=I(n,"a","logicalAnd","bool"),s=I(t,"b","logicalAnd","bool");return Re(e.shape,s.shape),D.runKernel(ci,{a:e,b:s})}}),jc=$({maxPool_:function pv(n,t,e,s,r){const o=I(n,"x","maxPool");let i=o,l=!1;3===o.rank&&(l=!0,i=L(o,[1,o.shape[0],o.shape[1],o.shape[2]])),C(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),C(mt(e,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`),null!=r&&C(We(s),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const d=D.runKernel(mi,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return l?L(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),mv=$({maxPool3d_:function fv(n,t=[1,1,1],e,s,r,o="NDHWC",a){null==a?a=[1,1,1]:Et("dilations is deprecated, this field will be gone in v3.0.0.");const i=I(n,"x","maxPool3d");let l=i,u=!1;4===i.rank&&(u=!0,l=L(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),C(5===l.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`),C("NDHWC"===o,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),C(mt(e,a),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${e} and dilations '${a}'`),null!=r&&C(We(s),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const h=D.runKernel(gi,{x:l},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:o,dilations:a});return u?L(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),is=$({maximum_:function gv(n,t){let e=I(n,"a","maximum"),s=I(t,"b","maximum");return[e,s]=ft(e,s),"bool"===e.dtype&&(e=me(e,"int32"),s=me(s,"int32")),Re(e.shape,s.shape),D.runKernel(Do,{a:e,b:s})}}),gt=$({mean_:function yv(n,t=null,e=!1){const r={x:I(n,"x","mean")};return D.runKernel(yi,r,{axis:t,keepDims:e})}}),ul=$({min_:function xv(n,t=null,e=!1){const r={x:I(n,"x","min")};return D.runKernel(xi,r,{axis:t,keepDims:e})}}),la=$({minimum_:function bv(n,t){let e=I(n,"a","minimum"),s=I(t,"b","minimum");return[e,s]=ft(e,s),"bool"===e.dtype&&(e=me(e,"int32"),s=me(s,"int32")),Re(e.shape,s.shape),D.runKernel(Ao,{a:e,b:s})}});function qc(n,t){for(let e=0;e<n.length;++e)if(n[n.length-e-1]!==t-1-e)return!1;return!0}function Of(n,t,e){const s=n.length+t.length,r=[];let o=0,a=0;for(let i=0;i<s;i++)-1===e.indexOf(i)?r.push(n[o++]):r.push(t[a++]);return r}function At(n,t){const e=[],s=n.length;for(let o=0;o<s;o++)-1===t.indexOf(o)&&e.push(n[o]);return[e,t.map(o=>n[o])]}function yt(n,t){return Of(n,t.map(s=>1),t)}function Mt(n,t,e){C(qc(t,e),()=>`${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function xt(n,t){if(qc(n,t))return null;const e=[];for(let s=0;s<t;++s)-1===n.indexOf(s)&&e.push(s);return n.forEach(s=>e.push(s)),e}function Sr(n){return n.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function Nt(n,t){const e=[];for(let s=t-n;s<t;++s)e.push(s);return e}const et=$({square_:function wv(n){const t=I(n,"x","square");return D.runKernel("Square",{x:t},{})}}),Kc=$({moments_:function vv(n,t=null,e=!1){const s=Te(t,(n=I(n,"x","moments")).shape),r=gt(n,s,e);let o=r.shape;e||(o=yt(r.shape,s));const a=et(ge(me(n,"float32"),L(r,o)));return{mean:r,variance:gt(a,s,e)}}}),bt=$({neg_:function Nv(n){const e={x:I(n,"x","neg")};return D.runKernel(wi,e)}}),Tr=$({notEqual_:function Cv(n,t){let e=I(n,"a","notEqual"),s=I(t,"b","notEqual");return[e,s]=ft(e,s),Re(e.shape,s.shape),D.runKernel(vi,{a:e,b:s})}}),Ff=$({oneHot_:function kv(n,t,e=1,s=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const o={indices:I(n,"indices","oneHot","int32")};return D.runKernel(Ci,o,{depth:t,onValue:e,offValue:s})}});function It(n,t="float32"){if("complex64"===t){const s=It(n,"float32"),r=It(n,"float32");return gr(s,r)}const e=Ht(V(n),t);return D.makeTensor(e,n,t)}function vs(n,t="float32"){if("complex64"===t){const s=vs(n,"float32"),r=It(n,"float32");return gr(s,r)}const e=kp(V(n),t);return D.makeTensor(e,n,t)}const bn=$({onesLike_:function Iv(n){const e={x:I(n,"x","onesLike")};return D.runKernel(Ni,e)}}),Xc=$({pad_:function Sv(n,t,e=0){const s=I(n,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return D.runKernel(Ii,{x:s},{paddings:t,constantValue:e})}}),Zc=$({prelu_:function Tv(n,t){const e=I(n,"x","prelu"),s=I(t,"alpha","prelu");return D.runKernel(Si,{x:e,alpha:s})}});var Yc=ae(340);class Jc{constructor(t,e,s,r,o){this.mean=t,this.stdDev=e,this.dtype=s,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=o||Math.random();this.random=Yc.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const r=this.nextVal;return this.nextVal=NaN,r}let t,e,s=!1;for(;!s;){let r,o,a;do{r=2*this.random()-1,o=2*this.random()-1,a=r*r+o*o}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*o*i,(!this.truncated||this.isValidTruncated(t))&&(s=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class _v{constructor(t=0,e=1,s,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=s,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Yc.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Rv=$({randomNormal_:function Av(n,t=0,e=1,s,r){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const o=new Jc(t,e,s,!1,r),a=Ae(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),cl=$({randomUniform_:function Ov(n,t=0,e=1,s="float32",r){const o=Ae(n,s),a=new _v(t,e,null,r);for(let i=0;i<o.values.length;i++)o.values[i]=a.nextValue();return o.toTensor()}}),Ns=$({relu_:function Fv(n){const e={x:I(n,"x","relu")};return D.runKernel(Lo,e)}}),qs=$({reverse_:function Pv(n,t){const s={x:I(n,"x","reverse")};return D.runKernel(Ei,s,{dims:t})}}),Pf=$({selu_:function Lv(n){const e={x:I(n,"x","selu")};return D.runKernel(Bo,e)}}),Lf=$({separableConv2d_:function Mv(n,t,e,s,r,o=[1,1],a="NHWC"){const i=I(n,"x","separableConv2d"),l=I(t,"depthwiseFilter","separableConv2d"),u=I(e,"pointwiseFilter","separableConv2d");let c=i,d=!1;if(3===i.rank&&(d=!0,c=L(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");C(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),C(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),C(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),C(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),C(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const h=l.shape[2],p=l.shape[3];C(u.shape[2]===h*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*p}, but got ${u.shape[2]}.`);const f=aa(c,l,s,r,a,o),g=Us(f,u,1,"valid",a);return d?L(g,[g.shape[1],g.shape[2],g.shape[3]]):g}}),ua=$({sigmoid_:function zv(n){const e={x:I(n,"x","sigmoid")};return D.runKernel(Ho,e)}}),qe=$({slice_:function Vv(n,t,e){const s=I(n,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");return D.runKernel(Ai,{x:s},{begin:t,size:e})}}),ed=$({slice1d_:function Bv(n,t,e){const s=I(n,"x","slice1d");return C(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),qe(s,[t],[e])}}),Mf=$({slice2d_:function Wv(n,t,e){const s=I(n,"x","slice2d");return C(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),qe(s,t,e)}}),td=$({slice3d_:function Gv(n,t,e){const s=I(n,"x","slice3d");return C(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),qe(s,t,e)}}),dl=$({slice4d_:function Uv(n,t,e){const s=I(n,"x","slice4d");return C(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),qe(s,t,e)}}),nd=$({softmax_:function Hv(n,t=-1){const e=I(n,"logits","softmax","float32");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);return D.runKernel(Pi,{logits:e},{dim:t})}}),hl=$({softplus_:function jv(n){const e={x:I(n,"x","softplus")};return D.runKernel(jo,e)}}),wn=$({split_:function qv(n,t,e=0){const r={x:I(n,"x","split")};return D.runKernel(Fi,r,{numOrSizeSplits:t,axis:e})}}),Xt=$({sqrt_:function Kv(n){const e={x:I(n,"x","sqrt")};return D.runKernel(qo,e)}}),sd=$({squeeze_:function Xv(n,t){const e=I(n,"x","squeeze");return L(e,zs(e.shape,t).newShape)}}),Ks=$({stack_:function Zv(n,t=0){const e=Jp(n,"tensors","stack","string_or_numeric");return C(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&C(t<=e[0].rank,()=>"Axis must be <= rank of the tensor"),D.runKernel(ki,e,{axis:t})}}),zf=$({tanh_:function Yv(n){const e={x:I(n,"x","tanh")};return D.runKernel(Yo,e)}});function vn(n,t){Be(n);const e=Zi(n,t);if(1!==e.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Yi(n,null,e,t)}const Vf=$({truncatedNormal_:function Jv(n,t=0,e=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const o=new Jc(t,e,s,!0,r),a=Ae(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),_r=$({unstack_:function Qv(n,t=0){const e=I(n,"x","unstack","string_or_numeric");return C(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`),D.runKernel(Mi,{value:e},{axis:t})}});function rd(n,t=!0,e,s){return D.makeVariable(n,t,e,s)}const od=$({broadcastTo_:function eN(n,t){let e=I(n,"broadcastTo","x");const s=e.shape;if(t.some(u=>!(u>0)||u%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){const u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=L(e,u)}const r=e.shape,o=Array.from(t);for(let u=t.length-1;u>=0;u--)if(r[u]===t[u])o[u]=1;else if(1!==e.shape[u])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);return 0===o.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length?vr(e):D.runKernel(Jo,{x:e},{reps:o})}}),Nn=$({where_:function tN(n,t,e){const s=I(t,"a","where"),r=I(e,"b","where"),o=I(n,"condition","where","bool"),a=Re(s.shape,r.shape),i=od(s,a),l=od(r,a);return 1===o.rank&&C(o.shape[0]===s.shape[0],()=>"The first dimension of `a` must match the size of `condition`."),1!==o.rank&&Me(o.shape,l.shape,"Error in where: "),D.runKernel(Di,{condition:o,t:i,e:l})}}),Fe=$({zerosLike_:function nN(n){const e={x:I(n,"x","zerosLike")};return D.runKernel(Vi,e)}}),Ke=$({transpose_:function sN(n,t){const e=I(n,"x","transpose");return null==t&&(t=e.shape.map((o,a)=>a).reverse()),C(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of perm ${t}.`),t.forEach(o=>{C(o>=0&&o<e.rank,()=>`All entries in 'perm' must be between 0 and ${e.rank-1} but got ${t}`)}),e.rank<=1?e.clone():D.runKernel(Li,{x:e},{perm:t})}}),aN=$({dropout_:function oN(n,t,e,s){const r=I(n,"x","dropout");if(C("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),C(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return n instanceof O?r.clone():r;const o=function rN(n,t){if(null==t)return n.shape.slice();if(Se(n.shape,t))return t;if(n.shape.length===t.length){const e=[];for(let s=0;s<n.shape.length;s++)e.push(null==t[s]&&null!=n.shape[s]?n.shape[s]:t[s]);return e}return t}(r,e),a=1-t,i=we(ll(te(cl(o,0,1,"float32",s),a)),a);return R(r,i)}}),Bf=$({imag_:function iN(n){const e={input:I(n,"input","imag")};return D.runKernel(ju,e)}}),ad=$({real_:function lN(n){const e={input:I(n,"input","real")};return D.runKernel(tc,e)}}),id=$({fft_:function uN(n){return C("complex64"===n.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`),D.runKernel("FFT",{input:n})}}),ld=$({rfft_:function cN(n,t){C("float32"===n.dtype,()=>`The dtype for rfft() must be real value but got ${n.dtype}`);let e=n.shape[n.shape.length-1];const s=n.size/e;let r;if(null!=t&&t<e){const f=n.shape.map(g=>0),m=n.shape.map(g=>g);m[n.shape.length-1]=t,r=qe(n,f,m),e=t}else if(null!=t&&t>e){const f=n.shape.map(m=>m);f[n.shape.length-1]=t-e,r=Lt([n,It(f)],n.shape.length-1),e=t}else r=n;const o=Fe(r),a=L(gr(r,o),[s,e]),i=id(a),l=Math.floor(e/2)+1,u=ad(i),c=Bf(i),d=wn(u,[l,e-l],u.shape.length-1),h=wn(c,[l,e-l],c.shape.length-1),p=r.shape.slice();return p[r.shape.length-1]=l,L(gr(d[0],h[0]),p)}}),pl=$({ifft_:function dN(n){return C("complex64"===n.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`),D.runKernel(Hu,{input:n})}}),Wf=$({irfft_:function hN(n){const t=n.shape[n.shape.length-1],e=n.size/t;let s;if(t<=2){const r=L(n,[e,t]);s=pl(r)}else{const r=[e,2*(t-1)],o=L(ad(n),[e,t]),a=L(Bf(n),[e,t]),i=qs(qe(o,[0,1],[e,t-2]),1),l=R(qs(qe(a,[0,1],[e,t-2]),1),Ne(-1)),u=Lt([o,i],1),c=Lt([a,l],1),d=L(gr(u,c),[r[0],r[1]]);s=pl(d)}if(s=ad(s),3===n.rank&&0!==n.shape[0]){const r=s,o=n.shape[0];s=L(s,[o,s.shape[0]/o,s.shape[1]]),r.dispose()}return s}}),ud=$({conv2DBackpropFilter_:function pN(n,t,e,s,r,o="NHWC",a){let i=n;3===n.rank&&(i=L(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;3===l.rank&&(l=L(t,[1,t.shape[0],t.shape[1],t.shape[2]])),C(4===i.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`),C(4===l.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),C(4===e.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);const u="NHWC"===o?i.shape[3]:i.shape[1],c="NHWC"===o?l.shape[3]:l.shape[1];return C(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),C(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),null!=a&&C(We(r),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`),D.runKernel(Au,{x:i,dy:l},{strides:s,pad:r,dataFormat:o,dimRoundingMode:a,filterShape:e})}}),Gf=$({relu6_:function fN(n){const e={x:I(n,"x","relu6")};return D.runKernel(Mo,e)}}),ca=$({step_:function mN(n,t=0){const s={x:I(n,"x","step")};return D.runKernel(Qo,s,{alpha:t})}});function fl(n,t,e){if(null==e||"linear"===e)return n;if("relu"===e)return R(n,ca(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function ml(n,t){let e=t;const s=kt(n.shape,t.shape);return s.length>0&&(e=ve(e,s)),L(e,n.shape)}function gl(n,t,e,s){if("linear"===t)return n;if("relu"===t)return Ns(n);if("elu"===t)return il(n);if("relu6"===t)return Gf(n);if("prelu"===t)return Zc(n,e);if("leakyrelu"===t)return Hc(n,s);throw new Error(`Unknown fused activation ${t}.`)}const yl=(n,t)=>!(n>0)||"linear"===t,yN=$({fusedConv2d_:function gN({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:a,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===yl(D.state.gradientDepth,l=l||"linear")){let w=Us(n,t,e,s,r,o,a);return null!=i&&(w=te(w,i)),gl(w,l,u,c)}const d=I(n,"x","conv2d"),h=I(t,"filter","conv2d");let p=d,f=!1;3===d.rank&&(f=!0,p=L(d,[1,d.shape[0],d.shape[1],d.shape[2]])),C(4===p.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`),C(4===h.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`),null!=a&&C(We(s),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`),C(p.shape[3]===h.shape[2],()=>`Error in conv2d: depth of input (${p.shape[3]}) must match input depth for filter ${h.shape[2]}.`),C(mt(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),C("NHWC"===r,()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`);const m=Dt(p.shape,h.shape,e,o,s,a);let g,y;null!=i&&(g=I(i,"bias","fused conv2d"),[g]=ft(g,d),Re(m.outShape,g.shape)),null!=u&&(y=I(u,"prelu weights","fused conv2d"));const x=(w,k)=>{const[N,S,_,A]=k,z=fl(w,_,l);C(ws(o),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);const H=[Wc(S.shape,z,N,e,s),ud(S,z,N.shape,e,s)];if(null!=A){const W=ml(A,z);H.push(W)}return H},v={x:p,filter:h,bias:g,preluActivationWeights:y},b={strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a,activation:l,leakyreluAlpha:c};return null==i?ss((k,N,S)=>{let _=D.runKernel(Wi,v,b);return S([N,k,_]),f&&(_=L(_,[_.shape[1],_.shape[2],_.shape[3]])),{value:_,gradFunc:x}})(p,h):ss((k,N,S,_)=>{let A=D.runKernel(Wi,v,b);return _([N,k,A,S]),f&&(A=L(A,[A.shape[1],A.shape[2],A.shape[3]])),{value:A,gradFunc:x}})(p,h,g)}}),Uf=$({depthwiseConv2dNativeBackpropFilter_:function xN(n,t,e,s,r,o=[1,1],a){let i=n;3===n.rank&&(i=L(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;return 3===l.rank&&(l=L(t,[1,t.shape[0],t.shape[1],t.shape[2]])),D.runKernel(Lu,{x:i,dy:l},{strides:s,pad:r,dimRoundingMode:a,dilations:o,filterShape:e})}}),Hf=$({depthwiseConv2dNativeBackpropInput_:function bN(n,t,e,s,r,o=[1,1],a){let i=t,l=!1;3===t.rank&&(l=!0,i=L(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const d=D.runKernel(Mu,{dy:i,filter:e},{strides:s,pad:r,dimRoundingMode:a,dilations:o,inputShape:n});return l?L(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});$({fusedDepthwiseConv2d_:function wN({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:a,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===yl(D.state.gradientDepth,l)){let w=aa(n,t,e,s,r,o,a);return null!=i&&(w=te(w,i)),gl(w,l,u,c)}const d=I(n,"x","depthwiseConv2d"),h=I(t,"filter","depthwiseConv2d");let p=d,f=!1;3===d.rank&&(f=!0,p=L(d,[1,d.shape[0],d.shape[1],d.shape[2]])),C(4===p.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`),C(4===h.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`),C(p.shape[3]===h.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),null==o&&(o=[1,1]),C(mt(e,o),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),null!=a&&C(We(s),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${a} but got pad ${s}.`);const m=Dt(p.shape,h.shape,e,o,s,a,!0);let g,y;null!=i&&(g=I(i,"bias","fused conv2d"),[g]=ft(g,d),Re(m.outShape,g.shape)),null!=u&&(y=I(u,"prelu weights","fused depthwiseConv2d"));const x=(w,k)=>{C(ws(o),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[N,S,_,A]=k,z=fl(w,_,l),U=Hf(S.shape,z,N,e,s,o,a),G=Uf(S,z,N.shape,e,s,o,a);return null!=A?[U,G,ml(g,z)]:[U,G]},v={x:p,filter:h,bias:g,preluActivationWeights:y},b={strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a,activation:l,leakyreluAlpha:c};return null==i?ss((k,N,S)=>{let _=D.runKernel(Gi,v,b);return S([N,k,_]),f&&(_=L(_,[_.shape[1],_.shape[2],_.shape[3]])),{value:_,gradFunc:x}})(p,h):ss((k,N,S,_)=>{let A=D.runKernel(Gi,v,b);return _([N,k,A,S]),f&&(A=L(A,[A.shape[1],A.shape[2],A.shape[3]])),{value:A,gradFunc:x}})(p,h,g)}});const Ue=$({matMul_:function vN(n,t,e=!1,s=!1){let r=I(n,"a","matMul"),o=I(t,"b","matMul");return[r,o]=ft(r,o),D.runKernel(Ha,{a:r,b:o},{transposeA:e,transposeB:s})}}),jf=$({fusedMatMul_:function NN({a:n,b:t,transposeA:e=!1,transposeB:s=!1,bias:r,activation:o="linear",preluActivationWeights:a,leakyreluAlpha:i}){if(!1===yl(D.state.gradientDepth,o)){let A=Ue(n,t,e,s);return null!=r&&(A=te(A,r)),gl(A,o,a,i)}let l=I(n,"a","fused matMul"),u=I(t,"b","fused matMul");[l,u]=ft(l,u);const c=e?l.shape[l.rank-2]:l.shape[l.rank-1],d=s?u.shape[u.rank-1]:u.shape[u.rank-2],h=e?l.shape[l.rank-1]:l.shape[l.rank-2],p=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=V(f),y=V(m);C(l.rank>=2&&u.rank>=2&&l.rank===u.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${u.rank}.`),C(Se(f,m),()=>`Error in fused matMul: outer dimensions (${f}) and (${m}) of Tensors with shapes ${l.shape} and ${u.shape} must match.`),C(c===d,()=>`Error in fused matMul: inner shapes (${c}) and (${d}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${e} and transposeB=${s} must match.`);const x=l.shape.slice(0,-2).concat([h,p]),v=L(l,e?[g,c,h]:[g,h,c]),b=L(u,s?[y,p,d]:[y,d,p]);let w,k;null!=r&&(w=I(r,"bias","fused matMul"),[w]=ft(w,l),Re(x,w.shape)),null!=a&&(k=I(a,"prelu weights","fused matMul"));const N=(A,z)=>{const[U,G,H,W]=z,B=fl(L(A,H.shape),H,o);let K,j;return e||s?!e&&s?(K=Ue(B,G,!1,!1),j=Ue(B,U,!0,!1)):e&&!s?(K=Ue(G,B,!1,!0),j=Ue(U,B,!1,!1)):(K=Ue(G,B,!0,!0),j=Ue(B,U,!0,!0)):(K=Ue(B,G,!1,!0),j=Ue(U,B,!0,!1)),null!=r?[K,j,ml(W,B)]:[K,j]},S={a:v,b,bias:w,preluActivationWeights:k},_={transposeA:e,transposeB:s,activation:o,leakyreluAlpha:i};return null==r?ss((z,U,G)=>{const H=D.runKernel(Bi,S,_);return G([z,U,H]),{value:L(H,x),gradFunc:N}})(v,b):ss((z,U,G,H)=>{const W=D.runKernel(Bi,S,_);return H([z,U,W,G]),{value:L(W,x),gradFunc:N}})(v,b,w)}});function qf(n,t,e){const s=1-n%2,r=new Float32Array(n);for(let o=0;o<n;++o){const a=2*Math.PI*o/(n+s-1);r[o]=t-e*Math.cos(a)}return vn(r,"float32")}$({hammingWindow_:function kN(n){return qf(n,.54,.46)}});const Kf=$({hannWindow_:function SN(n){return qf(n,.5,.5)}});function xl(n,t,e){if(Be(n),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Zi(n,e);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Yi(n,t,s,e)}const Xf=$({frame_:function TN(n,t,e,s=!1,r=0){let o=0;const a=[];for(;o+t<=n.size;)a.push(qe(n,o,t)),o+=e;if(s)for(;o<n.size;){const i=o+t-n.size,l=Lt([qe(n,o,t-i),Gc([i],r)]);a.push(l),o+=e}return 0===a.length?xl([],[0,t]):L(Lt(a),[a.length,t])}});function $r(n,t,e,s,r,o){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==o&&(o=0);const a=n.shape[0];return e=Math.min(e,a),C(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),C(2===n.rank,()=>`boxes must be a 2D tensor, but was of rank '${n.rank}'`),C(4===n.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`),C(1===t.rank,()=>"scores must be a 1D tensor"),C(t.shape[0]===a,()=>`scores has incompatible shape with boxes. Expected ${a}, but was ${t.shape[0]}`),C(0<=o&&o<=1,()=>`softNmsSigma must be in [0, 1], but was '${o}'`),{maxOutputSize:e,iouThreshold:s,scoreThreshold:r,softNmsSigma:o}}function MN(n,t,e){const s=function zN(n,t,e){return function BN(n,t,e){let s=0,r=n.length,o=0,a=!1;for(;s<r;){o=s+(r-s>>>1);const i=e(t,n[o]);i>0?s=o+1:(r=o,a=!i)}return a?s:-s-1}(n,t,e||VN)}(n,t,e);n.splice(s<0?-(s+1):s,0,t)}function VN(n,t){return n>t?1:n<t?-1:0}function cd(n,t,e,s,r){return pd(n,t,e,s,r,0)}function dd(n,t,e,s,r,o){return pd(n,t,e,s,r,0,!1,o,!0)}function hd(n,t,e,s,r,o){return pd(n,t,e,s,r,o,!0)}function pd(n,t,e,s,r,o,a=!1,i=!1,l=!1){const u=[];for(let g=0;g<t.length;g++)t[g]>r&&u.push({score:t[g],boxIndex:g,suppressBeginIndex:0});u.sort(Zf);const c=o>0?-.5/o:0,d=[],h=[];for(;d.length<e&&u.length>0;){const g=u.pop(),{score:y,boxIndex:x,suppressBeginIndex:v}=g;if(y<r)break;let b=!1;for(let w=d.length-1;w>=v;--w){const k=WN(n,x,d[w]);if(k>=s){b=!0;break}if(g.score=g.score*GN(s,c,k),g.score<=r)break}g.suppressBeginIndex=d.length,b||(g.score===y?(d.push(x),h.push(g.score)):g.score>r&&MN(u,g,Zf))}const p=d.length,f=e-p;i&&f>0&&(d.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:d};return a&&(m.selectedScores=h),l&&(m.validOutputs=p),m}function WN(n,t,e){const s=n.subarray(4*t,4*t+4),r=n.subarray(4*e,4*e+4),o=Math.min(s[0],s[2]),a=Math.min(s[1],s[3]),i=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),d=Math.max(r[0],r[2]),h=Math.max(r[1],r[3]),p=(i-o)*(l-a),f=(d-u)*(h-c);if(p<=0||f<=0)return 0;const m=Math.max(o,u),g=Math.max(a,c),y=Math.min(i,d),x=Math.min(l,h),v=Math.max(y-m,0)*Math.max(x-g,0);return v/(p+f-v)}function GN(n,t,e){const s=Math.exp(t*e*e);return e<=n?s:0}function Zf(n,t){return n.score-t.score||n.score===t.score&&t.boxIndex-n.boxIndex}$({stft_:function _N(n,t,e,s,r=Kf){null==s&&(s=function CN(n){return Math.floor(Math.pow(2,Math.ceil(Math.log(n)/Math.log(2))))}(t));const o=Xf(n,t,e),a=R(o,r(t)),i=[];for(let l=0;l<o.shape[0];l++)i.push(ld(qe(a,[l,0],[1,t]),s));return Lt(i)}}),$({cropAndResize_:function EN(n,t,e,s,r="bilinear",o=0){const a=I(n,"image","cropAndResize"),i=I(t,"boxes","cropAndResize","float32"),l=I(e,"boxInd","cropAndResize","int32"),u=i.shape[0];return C(4===a.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`),C(2===i.rank&&4===i.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`),C(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`),C(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),C(s[0]>=1&&s[1]>=1,()=>`cropSize must be atleast [1,1], but was ${s}`),C("bilinear"===r||"nearest"===r,()=>`method must be bilinear or nearest, but was ${r}`),D.runKernel(Fu,{image:a,boxes:i,boxInd:l},{method:r,extrapolationValue:o,cropSize:s})}}),$({flipLeftRight_:function AN(n){const t=I(n,"image","flipLeftRight","float32");return C(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),D.runKernel(Uu,{image:t},{})}}),$({rotateWithOffset_:function ON(n,t,e=0,s=.5){const r=I(n,"image","rotateWithOffset","float32");return C(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`),D.runKernel(lc,{image:r},{radians:t,fillValue:e,center:s})}}),$({nonMaxSuppression_:function PN(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const o=I(n,"boxes","nonMaxSuppression"),a=I(t,"scores","nonMaxSuppression"),i=$r(o,a,e,s,r);return D.runKernel(Zu,{boxes:o,scores:a},{maxOutputSize:e=i.maxOutputSize,iouThreshold:s=i.iouThreshold,scoreThreshold:r=i.scoreThreshold})}}),$({nonMaxSuppressionWithScore_:function jN(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=0){const a=I(n,"boxes","nonMaxSuppression"),i=I(t,"scores","nonMaxSuppression"),l=$r(a,i,e,s,r,o),d=D.runKernel(Ju,{boxes:a,scores:i},{maxOutputSize:e=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:o=l.softNmsSigma});return{selectedIndices:d[0],selectedScores:d[1]}}}),$({nonMaxSuppressionPadded_:function ZN(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=!1){const a=I(n,"boxes","nonMaxSuppression"),i=I(t,"scores","nonMaxSuppression"),l=$r(a,i,e,s,r,null),f=D.runKernel(Yu,{boxes:a,scores:i},{maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:o});return{selectedIndices:f[0],validOutputs:f[1]}}});const Yf=$({resizeBilinear_:function eC(n,t,e=!1,s=!1){const r=I(n,"images","resizeBilinear");C(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),C(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),C(!1===s||!1===e,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let o=r,a=!1;3===r.rank&&(a=!0,o=L(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=D.runKernel($i,{images:o},{alignCorners:e,halfPixelCenters:s,size:t});return a?L(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Jf=$({resizeNearestNeighbor_:function tC(n,t,e=!1,s=!1){const r=I(n,"images","resizeNearestNeighbor");C(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),C(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),C("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype"),C(!1===s||!1===e,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let o=r,a=!1;3===r.rank&&(a=!0,o=L(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=D.runKernel(_i,{images:o},{alignCorners:e,halfPixelCenters:s,size:t});return a?L(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Er=$({lessEqual_:function nC(n,t){let e=I(n,"a","lessEqual"),s=I(t,"b","lessEqual");return[e,s]=ft(e,s),Re(e.shape,s.shape),D.runKernel(ui,{a:e,b:s})}});function Qf(n,t,e=1,s="float32"){if(0===e)throw new Error("Cannot have a step of zero");return D.runKernel(ec,{},{start:n,stop:t,step:e,dtype:s})}const rC=$({bandPart_:function sC(n,t,e){C(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),C(e%1==0,()=>`bandPart(): numUpper must be an integer, got ${e}.`);const s=I(n,"a","bandPart");C(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[o,a]=s.shape.slice(-2);if(!(t<=o))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`);if(!(e<=a))throw new Error(`bandPart(): numUpper (${e}) must not be greater than the number of columns (${a}).`);t<0&&(t=o),e<0&&(e=a);const i=L(Qf(0,o,1,"int32"),[-1,1]),l=Qf(0,a,1,"int32"),u=ge(i,l),c=as(Er(u,Ne(+t,"int32")),js(u,Ne(-e,"int32"))),d=It([o,a],s.dtype);return L(Ks(_r(L(s,[-1,o,a])).map(h=>Nn(c,h,d))),r)}}),Xs=$({pow_:function oC(n,t){let e=I(n,"base","pow"),s=I(t,"exp","pow");return[e,s]=ft(e,s),D.runKernel(Fo,{a:e,b:s})}});function em(n,t,e=null){if(0===n.rank)return Pt(n);if(1!==n.rank&&null===e)return em(L(n,[-1]),t,e);if(1===n.rank||"number"==typeof e||Array.isArray(e)&&1===e.length){if(1===t)return ve(Pt(n),e);if(t===1/0)return On(Pt(n),e);if(t===-1/0)return ul(Pt(n),e);if("euclidean"===t||2===t)return Xt(ve(Xs(Pt(n),Ne(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&2===e.length){if(1===t)return On(ve(Pt(n),e[0]),e[1]-1);if(t===1/0)return On(ve(Pt(n),e[1]),e[0]);if(t===-1/0)return ul(ve(Pt(n),e[1]),e[0]);if("fro"===t||"euclidean"===t)return Xt(ve(et(n),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}const yd=$({norm_:function aC(n,t="euclidean",e=null,s=!1){const r=em(n=I(n,"x","norm"),t,e);let o=r.shape;if(s){const a=Te(e,n.shape);o=yt(r.shape,a)}return L(r,o)}}),lC=$({gramSchmidt_:function iC(n){let t;if(Array.isArray(n)){t=!1,C(null!=n&&n.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const r=n[0].shape[0];for(let o=1;o<n.length;++o)C(n[o].shape[0]===r,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[o].shape[0]} vs. ${r})`)}else t=!0,n=wn(n,n.shape[0],0).map(r=>sd(r,[0]));C(n.length<=n[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);const e=[],s=n;for(let r=0;r<n.length;++r)e.push(D.tidy(()=>{let o=s[r];if(r>0)for(let a=0;a<r;++a){const i=R(ve(R(e[a],o)),e[a]);o=ge(o,i)}return we(o,yd(o,"euclidean"))}));return t?Ks(e,0):e}});function tm(n,t=!1){return D.tidy(()=>{C(2===n.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);const e=n.shape[0],s=n.shape[1];let r=Af(e),o=vr(n);const a=xl([[1]],[1,1]);let i=vr(a);const l=e>=s?s:e;for(let u=0;u<l;++u){const c=o,d=i,h=r;[i,o,r]=D.tidy(()=>{const p=qe(o,[u,u],[e-u,1]),f=yd(p),m=qe(o,[u,u],[1,1]),g=Nn(qn(m,0),xl([[-1]]),xl([[1]])),y=ge(m,R(g,f)),x=we(p,y);i=1===x.shape[0]?vr(a):Lt([a,qe(x,[1,0],[x.shape[0]-1,x.shape[1]])],0);const v=bt(we(Ue(g,y),f)),b=qe(o,[u,0],[e-u,s]),w=R(v,i),k=Ke(i);if(0===u)o=ge(b,Ue(w,Ue(k,b)));else{const _=ge(b,Ue(w,Ue(k,b)));o=Lt([qe(o,[0,0],[u,s]),_],0)}const N=Ke(w),S=qe(r,[0,u],[e,r.shape[1]-u]);if(0===u)r=ge(S,Ue(Ue(S,i),N));else{const _=ge(S,Ue(Ue(S,i),N));r=Lt([qe(r,[0,0],[e,u]),_],1)}return[i,o,r]}),De([c,d,h])}return!t&&e>s&&(r=qe(r,[0,0],[e,s]),o=qe(o,[0,0],[s,s])),[r,o]})}const cC=$({qr_:function uC(n,t=!1){if(C(n.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`),2===n.rank)return tm(n,t);{const e=n.shape.slice(0,n.shape.length-2).reduce((l,u)=>l*u),s=_r(L(n,[e,n.shape[n.shape.length-2],n.shape[n.shape.length-1]]),0),r=[],o=[];return s.forEach(l=>{const[u,c]=tm(l,t);r.push(u),o.push(c)}),[L(Ks(r,0),n.shape),L(Ks(o,0),n.shape)]}}});var Zt=(()=>{return(n=Zt||(Zt={}))[n.NONE=0]="NONE",n[n.MEAN=1]="MEAN",n[n.SUM=2]="SUM",n[n.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS",Zt;var n})();const ls=$({computeWeightedLoss_:function dC(n,t,e=Zt.SUM_BY_NONZERO_WEIGHTS){const s=I(n,"losses","computeWeightedLoss");let r=null;null!=t&&(r=I(t,"weights","computeWeightedLoss"));const o=null==r?s:R(s,r);if(e===Zt.NONE)return o;if(e===Zt.SUM)return ve(o);if(e===Zt.MEAN){if(null==r)return gt(o);{const a=s.size/r.size,i=we(ve(o),ve(r));return a>1?we(i,Ne(a)):i}}if(e===Zt.SUM_BY_NONZERO_WEIGHTS){if(null==r)return we(ve(o),Ne(s.size));{const a=R(r,vs(s.shape)),i=me(ve(Tr(a,Ne(0))),"float32");return we(ve(o),i)}}throw Error(`Unknown reduction: ${e}`)}}),pC=$({absoluteDifference_:function hC(n,t,e,s=Zt.SUM_BY_NONZERO_WEIGHTS){const r=I(n,"labels","absoluteDifference"),o=I(t,"predictions","absoluteDifference");let a=null;null!=e&&(a=I(e,"weights","absoluteDifference")),Me(r.shape,o.shape,"Error in absoluteDifference: ");const i=Pt(ge(r,o));return ls(i,a,s)}}),mC=$({cosineDistance_:function fC(n,t,e,s,r=Zt.SUM_BY_NONZERO_WEIGHTS){const o=I(n,"labels","cosineDistance"),a=I(t,"predictions","cosineDistance");let i=null;null!=s&&(i=I(s,"weights","cosineDistance")),Me(o.shape,a.shape,"Error in cosineDistance: ");const l=Ne(1),u=ge(l,ve(R(o,a),e,!0));return ls(u,i,r)}}),yC=$({hingeLoss_:function gC(n,t,e,s=Zt.SUM_BY_NONZERO_WEIGHTS){let r=I(n,"labels","hingeLoss");const o=I(t,"predictions","hingeLoss");let a=null;null!=e&&(a=I(e,"weights","hingeLoss")),Me(r.shape,o.shape,"Error in hingeLoss: ");const i=Ne(1);r=ge(R(Ne(2),r),i);const l=Ns(ge(i,R(r,o)));return ls(l,a,s)}}),bC=$({huberLoss_:function xC(n,t,e,s=1,r=Zt.SUM_BY_NONZERO_WEIGHTS){const o=I(n,"labels","huberLoss"),a=I(t,"predictions","huberLoss");let i=null;null!=e&&(i=I(e,"weights","huberLoss")),Me(o.shape,a.shape,"Error in huberLoss: ");const l=Ne(s),u=Pt(ge(a,o)),c=la(u,l),d=ge(u,c),h=te(R(Ne(.5),et(c)),R(l,d));return ls(h,i,r)}}),vC=$({logLoss_:function wC(n,t,e,s=1e-7,r=Zt.SUM_BY_NONZERO_WEIGHTS){const o=I(n,"labels","logLoss"),a=I(t,"predictions","logLoss");let i=null;null!=e&&(i=I(e,"weights","logLoss")),Me(o.shape,a.shape,"Error in logLoss: ");const l=Ne(1),u=Ne(s),c=bt(R(o,xn(te(a,u)))),d=R(ge(l,o),xn(te(ge(l,a),u))),h=ge(c,d);return ls(h,i,r)}}),xd=$({squaredDifference_:function NC(n,t){let e=I(n,"a","squaredDifference"),s=I(t,"b","squaredDifference");return[e,s]=ft(e,s),Re(e.shape,s.shape),D.runKernel(Ko,{a:e,b:s},{})}}),kC=$({meanSquaredError_:function CC(n,t,e,s=Zt.SUM_BY_NONZERO_WEIGHTS){const r=I(n,"labels","meanSquaredError"),o=I(t,"predictions","meanSquaredError");let a=null;null!=e&&(a=I(e,"weights","meanSquaredError")),Me(r.shape,o.shape,"Error in meanSquaredError: ");const i=xd(r,o);return ls(i,a,s)}}),nm=$({log1p_:function IC(n){const e={x:I(n,"x","log1p")};return D.runKernel(Eo,e)}}),_C=$({sigmoidCrossEntropy_:function TC(n,t,e,s=0,r=Zt.SUM_BY_NONZERO_WEIGHTS){let o=I(n,"multiClassLabels","sigmoidCrossEntropy");const a=I(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=e&&(i=I(e,"weights","sigmoidCrossEntropy")),Me(o.shape,a.shape,"Error in sigmoidCrossEntropy: "),s>0){const u=Ne(s),c=Ne(1),d=Ne(.5);o=te(R(o,ge(c,u)),R(d,u))}const l=function SC(n,t){const e=I(n,"labels","sigmoidCrossEntropyWithLogits"),s=I(t,"logits","sigmoidCrossEntropyWithLogits");Me(e.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Ns(s),o=R(s,e),a=nm(Rn(bt(Pt(s))));return te(ge(r,o),a)}(o,a);return ls(l,i,r)}}),sm=$({logSumExp_:function $C(n,t=null,e=!1){const s=I(n,"x","logSumExp"),r=Te(t,s.shape),o=On(s,r,!0),a=ge(s,o),i=Rn(a),l=ve(i,r),u=xn(l),c=te(L(o,u.shape),u);if(e){const d=yt(c.shape,r);return L(c,d)}return c}}),AC=$({softmaxCrossEntropy_:function DC(n,t,e,s=0,r=Zt.SUM_BY_NONZERO_WEIGHTS){let o=I(n,"onehotLabels","softmaxCrossEntropy");const a=I(t,"logits","softmaxCrossEntropy");let i=null;if(null!=e&&(i=I(e,"weights","softmaxCrossEntropy")),Me(o.shape,a.shape,"Error in softmaxCrossEntropy: "),s>0){const u=Ne(s),c=Ne(1),d=Ne(o.shape[1]);o=te(R(o,ge(c,u)),we(u,d))}const l=function EC(n,t,e=-1){if(-1===e&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);return ss((r,o,a)=>{const l=sm(o,[e],!0),u=ge(me(o,"float32"),l);a([r,u]);const c=bt(R(u,r));return{value:ve(c,[e]),gradFunc:(p,f)=>{const[m,g]=f,y=yt(p.shape,[e]);return[R(L(p,y),ge(me(m,"float32"),Rn(g))),R(L(p,y),ge(Rn(g),me(m,"float32")))]}}})(n,t)}(o,a);return ls(l,i,r)}}),RC={bandPart:rC,gramSchmidt:lC,qr:cC},OC={absoluteDifference:pC,computeWeightedLoss:ls,cosineDistance:mC,hingeLoss:yC,huberLoss:bC,logLoss:vC,meanSquaredError:kC,sigmoidCrossEntropy:_C,softmaxCrossEntropy:AC};let bd=(()=>{class n extends xs{constructor(e,s,r=null){super(),this.learningRate=e,this.rho=s,this.epsilon=r,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==r&&(this.epsilon=D.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,o)=>{const a=D.registeredVariables[r];null==this.accumulatedGrads[o]&&(this.accumulatedGrads[o]={originalName:`${r}/accum_grad`,variable:F(()=>Fe(a).variable(!1))}),null==this.accumulatedUpdates[o]&&(this.accumulatedUpdates[o]={originalName:`${r}/accum_var`,variable:F(()=>Fe(a).variable(!1))});const l=Array.isArray(e)?e[o].tensor:e[r];if(null==l)return;const u=this.accumulatedGrads[o].variable,c=this.accumulatedUpdates[o].variable;F(()=>{const d=te(R(u,this.rho),R(et(l),1-this.rho)),h=R(we(Xt(te(c,this.epsilon)),Xt(te(u,this.epsilon))),l),p=te(R(c,this.rho),R(et(h),1-this.rho));u.assign(d),c.assign(p);const f=te(R(h,-this.learningRate),a);a.assign(f)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(De(this.accumulatedGrads.map(e=>e.variable)),De(this.accumulatedUpdates.map(e=>e.variable)))}getWeights(){var e=this;return(0,M.Z)(function*(){const s=[...e.accumulatedGrads,...e.accumulatedUpdates];return[yield e.saveIterations()].concat(s.map(r=>({name:r.originalName,tensor:r.variable})))})()}setWeights(e){var s=this;return(0,M.Z)(function*(){const r=(e=yield s.extractIterations(e)).length/2;s.accumulatedGrads=e.slice(0,r).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)})),s.accumulatedUpdates=e.slice(r,2*r).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,s){return new e(s.learningRate,s.rho,s.epsilon)}}return n.className="Adadelta",n})();Z(bd);let wd=(()=>{class n extends xs{constructor(e,s=.1){super(),this.learningRate=e,this.initialAccumulatorValue=s,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,o)=>{const a=D.registeredVariables[r];null==this.accumulatedGrads[o]&&(this.accumulatedGrads[o]={originalName:`${r}/accumulator`,variable:F(()=>Gc(a.shape,this.initialAccumulatorValue).variable(!1))});const i=Array.isArray(e)?e[o].tensor:e[r];if(null==i)return;const l=this.accumulatedGrads[o].variable;F(()=>{const u=te(l,et(i));l.assign(u);const c=te(R(we(i,Xt(te(u,D.backend.epsilon()))),-this.learningRate),a);a.assign(c)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&De(this.accumulatedGrads.map(e=>e.variable))}getWeights(){var e=this;return(0,M.Z)(function*(){return[yield e.saveIterations()].concat(e.accumulatedGrads.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(e){var s=this;return(0,M.Z)(function*(){e=yield s.extractIterations(e),s.accumulatedGrads=e.map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,s){return new e(s.learningRate,s.initialAccumulatorValue)}}return n.className="Adagrad",n})();Z(wd);let vd=(()=>{class n extends xs{constructor(e,s,r,o=null){super(),this.learningRate=e,this.beta1=s,this.beta2=r,this.epsilon=o,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],F(()=>{this.accBeta1=Ne(s).variable(),this.accBeta2=Ne(r).variable()}),null==o&&(this.epsilon=D.backend.epsilon())}applyGradients(e){const s=Array.isArray(e)?e.map(r=>r.name):Object.keys(e);F(()=>{const r=ge(1,this.accBeta1),o=ge(1,this.accBeta2);s.forEach((a,i)=>{const l=D.registeredVariables[a];null==this.accumulatedFirstMoment[i]&&(this.accumulatedFirstMoment[i]={originalName:`${a}/m`,variable:F(()=>Fe(l).variable(!1))}),null==this.accumulatedSecondMoment[i]&&(this.accumulatedSecondMoment[i]={originalName:`${a}/v`,variable:F(()=>Fe(l).variable(!1))});const c=Array.isArray(e)?e[i].tensor:e[a];if(null==c)return;const d=this.accumulatedFirstMoment[i].variable,h=this.accumulatedSecondMoment[i].variable,p=te(R(d,this.beta1),R(c,1-this.beta1)),f=te(R(h,this.beta2),R(et(c),1-this.beta2)),m=we(p,r),g=we(f,o);d.assign(p),h.assign(f);const y=te(R(we(m,te(Xt(g),this.epsilon)),-this.learningRate),l);l.assign(y)}),this.accBeta1.assign(R(this.accBeta1,this.beta1)),this.accBeta2.assign(R(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&De(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&De(this.accumulatedSecondMoment.map(e=>e.variable))}getWeights(){var e=this;return(0,M.Z)(function*(){const s=[...e.accumulatedFirstMoment,...e.accumulatedSecondMoment];return[yield e.saveIterations()].concat(s.map(r=>({name:r.originalName,tensor:r.variable})))})()}setWeights(e){var s=this;return(0,M.Z)(function*(){e=yield s.extractIterations(e),F(()=>{s.accBeta1.assign(Xs(s.beta1,s.iterations_+1)),s.accBeta2.assign(Xs(s.beta2,s.iterations_+1))});const r=e.length/2;s.accumulatedFirstMoment=e.slice(0,r).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)})),s.accumulatedSecondMoment=e.slice(r,2*r).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,s){return new e(s.learningRate,s.beta1,s.beta2,s.epsilon)}}return n.className="Adam",n})();Z(vd);let Nd=(()=>{class n extends xs{constructor(e,s,r,o=null,a=0){super(),this.learningRate=e,this.beta1=s,this.beta2=r,this.epsilon=o,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],F(()=>{this.iteration=Ne(0).variable(),this.accBeta1=Ne(s).variable()}),null==o&&(this.epsilon=D.backend.epsilon())}applyGradients(e){const s=Array.isArray(e)?e.map(r=>r.name):Object.keys(e);F(()=>{const r=ge(1,this.accBeta1),o=we(-this.learningRate,te(R(this.iteration,this.decay),1));s.forEach((a,i)=>{const l=D.registeredVariables[a];null==this.accumulatedFirstMoment[i]&&(this.accumulatedFirstMoment[i]={originalName:`${a}/m`,variable:Fe(l).variable(!1)}),null==this.accumulatedWeightedInfNorm[i]&&(this.accumulatedWeightedInfNorm[i]={originalName:`${a}/v`,variable:Fe(l).variable(!1)});const c=Array.isArray(e)?e[i].tensor:e[a];if(null==c)return;const d=this.accumulatedFirstMoment[i].variable,h=this.accumulatedWeightedInfNorm[i].variable,p=te(R(d,this.beta1),R(c,1-this.beta1)),f=R(h,this.beta2),m=Pt(c),g=is(f,m);d.assign(p),h.assign(g);const y=te(R(we(o,r),we(p,te(g,this.epsilon))),l);l.assign(y)}),this.iteration.assign(te(this.iteration,1)),this.accBeta1.assign(R(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&De(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&De(this.accumulatedWeightedInfNorm.map(e=>e.variable))}getWeights(){return(0,M.Z)(function*(){throw new Error("getWeights() is not implemented for Adamax yet.")})()}setWeights(e){return(0,M.Z)(function*(){throw new Error("setWeights() is not implemented for Adamax yet.")})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,s){return new e(s.learningRate,s.beta1,s.beta2,s.epsilon,s.decay)}}return n.className="Adamax",n})();Z(Nd);let bl=(()=>{class n extends xs{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,o)=>{const a=Array.isArray(e)?e[o].tensor:e[r];if(null==a)return;const i=D.registeredVariables[r];F(()=>{const l=te(R(this.c,a),i);i.assign(l)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=jn(Ne(-e))}dispose(){this.c.dispose()}getWeights(){var e=this;return(0,M.Z)(function*(){return[yield e.saveIterations()]})()}setWeights(e){var s=this;return(0,M.Z)(function*(){if(0!==(e=yield s.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")})()}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,s){return new e(s.learningRate)}}return n.className="SGD",n})();Z(bl);let Cd=(()=>{class n extends bl{constructor(e,s,r=!1){super(e),this.learningRate=e,this.momentum=s,this.useNesterov=r,this.accumulations=[],this.m=Ne(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,o)=>{const a=D.registeredVariables[r];null==this.accumulations[o]&&(this.accumulations[o]={originalName:`${r}/momentum`,variable:F(()=>Fe(a).variable(!1))});const i=this.accumulations[o].variable,l=Array.isArray(e)?e[o].tensor:e[r];null!=l&&F(()=>{let u;const c=te(R(this.m,i),l);u=te(R(this.c,this.useNesterov?te(l,R(c,this.m)):c),a),i.assign(c),a.assign(u)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&De(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}getWeights(){var e=this;return(0,M.Z)(function*(){return[yield e.saveIterations()].concat(e.accumulations.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(e){var s=this;return(0,M.Z)(function*(){e=yield s.extractIterations(e),s.accumulations=e.map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,s){return new e(s.learningRate,s.momentum,s.useNesterov)}}return n.className="Momentum",n})();Z(Cd);let kd=(()=>{class n extends xs{constructor(e,s=.9,r=0,o=null,a=!1){if(super(),this.learningRate=e,this.decay=s,this.momentum=r,this.epsilon=o,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==o&&(this.epsilon=D.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,o)=>{const a=D.registeredVariables[r],i=!1;null==this.accumulatedMeanSquares[o]&&(this.accumulatedMeanSquares[o]={originalName:`${r}/rms`,variable:F(()=>Fe(a).variable(i))}),null==this.accumulatedMoments[o]&&(this.accumulatedMoments[o]={originalName:`${r}/momentum`,variable:F(()=>Fe(a).variable(i))}),null==this.accumulatedMeanGrads[o]&&this.centered&&(this.accumulatedMeanGrads[o]={originalName:`${r}/mg`,variable:F(()=>Fe(a).variable(i))});const l=Array.isArray(e)?e[o].tensor:e[r];if(null==l)return;const u=this.accumulatedMeanSquares[o].variable,c=this.accumulatedMoments[o].variable;F(()=>{const d=te(R(u,this.decay),R(et(l),1-this.decay));if(this.centered){const h=this.accumulatedMeanGrads[o].variable,p=te(R(h,this.decay),R(l,1-this.decay)),f=we(R(l,this.learningRate),Xt(ge(d,te(et(p),this.epsilon)))),m=te(R(c,this.momentum),f);u.assign(d),h.assign(p),c.assign(m);const g=ge(a,m);a.assign(g)}else{const h=te(R(u,this.decay),R(et(l),1-this.decay)),p=te(R(c,this.momentum),we(R(l,this.learningRate),Xt(te(h,this.epsilon))));u.assign(h),c.assign(p);const f=ge(a,p);a.assign(f)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&De(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&De(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&De(this.accumulatedMoments.map(e=>e.variable))}getWeights(){var e=this;return(0,M.Z)(function*(){const s=[...e.accumulatedMeanSquares,...e.accumulatedMoments];return e.centered&&s.push(...e.accumulatedMeanGrads),[yield e.saveIterations()].concat(s.map(r=>({name:r.originalName,tensor:r.variable})))})()}setWeights(e){var s=this;return(0,M.Z)(function*(){e=yield s.extractIterations(e);const r=s.centered?e.length/3:e.length/2,o=!1;s.accumulatedMeanSquares=e.slice(0,r).map(a=>({originalName:a.name,variable:a.tensor.variable(o)})),s.accumulatedMoments=e.slice(r,2*r).map(a=>({originalName:a.name,variable:a.tensor.variable(o)})),s.centered&&(s.accumulatedMeanGrads=e.slice(2*r,3*r).map(a=>({originalName:a.name,variable:a.tensor.variable(o)})))})()}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,s){return new e(s.learningRate,s.decay,s.momentum,s.epsilon,s.centered)}}return n.className="RMSProp",n})();Z(kd);class Zs{static sgd(t){return new bl(t)}static momentum(t,e,s=!1){return new Cd(t,e,s)}static rmsprop(t,e=.9,s=0,r=null,o=!1){return new kd(t,e,s,r,o)}static adam(t=.001,e=.9,s=.999,r=null){return new vd(t,e,s,r)}static adadelta(t=.001,e=.95,s=null){return new bd(t,e,s)}static adamax(t=.002,e=.9,s=.999,r=null,o=0){return new Nd(t,e,s,r,o)}static adagrad(t,e=.1){return new wd(t,e)}}const Ys={sgd:Zs.sgd,momentum:Zs.momentum,adadelta:Zs.adadelta,adagrad:Zs.adagrad,rmsprop:Zs.rmsprop,adamax:Zs.adamax,adam:Zs.adam},FC=typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:n=>n();function wl(){return new Promise(n=>FC(()=>n()))}function Id(n,t){const e=n[0].length;n.forEach((r,o)=>{C(r.length===e,()=>`Error in concat${e}D: rank of tensors[${o}] must be the same as the rank of the rest (${e})`)}),C(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);const s=n[0];n.forEach((r,o)=>{for(let a=0;a<e;a++)C(a===t||r[a]===s[a],()=>`Error in concat${e}D: Shape of tensors[${o}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${o}.`)})}function us(n,t){const e=n[0].slice();for(let s=1;s<n.length;s++)e[t]+=n[s][t];return e}const Sd=30;function vl(n){return n<=Sd?n:ku(n,Math.floor(Math.sqrt(n)))}function Td(n,t,e){return[e*("number"==typeof n?n:n[0]),t*("number"==typeof n?n:n[1])]}function da(n,t,e,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(n[0]/e),r=r.concat(n.slice(1));else{r=r.concat(n[0]);const o=t.length;for(let a=0;a<o;++a)r=r.concat([n[a+1]/t[a],t[a]]);r=r.concat(n.slice(o+1))}return r}function ha(n,t,e=!0){const s=[];if(e){s.push(t);for(let r=t+1;r<n;++r)r<=2*t?(s.push(r),s.push(r-(t+1))):s.push(r)}else{const r=[],o=[];for(let a=1;a<n;++a)a>=2*t+1||a%2==1?o.push(a):r.push(a);s.push(...r),s.push(0),s.push(...o)}return s}function pa(n,t,e,s=!0){const r=[];r.push(s?n[0]/e:n[0]*e);for(let o=1;o<n.length;++o)r.push(o<=t.length?s?t[o-1]*n[o]:n[o]/t[o-1]:n[o]);return r}function _d(n,t){const e=[0];for(let s=0;s<t;++s)e.push(n[s][0]);return e}function $d(n,t,e){const s=n.slice(0,1);for(let r=0;r<e;++r)s.push(n[r+1]-t[r][0]-t[r][1]);return s}function Ed(n,t){const e=n.shape.length,s=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${e}`);if(0===V(n.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);const r=t.shape,o=r[r.length-1];let a=1;for(let d=0;d<r.length-1;++d)a*=r[d];const i=n.shape,l=r.slice();l.pop();let u=1;for(let d=o;d<e;++d)u*=i[d],l.push(i[d]);const c=[...Ce(n.shape).map(d=>d/u),1].slice(0,o);return[l,a,u,c]}function rm(n,t,e){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,o=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${r}.`;if(e.rank<r)throw new Error(o+` update.rank < ${r}. `);if(n.length<s+(e.rank-r))throw new Error(o+` Output shape length < ${s+(e.rank-r)}`);if(e.rank!==r+n.length-s)throw new Error(o+" update.rank != "+(r+n.length-s));for(let a=0;a<r;++a)if(e.shape[a]!==t.shape[a])throw new Error(o+` updates.shape[${a}] (${e.shape[a]}) != indices.shape[${a}] (${t.shape[a]}).`);for(let a=0;a<e.rank-r;++a)if(e.shape[a+r]!==n[a+s])throw new Error(o+` updates.shape[${a+r}] (${e.shape[a+r]}) != shape[${a+r}] (${n[a+r]})`)}function PC(n,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(n.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(0===e.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===n.size)throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`)}rm(e,t,n)}function fa(n,t,e){const s=t.shape.length,r=s>1?t.shape[s-1]:1,o=e.length;let a=1;for(let d=r;d<o;++d)a*=e[d];const i=r<1?1:r;return{sliceRank:r,numUpdates:V(t.shape)/i,sliceSize:a,strides:[...Ce(e.slice(0,r)),1],outputSize:V(e)}}const Nl=1.7580993408473768,Cl=1.0507009873554805,Dd=.3275911,Ad=.254829592,Rd=-.284496736,Od=1.421413741,Fd=-1.453152027,Pd=1.061405429;function Dr(...n){q().getBool("IS_TEST")||console.warn(...n)}function LC(...n){q().getBool("IS_TEST")||console.log(...n)}function cs(n,t){if(n.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`);const e=new Float32Array(2*n.length);for(let s=0;s<e.length;s+=2)e[s]=n[s/2],e[s+1]=t[s/2];return e}function om(n){const t=new Float32Array(n.length/2),e=new Float32Array(n.length/2);for(let s=0;s<n.length;s+=2)t[s/2]=n[s],e[s/2]=n[s+1];return{real:t,imag:e}}function am(n){const t=Math.ceil(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=0;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function im(n){const t=Math.floor(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=2;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function Ld(n,t){return{real:n[2*t],imag:n[2*t+1]}}function lm(n,t,e,s){n[2*s]=t,n[2*s+1]=e}function um(n,t){const e=new Float32Array(n/2),s=new Float32Array(n/2);for(let r=0;r<Math.ceil(n/2);r++){const o=(t?2:-2)*Math.PI*(r/n);e[r]=Math.cos(o),s[r]=Math.sin(o)}return{real:e,imag:s}}function cm(n,t,e){const s=(e?2:-2)*Math.PI*(n/t);return{real:Math.cos(s),imag:Math.sin(s)}}function Md(n,t,e=0){let s=[];if("number"==typeof t)C(n.shape[e]%t==0,()=>"Number of splits must evenly divide the axis."),s=new Array(t).fill(n.shape[e]/t);else{C(t.reduce((a,i)=>(-1===i&&(a+=1),a),0)<=1,()=>"There should be only one negative value in split array.");const o=t.indexOf(-1);if(-1!==o){const a=t.reduce((i,l)=>l>0?i+l:i);t[o]=n.shape[e]-a}C(n.shape[e]===t.reduce((a,i)=>a+i),()=>"The sum of sizes must match the size of the axis dimension."),s=t}return s}function dm(n,t){let s,e=!1;for(n<=Sd?(s=n,e=!0):s=ku(n,Math.floor(Math.sqrt(n)));!e;)s>t||s===n?e=!0:s=ku(n,s+1);return s}function hm(n,t,e){const s=[],r=n.length;for(let o=0;o<r;o++)s.push(o!==t?n[o]:e);return s}function zd(n,t,e,s){const r=t.shape.length,o=n.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>o)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${o}).`);if(e<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${e}).`);for(let d=0;d<s;++d)if(n.shape[d]!==t.shape[d])throw new Error(`x.shape[${d}]: ${n.shape[d]} should be equal to indices.shape[${d}]: ${t.shape[d]}.`);const a=n.shape[e],i=[];let l=1,u=1,c=1;for(let d=0;d<s;++d)i.push(n.shape[d]),l*=n.shape[d];for(let d=s;d<e;d++)i.push(n.shape[d]),u*=n.shape[d];for(let d=s;d<r;d++)i.push(t.shape[d]);for(let d=e+1;d<o;d++)i.push(n.shape[d]),c*=n.shape[d];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:a,outputShape:i}}function MC(n,t,e){if("complex64"===t){if("complex64"===n.dtype)return n.clone();const s=It(n.shape),r=me(n,"float32"),o=e.complex(r,s);return s.dispose(),r.dispose(),o}if(!vu(n.dtype,t))return D.makeTensorFromDataId(n.dataId,n.shape,t);if("complex64"===n.dtype){const s=e.real(n),r=me(s,t);return s.dispose(),r}if("int32"===t)return e.int(n);if("bool"===t){const s=Ne(0,n.dtype),r=e.notEqual(n,s);return s.dispose(),r}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${t}`)}function zC(n,t){return D.makeTensorFromDataId(n.dataId,t,n.dtype)}function Vd(n){try{return n.map(t=>fr(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function pm(n){return n.map(t=>ra(t))}function fm(n,t){const e=[];for(let o=0;o<t.length;o++)t[o]&&e.push(o);const s=Ae(n,"int32"),r=Ae([e.length,n.length],"int32");for(let o=0;o<e.length;o++){const a=s.indexToLoc(e[o]);r.values.set(a,o*n.length)}return r.toTensor()}const mm={kernelName:Va,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(n,ca(me(e,"float32"),-1))}}},VC={kernelName:ro,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=et(me(e,"float32")),r=Xt(ge(Ne(1),s));return bt(we(n,r))}}}},BC={kernelName:oo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=Xt(ge(et(me(e,"float32")),1));return we(n,s)}}}},WC={kernelName:hr,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Re(e.shape,s.shape);return{a:()=>{let i=n;const l=kt(e.shape,r);return l.length>0&&(i=ve(i,l)),L(i,e.shape)},b:()=>{let i=n;const l=kt(s.shape,r);return l.length>0&&(i=ve(i,l)),L(i,s.shape)}}}},GC={kernelName:Su,saveAllInputs:!0,gradFunc:(n,t)=>{const e={};return t.forEach((s,r)=>{e[r]=()=>n.clone()}),e}},UC={kernelName:Ba,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Fe(e)}}},HC={kernelName:Wa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Fe(e)}}},jC={kernelName:ao,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>we(n,Xt(ge(Ne(1),et(me(e,"float32")))))}}},qC={kernelName:lo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=Xt(te(Ne(1),et(me(e,"float32"))));return we(n,s)}}}},KC={kernelName:ho,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Re(e.shape,s.shape);return{a:()=>{const i=te(et(e),et(s));let l=R(n,we(s,i));const u=kt(e.shape,r);return u.length>0&&(l=ve(l,u)),L(l,e.shape)},b:()=>{const i=te(et(e),et(s));let l=bt(R(n,we(e,i)));const u=kt(s.shape,r);return u.length>0&&(l=ve(l,u)),L(l,s.shape)}}}},XC={kernelName:uo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>we(n,te(et(me(e,"float32")),1))}}},ZC={kernelName:co,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>we(n,ge(Ne(1),et(me(e,"float32"))))}}},JC=$({avgPool3dGrad_:function YC(n,t,e,s,r=[1,1,1],o,a){const i=I(n,"dy","avgPool3dGrad"),l=I(t,"input","avgPool3dGrad");let u=i,c=l,d=!1;4===l.rank&&(d=!0,u=L(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),c=L(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),C(5===u.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`),C(5===c.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`),C(mt(s,r),()=>`Error in avgPool3dGrad: Either strides or dilations must be 1. Got strides ${s} and dilations '${r}'`),null!=a&&C(We(o),()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${o}.`);const f=D.runKernel(Eu,{dy:u,input:c},{filterSize:e,strides:s,dilations:r,pad:o,dimRoundingMode:a});return d?L(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),QC={kernelName:Ua,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:o,dilations:a,pad:i,dimRoundingMode:l}=e,u=a??[1,1,1];return{x:()=>JC(n,s,r,o,u,i,l)}}},tk=$({avgPoolGrad_:function ek(n,t,e,s,r){const o=I(n,"dy","avgPoolGrad"),a=I(t,"input","avgPoolGrad");C(a.rank===o.rank,()=>`Rank of input (${a.rank}) does not match rank of dy (${o.rank})`);let i=a,l=o,u=!1;3===a.rank&&(u=!0,i=L(a,[1,a.shape[0],a.shape[1],a.shape[2]]),l=L(o,[1,o.shape[0],o.shape[1],o.shape[2]])),C(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),C(4===i.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`);const h=D.runKernel($u,{dy:l,input:i},{filterSize:e,strides:s,pad:r});return u?L(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),nk={kernelName:Ga,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:o,pad:a}=e;return{x:()=>tk(n,s,r,o,a)}}},sk={kernelName:Ha,inputsToSave:["a","b"],gradFunc:(n,t,e)=>{const[s,r]=t,{transposeA:o,transposeB:a}=e;return o||a?!o&&a?{a:()=>Ue(n,r,!1,!1),b:()=>Ue(n,s,!0,!1)}:o&&!a?{a:()=>Ue(r,n,!1,!0),b:()=>Ue(s,n,!1,!1)}:{a:()=>Ue(r,n,!0,!0),b:()=>Ue(n,s,!0,!0)}:{a:()=>Ue(n,r,!1,!0),b:()=>Ue(s,n,!0,!1)}}},Bd=$({spaceToBatchND_:function rk(n,t,e){const s=I(n,"x","spaceToBatchND");return C(s.rank>=1+t.length,()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`),C(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),C(s.shape.reduce((a,i,l)=>l>0&&l<=t.length?a&&(i+e[l-1][0]+e[l-1][1])%t[l-1]==0:a,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`),D.runKernel(Oi,{x:s},{blockShape:t,paddings:e})}}),ok={kernelName:ja,gradFunc:(n,t,e)=>{const{blockShape:s,crops:r}=e;return{x:()=>Bd(n,s,r)}}},ak={kernelName:"BroadcastTo",gradFunc:(n,t,e)=>{const r=e.inputShape,o=e.shape,a=Array.from(o);for(let l=r.length-1;l>=0;l--)if(r[l]===o[l])a[l]=1;else if(1!==r[l])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${o}].`);const i=[];for(let l=0;l<a.length;l++)a[l]>1&&i.push(l);return{x:()=>ve(n,i,!0)}}},ik={kernelName:po,gradFunc:n=>({x:()=>n.clone()})},lk={kernelName:fo,gradFunc:n=>({x:()=>Fe(n)})},uk={kernelName:mo,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{clipValueMin:r,clipValueMax:o}=e;return{x:()=>Nn(as(js(s,r),Er(s,o)),n,Fe(n))}}},ck={kernelName:qa,inputsToSave:["x"],gradFunc:mm.gradFunc},dk={kernelName:Ka,saveAllInputs:!0,gradFunc:(n,t,e)=>{const s=t.map(l=>l.shape),{axis:r}=e,o=Te(r,t[0].shape)[0],a=s.map(l=>l[o]);return wn(n,a,o).map(l=>()=>l)}},hk={kernelName:Xa,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{dilations:o,strides:a,pad:i,dataFormat:l}=e;return C(ws(o),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`),{x:()=>Wc(s.shape,n,r,a,i,l),filter:()=>ud(s,n,r.shape,a,i,l)}}},pk={kernelName:Za,inputsToSave:["dy","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{strides:o,pad:a,dataFormat:i,dimRoundingMode:l}=e;return{dy:()=>Us(n,r,o,a,i,1,l),filter:()=>ud(n,s,r.shape,o,a,i,l)}}},mk=$({conv3DBackpropFilter_:function fk(n,t,e,s,r){let o=n;4===n.rank&&(o=L(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]]));let a=t;return 4===a.rank&&(a=L(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),C(5===o.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${o.shape}.`),C(5===a.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${a.shape}.`),C(5===e.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),C(o.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${o.shape[4]}) must match input depth in filter (${e[3]}.`),C(a.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${a.shape[4]}) must match output depth for filter (${e[4]}).`),D.runKernel(Ru,{x:o,dy:a},{strides:s,pad:r,filterShape:e})}}),yk=$({conv3DBackpropInput_:function gk(n,t,e,s,r){C(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let o=n,a=t,i=!1;4===t.rank&&(i=!0,a=L(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),o=[1,n[0],n[1],n[2],n[3]]);const l=o[4],u=a.shape[4];C(5===o.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${o.length}.`),C(5===a.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${a.rank}`),C(5===e.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),C(l===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`),C(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);const h=D.runKernel(Ou,{dy:a,filter:e},{pad:r,strides:s,inputShape:o});return i?L(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),xk={kernelName:Ya,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:o}=e;C(ws(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[a,i]=t;return{x:()=>yk(a.shape,n,i,r,o),filter:()=>mk(a,n,i.shape,r,o)}}},gm=$({sin_:function bk(n){const e={x:I(n,"x","sin")};return D.runKernel(Wo,e)}}),wk={kernelName:go,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(bt(gm(me(e,"float32"))),n)}}},ym=$({sinh_:function vk(n){const e={x:I(n,"x","sinh")};return D.runKernel(Go,e)}}),Nk={kernelName:yo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(ym(me(e,"float32")),n)}}},xm=$({cumsum_:function Ck(n,t=0,e=!1,s=!1){const o={x:I(n,"x","cumsum")};return D.runKernel(Ja,o,{axis:t,exclusive:e,reverse:s})}}),kk={kernelName:Ja,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r,exclusive:o,reverse:a}=e;return{x:()=>{const i=xt([r],s.rank);let l=xm(n,r,o,!a);return null!=i&&(l=Ke(l,i)),l}}}},Ik={kernelName:Qa,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:o,dimRoundingMode:a}=e,i=s??[1,1];C(ws(i),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);const[l,u]=t;return C(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),C(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),C(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),C(mt(r,i),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${i}'.`),null!=a&&C(We(o),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${o}.`),{x:()=>Hf(l.shape,n,u,r,o,s,a),filter:()=>Uf(l,n,u.shape,r,o,s,a)}}},Sk={kernelName:ei,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,o={x:s,filter:r,dy:n},a={x:s,filter:r,dy:n};return{x:()=>D.runKernel(zu,o,e),filter:()=>D.runKernel(Vu,a,e)}}},Tk={kernelName:bo,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t,s={dy:n,y:e};return{x:()=>D.runKernel(Bu,s)}}},_k={kernelName:wo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=R(Rn(bt(et(e))),2/Math.sqrt(Math.PI));return{x:()=>R(n,s)}}},$k={kernelName:vo,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(n,e)}}},Ek={kernelName:ni,inputsToSave:["input"],gradFunc:(n,t)=>{const[e]=t;return{input:()=>L(n,e.shape)}}},Dk={kernelName:No,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(n,Rn(e))}}},Ak={kernelName:Co,gradFunc:n=>({x:()=>Fe(n)})},Rk={kernelName:ko,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Re(e.shape,s.shape);return{a:()=>{const i=we(n,me(s,"float32")),l=kt(e.shape,r);return l.length>0?L(ve(i,l),e.shape):i},b:()=>{let i=R(n,me(e,"float32"));const l=kt(s.shape,r);l.length>0&&(i=L(ve(i,l),s.shape));const u=et(s);return bt(we(i,me(u,"float32")))}}}},bm=$({rsqrt_:function Ok(n){const e={x:I(n,"x","rsqrt")};return D.runKernel(Vo,e)}}),Fk={kernelName:si,inputsToSave:["x","mean","variance","scale"],gradFunc:(n,t,e)=>{const{varianceEpsilon:s}=e,[r,o,a,i]=t,l=i??Ne(1),u=kt(o.shape,r.shape),c=[];if(1===o.rank){for(let b=0;b<r.shape.length-1;++b)c.push(r.shape[b]);c.push(1)}const d=ge(r,o),h=R(n,l),p=bm(te(a,Ne(s))),f=R(R(R(p,p),p),Ne(-.5));return{x:()=>L(R(R(n,1===o.rank?Ir(L(p,[1,1,1,o.shape[0]]),c):p),l),r.shape),mean:()=>{let b=R(R(p,Ne(-1)),h);return 1===o.rank&&(b=ve(b,u)),L(b,o.shape)},variance:()=>{let b=R(R(f,d),h);return 1===o.rank&&(b=ve(b,u)),L(b,o.shape)},scale:()=>{const b=R(d,p);let w=R(n,b);return 1===o.rank&&(w=ve(w,u)),L(w,o.shape)},offset:()=>{let b=n;return 1===o.rank&&(b=ve(b,u)),L(b,o.shape)}}}},wm=$({unsortedSegmentSum_:function Pk(n,t,e){const s=I(n,"x","unsortedSegmentSum"),r=I(t,"segmentIds","unsortedSegmentSum","int32");return C(We(e),()=>"numSegments must be of dtype int"),D.runKernel(zi,{x:s,segmentIds:r},{numSegments:e})}}),Lk={kernelName:ri,inputsToSave:["x","indices"],gradFunc:(n,t,e)=>{const[s,r]=t,{axis:o}=e,a=Te(o,s.shape)[0];return{x:()=>{const l=s.shape,u=r.size,c=l.slice(0,a),d=c.length,h=l.slice(o,l.length).slice(1),p=h.length,f=vm(0,d),m=vm(d+1,d+1+p),g=Nm([c,[u],h]),y=L(n,g),x=L(r,[u]),v=Nm([[d],f,m]),b=Ke(y,v);let w=wm(b,x,s.shape[a]);const k=Sr(v);return w=Ke(w,k),w},indices:()=>r}}};function vm(n,t){const e=[];for(let s=n;s<t;++s)e.push(s);return e}function Nm(n){const t=[];for(let e=0;e<n.length;++e)for(let s=0;s<n[e].length;++s)t.push(n[e][s]);return t}const Mk={kernelName:Io,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>Fe(e),b:()=>Fe(s)}}},zk={kernelName:ai,gradFunc:n=>({x:()=>me(n,"float32")})},Vk={kernelName:So,gradFunc:n=>({x:()=>Fe(n)})},Bk={kernelName:To,gradFunc:n=>({x:()=>Fe(n)})},Wk={kernelName:_o,gradFunc:n=>({x:()=>Fe(n)})},Gk={kernelName:ii,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{alpha:r}=e,o=qn(s,0);return{x:()=>Nn(o,n,R(n,r))}}},Uk={kernelName:Eo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>we(n,te(e,1))}}},Hk={kernelName:$o,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>we(n,me(e,"float32"))}}},jk={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;return{logits:()=>{const a=Rn(s);return ge(n,R(ve(n,r,!0),a))}}}},Kk=$({localResponseNormalizationBackprop_:function qk(n,t,e,s=5,r=1,o=1,a=.5){return D.runKernel(qu,{x:n,y:t,dy:e},{depthRadius:s,bias:r,alpha:o,beta:a})}}),Xk={kernelName:pi,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{depthRadius:o,bias:a,alpha:i,beta:l}=e;return{x:()=>Kk(s,r,n,o,a,i,l)}}};function Cm(n,t,e,s){return t.rank<e.rank&&(t=L(t,yt(t.shape,s))),n.rank<e.rank&&(n=L(n,yt(n.shape,s))),{x:()=>R(n,me(Hs(e,t),n.dtype))}}const km={kernelName:fi,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{reductionIndices:r}=s,o=t[0],l=Cm(n,t[1],o,Te(r,o.shape));return{x:()=>l.x()}}},Wd=$({less_:function Zk(n,t){let e=I(n,"a","less"),s=I(t,"b","less");return[e,s]=ft(e,s),Re(e.shape,s.shape),D.runKernel(li,{a:e,b:s})}}),Yk={kernelName:Do,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>R(n,me(js(e,s),"float32")),b:()=>R(n,me(Wd(e,s),"float32"))}}},Qk=$({maxPool3dGrad_:function Jk(n,t,e,s,r,o=[1,1,1],a,i){const l=I(n,"dy","maxPool3dGrad"),u=I(t,"input","maxPool3dGrad"),c=I(e,"output","maxPool3dGrad");let d=l,h=u,p=c,f=!1;4===u.rank&&(f=!0,d=L(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),h=L(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),p=L(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),C(5===d.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${d.rank}.`),C(5===h.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`),C(5===p.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`),C(mt(r,o),()=>`Error in maxPool3dGrad: Either strides or dilations must be 1. Got strides ${r} and dilations '${o}'`),null!=i&&C(We(a),()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const y=D.runKernel(Xu,{dy:d,input:h,output:p},{filterSize:s,strides:r,dilations:o,pad:a,dimRoundingMode:i});return f?L(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),eI={kernelName:gi,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:o,strides:a,dilations:i,pad:l,dimRoundingMode:u}=e,c=i??[1,1,1];return{x:()=>Qk(n,s,r,o,a,c,l,u)}}},nI=$({maxPoolGrad_:function tI(n,t,e,s,r,o,a){const i=I(n,"dy","maxPoolGrad"),l=I(t,"input","maxPoolGrad"),u=I(e,"output","maxPoolGrad");return C(l.rank===i.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`),C(4===i.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`),C(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),null!=a&&C(We(o),()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${o}.`),D.runKernel(Ku,{dy:i,input:l,output:u},{filterSize:s,strides:r,pad:o,dimRoundingMode:a})}}),sI={kernelName:mi,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:o,strides:a,pad:i}=e;return{x:()=>nI(n,s,r,o,a,i)}}},rI={kernelName:yi,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e,o=Te(r,s.shape),l=V(At(s.shape,o)[1]);return{x:()=>{const c=s.shape.slice();o.forEach(p=>{c[p]=1});const d=L(n,c);return we(R(d,vs(s.shape,"float32")),l)}}}},oI={kernelName:xi,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{axis:r}=s,[o,a]=t,l=Cm(n,a,o,Te(r,o.shape));return{x:()=>l.x()}}},aI={kernelName:Ao,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>R(n,me(Er(e,s),"float32")),b:()=>R(n,me(qn(e,s),"float32"))}}},iI={kernelName:bi,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,o=r.map(a=>a[0]);return{x:()=>qe(n,o,s.shape)}}},lI={kernelName:Ro,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Re(e.shape,s.shape);return{a:()=>{const i=kt(e.shape,r);return i.length>0?L(ve(n,i),e.shape):n},b:()=>{const i=R(n,bt(ll(we(e,s)))),l=kt(s.shape,r);return l.length>0?L(ve(i,l),s.shape):i}}}},uI={kernelName:Oo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Re(e.shape,s.shape);return{a:()=>{const i=R(n,me(s,"float32")),l=kt(e.shape,r);return l.length>0?L(ve(i,l),e.shape):i},b:()=>{const i=R(n,me(e,"float32")),l=kt(s.shape,r);return l.length>0?L(ve(i,l),s.shape):i}}}},cI={kernelName:wi,gradFunc:n=>({x:()=>bt(n)})},dI={kernelName:Ci,inputsToSave:["indices"],gradFunc:(n,t)=>{const e=t[0];return{indices:()=>It(e.shape,"float32")}}},hI={kernelName:Ni,gradFunc:n=>({x:()=>Fe(n)})},pI={kernelName:ki,saveAllInputs:!0,gradFunc:(n,t,e)=>{const{axis:s}=e;return _r(n,s).map(o=>()=>o)}},Im={kernelName:Ii,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,o=r.map(a=>a[0]);return{x:()=>qe(n,o,s.shape)}}},fI={kernelName:Fo,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(n,t)=>{const[e,s,r]=t,o=e,a=s,i=Re(o.shape,a.shape);return{a:()=>{const c=me(a,"float32");let d=R(n,R(c,Xs(o,ge(c,Ne(1)))));const h=kt(o.shape,i);return h.length>0&&(d=ve(d,h)),L(d,o.shape)},b:()=>{const c=qn(o,0),d=Nn(c,xn(o),Fe(o));let h=R(n,R(r,d));const p=kt(a.shape,i);return p.length>0&&(h=ve(h,p)),L(h,a.shape)}}}},mI={kernelName:Si,inputsToSave:["x","alpha"],gradFunc:(n,t)=>{const[e,s]=t,r=qn(e,0);return{x:()=>Nn(r,n,R(n,s)),alpha:()=>{let o=Nn(r,Fe(n),R(n,e));const a=kt(s.shape,n.shape);return a.length>0&&(o=ve(o,a)),L(o,s.shape)}}}},gI={kernelName:xo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Re(e.shape,s.shape);return{a:()=>{const i=we(n,me(s,"float32")),l=kt(e.shape,r);return l.length>0?L(ve(i,l),e.shape):i},b:()=>{let i=R(n,me(e,"float32"));const l=kt(s.shape,r);l.length>0&&(i=L(ve(i,l),s.shape));const u=et(s);return bt(we(i,me(u,"float32")))}}}},yI={kernelName:Po,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>we(n,bt(et(e)))}}},xI={kernelName:Mo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=R(Er(e,6),ca(e));return{x:()=>R(n,me(s,"float32"))}}},bI={kernelName:Lo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(n,me(ca(e),"float32"))}}},wI={kernelName:Ti,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>L(n,e.shape)}}},vI={kernelName:$i,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>D.runKernel(sc,r,e)}}},NI={kernelName:_i,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>D.runKernel(nc,r,e)}}},CI={kernelName:Ei,gradFunc:(n,t,e)=>{const{dims:s}=e,r=Te(s,n.shape);return{x:()=>qs(n,r)}}},kI={kernelName:zo,gradFunc:n=>({x:()=>Fe(n)})},II={kernelName:Vo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>bt(we(n,R(Xs(e,1.5),2)))}}},Gd=$({logicalNot_:function SI(n){const e={x:I(n,"x","logicalNot","bool")};return D.runKernel(di,e)}}),TI={kernelName:Di,inputsToSave:["condition"],gradFunc:(n,t)=>{const[e]=t;return{condition:()=>me(Fe(e),"float32"),t:()=>R(n,me(e,n.dtype)),e:()=>R(n,me(Gd(e),n.dtype))}}},_I={kernelName:Bo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=qn(e,Ne(0)),r=Ne(Nl),o=Ne(Cl),a=R(n,o),i=R(R(n,r),Rn(me(e,"float32")));return Nn(s,a,i)}}}},$I={kernelName:Ho,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(n,R(e,ge(Ne(1),e)))}}},EI={kernelName:Uo,gradFunc:n=>({x:()=>Fe(n)})},Ud=$({cos_:function DI(n){const e={x:I(n,"x","cos")};return D.runKernel(go,e)}}),AI={kernelName:Wo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(Ud(me(e,"float32")),n)}}},Sm=$({cosh_:function RI(n){const e={x:I(n,"x","cosh")};return D.runKernel(yo,e)}}),OI={kernelName:Go,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(Sm(me(e,"float32")),n)}}},FI={kernelName:Ai,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{begin:r,size:o}=e,a=s.shape,[i,l]=sl(s,r,o),u=[];for(let c=0;c<n.rank;c++)u.push([i[c],a[c]-i[c]-l[c]]);return{x:()=>Xc(n,u)}}},PI={kernelName:Pi,outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{dim:r}=e,a=R(n,s);return{logits:()=>ge(a,R(ve(a,[r],!0),s))}}},LI={kernelName:jo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(n,ua(e))}}},Hd=$({batchToSpaceND_:function MI(n,t,e){const s=I(n,"x","batchToSpaceND"),r=t.reduce((i,l)=>i*l);return C(s.rank>=1+t.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`),C(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),C(s.shape[0]%r==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`),D.runKernel(ja,{x:s},{blockShape:t,crops:e})}}),Tm={kernelName:Oi,gradFunc:(n,t,e)=>{const{blockShape:s,paddings:r}=e;return{x:()=>Hd(n,s,r)}}},_m={kernelName:Fi,gradFunc:(n,t,e)=>{const{axis:s}=e;return{x:()=>Lt(n,s)}}},QI=[mm,VC,BC,WC,GC,UC,HC,jC,qC,KC,XC,ZC,QC,nk,sk,ok,ak,ik,lk,uk,ck,dk,pk,hk,xk,wk,Nk,kk,Ik,Sk,gI,Tk,_k,$k,Ek,Dk,Rk,Ak,Fk,Lk,Mk,zk,Vk,Bk,Wk,Gk,Uk,Hk,jk,Xk,km,km,Yk,eI,sI,rI,oI,aI,iI,lI,uI,cI,dI,hI,pI,Im,Im,fI,mI,yI,xI,bI,wI,vI,NI,CI,kI,II,TI,_I,$I,EI,AI,OI,FI,PI,LI,Tm,Tm,_m,_m,{kernelName:qo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>we(n,R(Xt(me(e,"float32")),2))}}},{kernelName:Ko,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ne(2);return{a:()=>R(n,R(r,ge(e,s))),b:()=>R(n,R(r,ge(s,e)))}}},{kernelName:rc,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(n,R(me(e,"float32"),2))}}},{kernelName:Qo,gradFunc:n=>({x:()=>Fe(n)})},{kernelName:Xo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Re(e.shape,s.shape);return{a:()=>{let i=n;const l=kt(e.shape,r);return l.length>0&&(i=ve(i,l)),L(i,e.shape)},b:()=>{let i=n;const l=kt(s.shape,r);return l.length>0&&(i=ve(i,l)),L(bt(i),s.shape)}}}},{kernelName:Ri,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,r=s.shape.slice(),{axis:o}=e;Te(o,s.shape).forEach(u=>{r[u]=1});const i=L(n,r),l=R(i,vs(s.shape,"float32"));return{x:()=>l}}},{kernelName:Zo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>we(n,et(Ud(e)))}}},{kernelName:Yo,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(ge(Ne(1),et(e)),n)}}},{kernelName:Jo,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{reps:r}=e;return{x:()=>{let a=Fe(s);if(1===s.rank)for(let i=0;i<r[0];++i)a=te(a,qe(n,[i*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)a=te(a,qe(n,[i*s.shape[0],l*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)a=te(a,qe(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)for(let c=0;c<r[3];++c)a=te(a,qe(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2],c*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return a}}}},{kernelName:Li,gradFunc:(n,t,e)=>{const s=e,{perm:r}=s,o=Sr(r);return{x:()=>Ke(n,o)}}},{kernelName:Mi,gradFunc:(n,t,e)=>{const s=e,{axis:r}=s;return{value:()=>Ks(n,r)}}},{kernelName:zi,inputsToSave:["segmentIds"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>function YI(n,t){const e=is(t,Fe(t)),s=Uc(n,e);let r=js(t,Ne(0,"int32"));const o=s.rank-r.rank;for(let i=0;i<o;++i)r=An(r,i+1);r=as(r,vs(s.shape,"bool"));const a=Fe(s);return Nn(r,s,a)}(n,e)}}},{kernelName:Vi,gradFunc:n=>({x:()=>Fe(n)})}];for(const n of QI)s0(n);O.prototype.abs=function(){return this.throwIfDisposed(),Pt(this)};const t1=$({acos_:function e1(n){const e={x:I(n,"x","acos")};return D.runKernel(ro,e)}});O.prototype.acos=function(){return this.throwIfDisposed(),t1(this)};const s1=$({acosh_:function n1(n){const e={x:I(n,"x","acosh")};return D.runKernel(oo,e)}});O.prototype.acosh=function(){return this.throwIfDisposed(),s1(this)};const $m=$({mod_:function r1(n,t){let e=I(n,"a","mod"),s=I(t,"b","mod");return[e,s]=ft(e,s),D.runKernel(Ro,{a:e,b:s})}}),f1=$({addStrict_:function o1(n,t){Et("strict variants of ops have been deprecated and will be removed in future");const e=I(n,"a","addStrict"),s=I(t,"b","addStrict");return Me(e.shape,s.shape,"Error in addStrict: "),te(e,s)}}),m1=$({divStrict_:function u1(n,t){Et("strict variants of ops have been deprecated and will be removed in future");const e=I(n,"a","div"),s=I(t,"b","div");return Me(e.shape,s.shape,"Error in divideStrict: "),we(e,s)}}),g1=$({maximumStrict_:function h1(n,t){Et("strict variants of ops have been deprecated and will be removed in future");const e=I(n,"a","maximumStrict"),s=I(t,"b","maximumStrict");return Me(e.shape,s.shape,"Error in maximumStrict: "),is(e,s)}}),y1=$({minimumStrict_:function d1(n,t){Et("strict variants of ops have been deprecated and will be removed in future");const e=I(n,"a","minimumStrict"),s=I(t,"b","minimumStrict");return Me(e.shape,s.shape,"Error in minimumStrict: "),la(e,s)}}),x1=$({modStrict_:function c1(n,t){Et("strict variants of ops have been deprecated and will be removed in future");const e=I(n,"a","modStrict"),s=I(t,"b","modStrict");return Me(e.shape,s.shape,"Error in modStrict: "),$m(e,s)}}),b1=$({mulStrict_:function l1(n,t){Et("strict variants of ops have been deprecated and will be removed in future");const e=I(n,"a","mul"),s=I(t,"b","mul");return Me(e.shape,s.shape,"Error in multiplyStrict: "),R(e,s)}}),w1=$({powStrict_:function i1(n,t){return Et("strict variants of ops have been deprecated and will be removed in future"),Me(n.shape,t.shape,"Error in powStrict: "),Xs(n,t)}}),v1=$({squaredDifferenceStrict_:function p1(n,t){Et("strict variants of ops have been deprecated and will be removed in future");const e=I(n,"a","squaredDifferenceStrict"),s=I(t,"b","squaredDifferenceStrict");return Me(e.shape,s.shape,"Error in squaredDifferenceStrict: "),xd(e,s)}}),N1=$({subStrict_:function a1(n,t){Et("strict variants of ops have been deprecated and will be removed in future");const e=I(n,"a","subStrict"),s=I(t,"b","subStrict");return Me(e.shape,s.shape,"Error in subStrict: "),ge(e,s)}});O.prototype.addStrict=function(n){return this.throwIfDisposed(),f1(this,n)},O.prototype.add=function(n){return this.throwIfDisposed(),te(this,n)},O.prototype.all=function(n,t){return this.throwIfDisposed(),_f(this,n,t)},O.prototype.any=function(n,t){return this.throwIfDisposed(),Lc(this,n,t)},O.prototype.argMax=function(n){return this.throwIfDisposed(),Mc(this,n)};const k1=$({argMin_:function C1(n,t=0){const s={x:I(n,"x","argMin")};return D.runKernel(Wa,s,{axis:t})}});O.prototype.argMin=function(n){return this.throwIfDisposed(),k1(this,n)},O.prototype.asScalar=function(){return this.throwIfDisposed(),C(1===this.size,()=>"The array must have only 1 element."),L(this,[])},O.prototype.asType=function(n){return this.throwIfDisposed(),me(this,n)},O.prototype.as1D=function(){return this.throwIfDisposed(),L(this,[this.size])},O.prototype.as2D=function(n,t){return this.throwIfDisposed(),L(this,[n,t])},O.prototype.as3D=function(n,t,e){return this.throwIfDisposed(),L(this,[n,t,e])},O.prototype.as4D=function(n,t,e,s){return this.throwIfDisposed(),L(this,[n,t,e,s])},O.prototype.as5D=function(n,t,e,s,r){return this.throwIfDisposed(),L(this,[n,t,e,s,r])};const S1=$({asin_:function I1(n){const e={x:I(n,"x","asin")};return D.runKernel(ao,e)}});O.prototype.asin=function(){return this.throwIfDisposed(),S1(this)};const _1=$({asinh_:function T1(n){const e={x:I(n,"x","asinh")};return D.runKernel(lo,e)}});O.prototype.asinh=function(){return this.throwIfDisposed(),_1(this)};const E1=$({atan_:function $1(n){const e={x:I(n,"x","atan")};return D.runKernel(uo,e)}});O.prototype.atan=function(){return this.throwIfDisposed(),E1(this)};const A1=$({atan2_:function D1(n,t){let e=I(n,"a","atan2"),s=I(t,"b","atan2");return[e,s]=ft(e,s),D.runKernel(ho,{a:e,b:s})}});O.prototype.atan2=function(n){return this.throwIfDisposed(),A1(this,n)};const O1=$({atanh_:function R1(n){const e={x:I(n,"x","atanh")};return D.runKernel(co,e)}});O.prototype.atanh=function(){return this.throwIfDisposed(),O1(this)},O.prototype.avgPool=function(n,t,e,s){return this.throwIfDisposed(),Bc(this,n,t,e,s)},O.prototype.batchToSpaceND=function(n,t){return this.throwIfDisposed(),Hd(this,n,t)},O.prototype.batchNorm=function(n,t,e,s,r){return this.throwIfDisposed(),al(this,n,t,e,s,r)},O.prototype.broadcastTo=function(n){return this.throwIfDisposed(),od(this,n)},O.prototype.cast=function(n){return this.throwIfDisposed(),me(this,n)};const P1=$({ceil_:function F1(n){const e={x:I(n,"x","ceil")};return D.runKernel(fo,e)}});O.prototype.ceil=function(){return this.throwIfDisposed(),P1(this)},O.prototype.clipByValue=function(n,t){return this.throwIfDisposed(),un(this,n,t)},O.prototype.concat=function(n,t){return this.throwIfDisposed(),n instanceof O&&(n=[n]),Lt([this,...n],t)},O.prototype.conv1d=function(n,t,e,s,r,o){return this.throwIfDisposed(),$f(this,n,t,e,s,r,o)},O.prototype.conv2dTranspose=function(n,t,e,s,r){return this.throwIfDisposed(),Ef(this,n,t,e,s,r)},O.prototype.conv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),Us(this,n,t,e,s,r,o)},O.prototype.cos=function(){return this.throwIfDisposed(),Ud(this)},O.prototype.cosh=function(){return this.throwIfDisposed(),Sm(this)},O.prototype.cumsum=function(n,t,e){return this.throwIfDisposed(),xm(this,n,t,e)};const M1=$({depthToSpace_:function L1(n,t,e="NHWC"){const s=I(n,"x","depthToSpace"),r="NHWC"===e?s.shape[1]:s.shape[2],o="NHWC"===e?s.shape[2]:s.shape[3],a="NHWC"===e?s.shape[3]:s.shape[1];return C(r*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`),C(o*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${o} and ${t} for depthToSpace with input shape\n        ${s.shape}`),C(a%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${a} for depthToSpace with input shape ${s.shape}`),D.runKernel(Pu,{x:s},{blockSize:t,dataFormat:e})}});O.prototype.depthToSpace=function(n,t){return this.throwIfDisposed(),M1(this,n,t)},O.prototype.depthwiseConv2D=function(n,t,e,s,r,o){return Et("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),aa(this,n,t,e,s,r,o)},O.prototype.depthwiseConv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),aa(this,n,t,e,s,r,o)};const V1=$({dilation2d_:function z1(n,t,e,s,r=[1,1],o="NHWC"){const a=I(n,"x","dilation2d"),i=I(t,"filter","dilation2d");C(3===a.rank||4===a.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${a.rank}.`),C(3===i.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`),C("NHWC"===o,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${o}`);let l=a,u=!1;3===a.rank&&(l=L(a,[1,a.shape[0],a.shape[1],a.shape[2]]),u=!0);const h=D.runKernel(ei,{x:l,filter:i},{strides:e,pad:s,dilations:r});return u?L(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});O.prototype.dilation2d=function(n,t,e,s,r){return this.throwIfDisposed(),V1(this,n,t,e,s,r)};const W1=$({divNoNan_:function B1(n,t){let e=I(n,"a","div"),s=I(t,"b","div");[e,s]=ft(e,s);const r=we(e,s),o=Fe(r),a=Hs(s,o);return Nn(a,o,r)}});O.prototype.divNoNan=function(n){return this.throwIfDisposed(),W1(this,n)},O.prototype.divStrict=function(n){return this.throwIfDisposed(),m1(this,n)},O.prototype.div=function(n){return this.throwIfDisposed(),we(this,n)};const U1=$({dot_:function G1(n,t){const e=I(n,"t1","dot"),s=I(t,"t2","dot");C(!(1!==e.rank&&2!==e.rank||1!==s.rank&&2!==s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`);const r=1===e.rank?e.size:e.shape[1],o=1===s.rank?s.size:s.shape[0];if(C(r===o,()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${o}.`),1===e.rank&&1===s.rank){const a=L(e,[1,-1]),i=L(s,[-1,1]),l=Ue(a,i);return L(l,[])}if(1===e.rank&&2===s.rank){const a=L(e,[1,-1]),i=L(s,[s.shape[0],s.shape[1]]),l=Ue(a,i);return L(l,[l.size])}if(2===e.rank&&1===s.rank){const a=L(s,[-1,1]),i=Ue(e,a);return L(i,[i.size])}{const a=L(s,[s.shape[0],s.shape[1]]);return Ue(e,a)}}});O.prototype.dot=function(n){return this.throwIfDisposed(),U1(this,n)},O.prototype.elu=function(){return this.throwIfDisposed(),il(this)};const Y1=$({equalStrict_:function q1(n,t){Et("strict variants of ops have been deprecated and will be removed in future");const e=I(n,"a","equalStrict"),s=I(t,"b","equalStrict");return Me(e.shape,s.shape,"Error in equalStrict: "),Hs(e,s)}}),J1=$({greaterEqualStrict_:function Z1(n,t){Et("strict variants of ops have been deprecated and will be removed in future");const e=I(n,"a","greaterEqualStrict"),s=I(t,"b","greaterEqualStrict");return Me(e.shape,s.shape,"Error in greaterEqualStrict: "),js(e,s)}}),Q1=$({greaterStrict_:function X1(n,t){Et("strict variants of ops have been deprecated and will be removed in future");const e=I(n,"a","greaterStrict"),s=I(t,"b","greaterStrict");return Me(e.shape,s.shape,"Error in greaterStrict: "),qn(e,s)}}),eS=$({lessEqualStrict_:function K1(n,t){Et("strict variants of ops have been deprecated and will be removed in future");const e=I(n,"a","lessEqualStrict"),s=I(t,"b","lessEqualStrict");return Me(e.shape,s.shape,"Error in lessEqualStrict: "),Er(e,s)}}),tS=$({lessStrict_:function j1(n,t){Et("strict variants of ops have been deprecated and will be removed in future");const e=I(n,"a","lessStrict"),s=I(t,"b","lessStrict");return Me(e.shape,s.shape,"Error in lessStrict: "),Wd(e,s)}}),nS=$({notEqualStrict_:function H1(n,t){Et("strict variants of ops have been deprecated and will be removed in future");const e=I(n,"a","notEqualStrict"),s=I(t,"b","notEqualStrict");return Me(e.shape,s.shape,"Error in notEqualStrict: "),Tr(e,s)}});O.prototype.equalStrict=function(n){return this.throwIfDisposed(),Y1(this,n)},O.prototype.equal=function(n){return this.throwIfDisposed(),Hs(this,n)};const rS=$({erf_:function sS(n){let t=I(n,"x","erf");return C("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=me(t,"float32")),D.runKernel(wo,{x:t})}});O.prototype.erf=function(){return this.throwIfDisposed(),rS(this)},O.prototype.exp=function(){return this.throwIfDisposed(),Rn(this)},O.prototype.expandDims=function(n){return this.throwIfDisposed(),An(this,n)};const aS=$({expm1_:function oS(n){const e={x:I(n,"x","expm1")};return D.runKernel(No,e)}});O.prototype.expm1=function(){return this.throwIfDisposed(),aS(this)},O.prototype.fft=function(){return this.throwIfDisposed(),id(this)},O.prototype.flatten=function(){return this.throwIfDisposed(),L(this,[this.size])},O.prototype.floor=function(){return this.throwIfDisposed(),ll(this)},O.prototype.floorDiv=function(n){return this.throwIfDisposed(),Df(this,n)},O.prototype.gather=function(n,t){return this.throwIfDisposed(),Uc(this,n,t)},O.prototype.greaterEqualStrict=function(n){return this.throwIfDisposed(),J1(this,n)},O.prototype.greaterEqual=function(n){return this.throwIfDisposed(),js(this,n)},O.prototype.greaterStrict=function(n){return this.throwIfDisposed(),Q1(this,n)},O.prototype.greater=function(n){return this.throwIfDisposed(),qn(this,n)},O.prototype.ifft=function(){return this.throwIfDisposed(),pl(this)},O.prototype.irfft=function(){return this.throwIfDisposed(),Wf(this)};const lS=$({isFinite_:function iS(n){const e={x:I(n,"x","isFinite")};return D.runKernel(So,e)}});O.prototype.isFinite=function(){return this.throwIfDisposed(),lS(this)};const cS=$({isInf_:function uS(n){const e={x:I(n,"x","isInf")};return D.runKernel(To,e)}});O.prototype.isInf=function(){return this.throwIfDisposed(),cS(this)};const hS=$({isNaN_:function dS(n){const e={x:I(n,"x","isNaN")};return D.runKernel(_o,e)}});O.prototype.isNaN=function(){return this.throwIfDisposed(),hS(this)},O.prototype.leakyRelu=function(n){return this.throwIfDisposed(),Hc(this,n)},O.prototype.lessEqualStrict=function(n){return this.throwIfDisposed(),eS(this,n)},O.prototype.lessEqual=function(n){return this.throwIfDisposed(),Er(this,n)},O.prototype.lessStrict=function(n){return this.throwIfDisposed(),tS(this,n)},O.prototype.less=function(n){return this.throwIfDisposed(),Wd(this,n)};const fS=$({localResponseNormalization_:function pS(n,t=5,e=1,s=1,r=.5){const o=I(n,"x","localResponseNormalization");C(4===o.rank||3===o.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${o.rank}.`),C(We(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let a=o,i=!1;3===o.rank&&(i=!0,a=L(o,[1,o.shape[0],o.shape[1],o.shape[2]]));const c=D.runKernel(pi,{x:a},{depthRadius:t,bias:e,alpha:s,beta:r});return i?L(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});O.prototype.localResponseNormalization=function(n,t,e,s){return this.throwIfDisposed(),fS(this,n,t,e,s)};const gS=$({logSigmoid_:function mS(n){const t=I(n,"x","logSigmoid");return ss(s=>({value:bt(hl(bt(s))),gradFunc:a=>R(a,ua(bt(s)))}))(t)}});O.prototype.logSigmoid=function(){return this.throwIfDisposed(),gS(this)},O.prototype.logSoftmax=function(n){return this.throwIfDisposed(),Rf(this,n)},O.prototype.logSumExp=function(n,t){return this.throwIfDisposed(),sm(this,n,t)},O.prototype.log=function(){return this.throwIfDisposed(),xn(this)},O.prototype.log1p=function(){return this.throwIfDisposed(),nm(this)},O.prototype.logicalAnd=function(n){return this.throwIfDisposed(),as(this,n)},O.prototype.logicalNot=function(){return this.throwIfDisposed(),Gd(this)};const Em=$({logicalOr_:function yS(n,t){const e=I(n,"a","logicalOr","bool"),s=I(t,"b","logicalOr","bool");return Re(e.shape,s.shape),D.runKernel(hi,{a:e,b:s})}});O.prototype.logicalOr=function(n){return this.throwIfDisposed(),Em(this,n)};const bS=$({logicalXor_:function xS(n,t){const e=I(n,"a","logicalXor","bool"),s=I(t,"b","logicalXor","bool");return Re(e.shape,s.shape),as(Em(n,t),Gd(as(n,t)))}});O.prototype.logicalXor=function(n){return this.throwIfDisposed(),bS(this,n)},O.prototype.matMul=function(n,t,e){return this.throwIfDisposed(),Ue(this,n,t,e)},O.prototype.maxPool=function(n,t,e,s){return this.throwIfDisposed(),jc(this,n,t,e,s)},O.prototype.max=function(n,t){return this.throwIfDisposed(),On(this,n,t)},O.prototype.maximumStrict=function(n){return this.throwIfDisposed(),g1(this,n)},O.prototype.maximum=function(n){return this.throwIfDisposed(),is(this,n)},O.prototype.mean=function(n,t){return this.throwIfDisposed(),gt(this,n,t)},O.prototype.min=function(n,t){return this.throwIfDisposed(),ul(this,n,t)},O.prototype.minimumStrict=function(n){return this.throwIfDisposed(),y1(this,n)},O.prototype.minimum=function(n){return this.throwIfDisposed(),la(this,n)};const vS=$({mirrorPad_:function wS(n,t,e){C("reflect"===e||"symmetric"===e,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);const s=I(n,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");C(t.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);const r="reflect"===e?1:0;for(let i=0;i<s.rank;i++)C(2===t[i].length,()=>"Invalid number of paddings. Must be length of 2 each."),C(t[i][0]>=0&&t[i][0]<=s.shape[i]-r&&t[i][1]>=0&&t[i][1]<=s.shape[i]-r,()=>`Padding in dimension ${i} cannot be greater than or equal to ${s.shape[i]-r} or less than 0 for input of shape ${s.shape}`);return D.runKernel(bi,{x:s},{paddings:t,mode:e})}});O.prototype.mirrorPad=function(n,t){return this.throwIfDisposed(),vS(this,n,t)},O.prototype.modStrict=function(n){return this.throwIfDisposed(),x1(this,n)},O.prototype.mod=function(n){return this.throwIfDisposed(),$m(this,n)},O.prototype.mulStrict=function(n){return this.throwIfDisposed(),b1(this,n)},O.prototype.mul=function(n){return this.throwIfDisposed(),R(this,n)},O.prototype.neg=function(){return this.throwIfDisposed(),bt(this)},O.prototype.norm=function(n,t,e){return this.throwIfDisposed(),yd(this,n,t,e)},O.prototype.notEqualStrict=function(n){return this.throwIfDisposed(),nS(this,n)},O.prototype.notEqual=function(n){return this.throwIfDisposed(),Tr(this,n)},O.prototype.oneHot=function(n,t=1,e=0){return this.throwIfDisposed(),Ff(this,n,t,e)},O.prototype.onesLike=function(){return this.throwIfDisposed(),bn(this)},O.prototype.pad=function(n,t){return this.throwIfDisposed(),Xc(this,n,t)};const IS=$({pool_:function NS(n,t,e,s,r,o){null==r&&(r=[1,1]),null==o&&(o=1),0===s&&(s="valid");const a=I(n,"x","maxPool");let i=a,l=!1;3===a.rank&&(l=!0,i=L(a,[1,a.shape[0],a.shape[1],a.shape[2]])),C(mt(o,r),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${o} and dilations '${r}'`);const u=yn(i.shape,t,o,r,s),c=[u.dilationHeight,u.dilationWidth];let d;d="same"===s?function kS(n,t){const s=n.map((a,i)=>a+(a-1)*(t[i]-1)).map(a=>a-1),r=s.map(a=>Math.floor(a/2)),o=s.map((a,i)=>a-r[i]);return s.map((a,i)=>[r[i],o[i]])}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const h=1===c[0]&&1===c[1],[p,f]=function CS(n,t,e){const s=e.map(c=>c[0]),r=e.map(c=>c[1]),o=n.concat(s,r),a=t.map((c,d)=>(c-o[d]%c)%c),i=r.map((c,d)=>c+a[d]),l=t.map((c,d)=>[s[d],i[d]]),u=t.map((c,d)=>[0,a[d]]);return[l,u]}([u.inHeight,u.inWidth],c,d),m=h?s:"valid",g=h?i:Bd(i,c,p),x=("avg"===e?()=>Bc(g,t,o,m):()=>jc(g,t,o,m))(),v=h?x:Hd(x,c,f);return l?L(v,[v.shape[1],v.shape[2],v.shape[3]]):v}});O.prototype.pool=function(n,t,e,s,r){return this.throwIfDisposed(),IS(this,n,t,e,s,r)},O.prototype.powStrict=function(n){return this.throwIfDisposed(),w1(this,n)},O.prototype.pow=function(n){return this.throwIfDisposed(),Xs(this,n)},O.prototype.prelu=function(n){return this.throwIfDisposed(),Zc(this,n)};const TS=$({prod_:function SS(n,t=null,e=!1){let s=I(n,"x","prod");return"bool"===s.dtype&&(s=me(s,"int32")),D.runKernel(Qu,{x:s},{axis:t,keepDims:e})}});O.prototype.prod=function(n,t){return this.throwIfDisposed(),TS(this,n,t)};const $S=$({reciprocal_:function _S(n){const e={x:I(n,"x","reciprocal")};return D.runKernel(Po,e)}});O.prototype.reciprocal=function(){return this.throwIfDisposed(),$S(this)},O.prototype.relu=function(){return this.throwIfDisposed(),Ns(this)},O.prototype.relu6=function(){return this.throwIfDisposed(),Gf(this)},O.prototype.reshapeAs=function(n){return this.throwIfDisposed(),L(this,n.shape)},O.prototype.reshape=function(n){return this.throwIfDisposed(),L(this,n)},O.prototype.resizeBilinear=function(n,t,e){return this.throwIfDisposed(),Yf(this,n,t,e)},O.prototype.resizeNearestNeighbor=function(n,t,e){return this.throwIfDisposed(),Jf(this,n,t,e)},O.prototype.reverse=function(n){return this.throwIfDisposed(),qs(this,n)},O.prototype.rfft=function(){return this.throwIfDisposed(),ld(this)};const DS=$({round_:function ES(n){const e={x:I(n,"x","round")};return D.runKernel(zo,e)}});O.prototype.round=function(){return this.throwIfDisposed(),DS(this)},O.prototype.rsqrt=function(){return this.throwIfDisposed(),bm(this)},O.prototype.selu=function(){return this.throwIfDisposed(),Pf(this)},O.prototype.separableConv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),Lf(this,n,t,e,s,r,o)},O.prototype.sigmoid=function(){return this.throwIfDisposed(),ua(this)};const RS=$({sign_:function AS(n){const e={x:I(n,"x","sign")};return D.runKernel(Uo,e)}});O.prototype.sign=function(){return this.throwIfDisposed(),RS(this)},O.prototype.sin=function(){return this.throwIfDisposed(),gm(this)},O.prototype.sinh=function(){return this.throwIfDisposed(),ym(this)},O.prototype.slice=function(n,t){return this.throwIfDisposed(),qe(this,n,t)},O.prototype.softmax=function(n){return this.throwIfDisposed(),nd(this,n)},O.prototype.softplus=function(){return this.throwIfDisposed(),hl(this)},O.prototype.spaceToBatchND=function(n,t){return this.throwIfDisposed(),Bd(this,n,t)},O.prototype.split=function(n,t){return this.throwIfDisposed(),wn(this,n,t)},O.prototype.sqrt=function(){return this.throwIfDisposed(),Xt(this)},O.prototype.square=function(){return this.throwIfDisposed(),et(this)},O.prototype.squaredDifference=function(n){return this.throwIfDisposed(),xd(this,n)},O.prototype.squaredDifferenceStrict=function(n){return this.throwIfDisposed(),v1(this,n)},O.prototype.squeeze=function(n){return this.throwIfDisposed(),sd(this,n)},O.prototype.stack=function(n,t){this.throwIfDisposed();const e=n instanceof O?[this,n]:[this,...n];return Ks(e,t)},O.prototype.step=function(n){return this.throwIfDisposed(),ca(this,n)};const FS=$({stridedSlice_:function OS(n,t,e,s,r=0,o=0,a=0,i=0,l=0){const c={x:I(n,"x","stridedSlice")};return D.runKernel(oc,c,{begin:t,end:e,strides:s,beginMask:r,endMask:o,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:l})}});O.prototype.stridedSlice=function(n,t,e,s,r,o,a,i){return this.throwIfDisposed(),FS(this,n,t,e,s,r,o,a,i)},O.prototype.subStrict=function(n){return this.throwIfDisposed(),N1(this,n)},O.prototype.sub=function(n){return this.throwIfDisposed(),ge(this,n)},O.prototype.sum=function(n,t){return this.throwIfDisposed(),ve(this,n,t)};const LS=$({tan_:function PS(n){const e={x:I(n,"x","tan")};return D.runKernel(Zo,e)}});O.prototype.tan=function(){return this.throwIfDisposed(),LS(this)},O.prototype.tanh=function(){return this.throwIfDisposed(),zf(this)},O.prototype.tile=function(n){return this.throwIfDisposed(),Ir(this,n)},O.prototype.toBool=function(){return this.throwIfDisposed(),me(this,"bool")},O.prototype.toFloat=function(){return this.throwIfDisposed(),me(this,"float32")},O.prototype.toInt=function(){return this.throwIfDisposed(),me(this,"int32")};const zS=$({topk_:function MS(n,t=1,e=!0){const s=I(n,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const o={x:s},a={k:t,sorted:e},[i,l]=D.runKernel(ac,o,a);return{values:i,indices:l}}});O.prototype.topk=function(n,t){return this.throwIfDisposed(),zS(this,n,t)},O.prototype.transpose=function(n){return this.throwIfDisposed(),Ke(this,n)};const BS=$({unique_:function VS(n,t=0){const e=I(n,"x","unique","string_or_numeric");C(e.rank>0,()=>"The input tensor must be at least 1D");const s={x:e},r={axis:t},[o,a]=D.runKernel(ic,s,r);return{values:o,indices:a}}});let kl;function St(){return null==kl&&(kl=function iw(){return D.backend}().epsilon()),kl}O.prototype.unique=function(n){return this.throwIfDisposed(),BS(this,n)},O.prototype.unsortedSegmentSum=function(n,t){return this.throwIfDisposed(),wm(this,n,t)},O.prototype.unstack=function(n){return this.throwIfDisposed(),_r(this,n)},O.prototype.where=function(n,t){return this.throwIfDisposed(),Nn(n,this,t)},O.prototype.zerosLike=function(){return this.throwIfDisposed(),Fe(this)};class Kn extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Kn.prototype)}}class Cn extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Cn.prototype)}}class E extends Error{constructor(t){super(t),Object.setPrototypeOf(this,E.prototype)}}class $e extends Error{constructor(t){super(t),Object.setPrototypeOf(this,$e.prototype)}}class jd extends Error{constructor(t){super(t),Object.setPrototypeOf(this,jd.prototype)}}function Js(n,t){if(Array.isArray(n)){let e=[];for(let s=0;s<t;s++)e=e.concat(n);return e}{const e=new Array(t);return e.fill(n),e}}function cn(n,t){if(!n)throw new jd(t)}function Am(n,t){let e=0;for(const s of n)s===t&&e++;return e}function en(n){return 1===n.length?n[0]:n}function tt(n){return Array.isArray(n)?n:[n]}function ds(n){const e=n.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Qs(n){return n.length<=1||-1===n.indexOf("_")?n:n.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}Error;let kn={};function qd(n){if(null==n)return null;const t={};return t.className=n.getClassName(),t.config=n.getConfig(),t}function Kd(n){if(null!=n&&"object"==typeof n)if(Array.isArray(n))n.forEach(t=>Kd(t));else{const t=Object.keys(n);for(const e of t){const s=n[e];null!=s&&"object"==typeof s&&(Array.isArray(s)||"ndarray"!==s.type||"number"!=typeof s.value?Kd(s):n[e]=s.value)}}}function ma(n,t={},e={},s="object",r=!1){if("string"==typeof n){const o=n;let a;if(o in e)a=e[o];else if(o in kn)a=kn[o];else if(a=t[o],null==a)throw new E(`Unknown ${s}: ${n}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const o=n;if(null==o.className||null==o.config)throw new E(`${s}: Improper config format: ${JSON.stringify(o)}.\n'className' and 'config' must set.`);const a=o.className;let i,l;if(a in e?[i,l]=e[a]:a in kn?[i,l]=kn.className:a in t&&([i,l]=t[a]),null==i)throw new E(`Unknown ${s}: ${a}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const u={};for(const p of Object.keys(kn))u[p]=kn[p];for(const p of Object.keys(e))u[p]=e[p];o.config.customObjects=u;const d=Object.assign({},kn);for(const p of Object.keys(e))kn[p]=e[p];Kd(o.config);const h=l(i,o.config,e,r);return kn=Object.assign({},d),h}{const u=Object.assign({},kn);for(const d of Object.keys(e))kn[d]=e[d];const c=new i(o.config);return kn=Object.assign({},u),c}}}function Il(n,t){return-1*function WS(n,t){return n<t?-1:n>t?1:0}(n,t)}function Cs(n){if(null==n)return n;const t=[];for(const e of n)-1===t.indexOf(e)&&t.push(e);return t}function GS(n){if(null==n)throw new E(`Invalid value in obj: ${JSON.stringify(n)}`);for(const t in n)if(n.hasOwnProperty(t))return!1;return!0}function er(n,t,e){if(null!=e&&n.indexOf(e)<0)throw new E(`${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`)}function Xd(n,t,e=0,s=1/0){return cn(e>=0),cn(s>=e),Array.isArray(n)&&n.length>=e&&n.length<=s&&n.every(r=>typeof r===t)}function Rt(n,t){Array.isArray(n)?(C(n.length>0,()=>`${t} is unexpectedly an empty array.`),n.forEach((e,s)=>Rt(e,`element ${s+1} of ${t}`))):C(Number.isInteger(n)&&n>0,()=>`Expected ${t} to be a positive integer, but got ${Rm(n)}.`)}function Rm(n){return null===n?"null":Array.isArray(n)?"["+n.map(t=>Rm(t)).join(",")+"]":"string"==typeof n?`"${n}"`:`${n}`}function Om(n){return"relu"===n?"relu":"linear"===n?"linear":"elu"===n?"elu":null}function Zd(n,t){return F(()=>Xt(ve(R(n,n),t,!0)))}class ga extends Nr{getConfig(){return{}}}Z((()=>{class n extends ga{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return F(()=>{const s=Zd(e,this.axis),r=un(s,0,this.maxValue);return R(e,we(r,te(St(),s)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}return n.className="MaxNorm",n})()),Z((()=>{class n extends ga{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return F(()=>we(e,te(St(),Zd(e,this.axis))))}getConfig(){return{axis:this.axis}}}return n.className="UnitNorm",n})()),Z((()=>{class n extends ga{apply(e){return Ns(e)}}return n.className="NonNeg",n})()),Z((()=>{class n extends ga{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return F(()=>{const s=Zd(e,this.axis),r=te(R(this.rate,un(s,this.minValue,this.maxValue)),R(1-this.rate,s));return R(e,we(r,te(St(),s)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}return n.className="MinMaxNorm",n})());const Fm={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Tt(n){return qd(n)}function Pm(n,t={}){return ma(n,gn.getMap().classNameMap,t,"constraint")}function _t(n){return null==n?null:"string"==typeof n?Pm({className:n in Fm?Fm[n]:n,config:{}}):n instanceof ga?n:Pm(n)}const HS=["channelsFirst","channelsLast"],jS=["nearest","bilinear"],qS=["valid","same","causal"],KS=["max","avg"],XS=["sum","mul","concat","ave"],Ar=new Map;function wt(n){er(HS,"DataFormat",n)}function dn(n){er(qS,"PaddingMode",n)}function Lm(n){er(KS,"PoolMode",n)}const ya=[];function tr(n,t){ya.push(n);try{const e=t();return ya.pop(),e}catch(e){throw ya.pop(),e}}function zm(n){if(!Bm(n))throw new Error("Not a valid tensor name: '"+n+"'");return function YS(){return 0===ya.length?"":ya.join("/")+"/"}()+n}function Vm(n){if(!Bm(n))throw new Error("Not a valid tensor name: '"+n+"'");Ar.has(n)||Ar.set(n,0);const t=Ar.get(n);if(Ar.set(n,Ar.get(n)+1),t>0){const e=`${n}_${t}`;return Ar.set(e,1),e}return n}const JS=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Bm(n){return!!n.match(JS)}function QS(n){return n===parseInt(n.toString(),10)}function ks(n,t,e){null==t&&(t=0),null==e&&(e=n.length);let s=1;for(let r=t;r<e;++r)s*=n[r];return s}function Sl(n){return vn(n=Array.isArray(n)?new Float32Array(n):n)}function Rr(n){return ul(Sl(n)).dataSync()[0]}function Is(n){return On(Sl(n)).dataSync()[0]}function Pn(n,t){if(t<n)throw new E(`end (${t}) < begin (${n}) is forbidden.`);const e=[];for(let s=n;s<t;++s)e.push(s);return e}function xa(n,t){return n.asType(t)}function ba(n,t=-1){const e=n.shape.slice();return t<0&&(t=e.length+t+1),e.splice(t,0,1),n.reshape(e)}function nr(n,t,e){return F(()=>{switch(n.rank){case 1:return ed(n,t,e);case 2:return Mf(n,[t,0],[e,n.shape[1]]);case 3:return td(n,[t,0,0],[e,n.shape[1],n.shape[2]]);case 4:return dl(n,[t,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3]]);case 5:return qe(n,[t,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4]]);case 6:return qe(n,[t,0,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4],n.shape[5]]);default:throw new E(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}})}function Yd(n,t,e){return F(()=>{switch(n.rank){case 1:return ed(n,t,e);case 2:return Mf(n,[0,t],[n.shape[0],e]);case 3:return td(n,[0,0,t],[n.shape[0],n.shape[1],e]);case 4:return dl(n,[0,0,0,t],[n.shape[0],n.shape[1],n.shape[2],e]);default:throw new E(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function Tl(n,t,e,s){return F(()=>{switch(n.rank){case 1:return ed(n,t,e);case 2:switch(s){case 1:return nr(n,t,e);case 2:return Yd(n,t,e);default:throw new E(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return nr(n,t,e);case 2:return td(n,[0,t,0],[n.shape[0],e,n.shape[2]]);case 3:return Yd(n,t,e);default:throw new E(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return nr(n,t,e);case 2:return dl(n,[0,t,0,0],[n.shape[0],e,n.shape[2],n.shape[3]]);case 3:return dl(n,[0,0,t,0],[n.shape[0],n.shape[1],e,n.shape[3]]);case 4:return Yd(n,t,e);default:throw new E(`The axis is not within the rank of the tensor ${s}`)}default:throw new E(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function Jd(n,t=-1){let e;return t<0&&(e=n[0].rank,t=0!==e?e:0),t===n[0].rank&&(t=-1),Lt(n,t)}function Gm(n,t){switch(n.rank){case 1:return Rw([n,t]);case 2:return Fw([n,t],0);case 3:return Lw([n,t],0);case 4:return zw([n,t],0);default:throw new E(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}}function Qd(n,t){if(Array.isArray(t)||(t=[t]),n.rank!==t.length)throw new E(`The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`);return Ir(n,t)}function _l(n,t=0,e=1,s,r){return Rv(n,t,e,s,r)}function Xn(n,t,e,s){if(n.rank<2||t.rank<2)throw new $e(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`);if(t.rank>=3&&n.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new $e(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`);if(2===n.rank&&2===t.rank)return jf({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?eh(n.rank,s,"channelsLast"):null,activation:e});{const r=n.shape.slice(),o=r.pop();n=n.reshape([-1,o]);const a=t.shape.slice(),i=a.pop(),l=a.pop(),u=[...a,i],c=Array.from({length:t.rank},(f,m)=>0===m?t.rank-2:m<=t.rank-2?m-1:m);t=t.transpose(c).reshape([l,-1]);const d=[...r,...u];return jf({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?eh(n.rank,s,"channelsLast"):null,activation:e}).reshape(d)}}function Um(n,t,e){return F(()=>(t=Array.isArray(t)?vn(t,"int32"):t.toInt(),Uc(n,t,e)))}function wa(n){return R(n,n)}function eh(n,t,e){const s=t.shape;if(1!==t.rank&&t.rank!==n)throw new E(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`);if(5===n){if("channelsFirst"===e)return t.reshape(1===s.length?[1,s[0],1,1,1]:[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===e)return t.reshape(1===s.length?[1,1,1,1,s[0]]:[1].concat(s))}else if(4===n){if("channelsFirst"===e)return t.reshape(1===s.length?[1,s[0],1,1]:[1,s[2],s[0],s[1]]);if("channelsLast"===e)return t.reshape(1===s.length?[1,1,1,s[0]]:[1].concat(s))}else if(3===n){if("channelsFirst"===e)return t.reshape(1===s.length?[1,s[0],1]:[1,s[1],s[0]]);if("channelsLast"===e)return t.reshape(1===s.length?[1,1,s[0]]:[1].concat(s))}else if(n<3)return t;throw new E(`Unsupported input rank by biasAdd: ${t.rank}`)}function Zn(n,t,e){return F(()=>(null==e&&(e="channelsLast"),wt(e),n.add(eh(n.rank,t,e))))}function Hm(n,t,e,s){return F(()=>aN(n,t,e,s))}function va(n,t,e=!1){return e?n():t()}const lT=["fanIn","fanOut","fanAvg"],uT=["normal","uniform","truncatedNormal"];class In extends Nr{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}Z((()=>{class n extends In{apply(e,s){return It(e,s)}}return n.className="Zeros",n})());let jm=(()=>{class n extends In{apply(e,s){return vs(e,s)}}return n.className="Ones",n})();Z(jm),Z((()=>{class n extends In{constructor(e){if(super(),"object"!=typeof e)throw new E(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new E(`config must have value set but got ${e}`);this.value=e.value}apply(e,s){return F(()=>R(Ne(this.value),vs(e,s)))}getConfig(){return{value:this.value}}}return n.className="Constant",n})()),Z((()=>{class n extends In{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,s){return cl(e,this.minval,this.maxval,s)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}return n.className="RandomUniform",n})()),Z((()=>{class n extends In{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new $e(`randomNormal does not support dType ${s}.`);return _l(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="RandomNormal",n})()),Z((()=>{class n extends In{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new $e(`truncatedNormal does not support dType ${s}.`);return Vf(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="TruncatedNormal",n})()),Z((()=>{class n extends In{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,s){return F(()=>{if(2!==e.length||e[0]!==e[1])throw new E("Identity matrix initializer can only be used for 2D square matrices.");return R(this.gain,Af(e[0]))})}getConfig(){return{gain:this.gain}}}return n.className="Identity",n})());let hn=(()=>{class n extends In{constructor(e){if(super(),e.scale<0)throw new E(`scale must be a positive float. Got: ${e.scale}`);this.scale=e.scale??1,this.mode=e.mode??"fanIn",function cT(n){er(lT,"FanMode",n)}(this.mode),this.distribution=e.distribution??"normal",function dT(n){er(uT,"Distribution",n)}(this.distribution),this.seed=e.seed}apply(e,s){const r=function hT(n,t="channelsLast"){let e,s;if(wt(t),2===n.length)e=n[0],s=n[1];else if(-1!==[3,4,5].indexOf(n.length)){if("channelsFirst"===t){const r=ks(n,2);e=n[1]*r,s=n[0]*r}else if("channelsLast"===t){const r=ks(n,0,n.length-2);e=n[n.length-2]*r,s=n[n.length-1]*r}}else{const r=ks(n);e=Math.sqrt(r),s=Math.sqrt(r)}return[e,s]}(e),o=r[0],a=r[1];let i=this.scale;if(i/="fanIn"===this.mode?Math.max(1,o):"fanOut"===this.mode?Math.max(1,a):Math.max(1,(o+a)/2),"normal"===this.distribution){const l=Math.sqrt(i);if("float32"!==(s=s||"float32")&&"int32"!==s)throw new $e(`${this.getClassName()} does not support dType ${s}.`);return Vf(e,0,l,s,this.seed)}{const l=Math.sqrt(3*i);return cl(e,-l,l,s)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}return n.className="VarianceScaling",n})();Z(hn);let qm=(()=>{class n extends hn{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return hn.className}}return n.className="GlorotUniform",n})();Z(qm);let Km=(()=>{class n extends hn{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return hn.className}}return n.className="GlorotNormal",n})();Z(Km);let Xm=(()=>{class n extends hn{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return hn.className}}return n.className="HeNormal",n})();Z(Xm);let Zm=(()=>{class n extends hn{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return hn.className}}return n.className="HeUniform",n})();Z(Zm);let Ym=(()=>{class n extends hn{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return hn.className}}return n.className="LeCunNormal",n})();Z(Ym);let Jm=(()=>{class n extends hn{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return hn.className}}return n.className="LeCunNormal",n})();Z(Jm),Z((()=>{class n extends In{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=e.gain??this.DEFAULT_GAIN,this.seed=e.seed,null!=this.seed)throw new $e("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,s){return F(()=>{if(e.length<2)throw new $e("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const o=_l(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let a=RC.gramSchmidt(o);return e[0]>e[1]&&(a=a.transpose()),R(this.gain,a)})}getConfig(){return{gain:this.gain,seed:this.seed}}}return n.className="Orthogonal",n})());const Qm={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function eg(n,t={}){return ma(n,gn.getMap().classNameMap,t,"initializer")}function ht(n){return qd(n)}function it(n){if("string"==typeof n){const t=n in Qm?Qm[n]:n;if("GlorotNormal"===t)return new Km;if("GlorotUniform"===t)return new qm;if("HeNormal"===t)return new Xm;if("HeUniform"===t)return new Zm;if("LeCunNormal"===t)return new Ym;if("LeCunUniform"===t)return new Jm;{const e={};return e.className=t,e.config={},eg(e)}}return n instanceof In?n:eg(n)}let pT=0;function tg(){return pT++}const $l={};function El(n=""){return n in $l||($l[n]=0),$l[n]+=1,n+$l[n].toString()}function th(n){return Array.isArray(n)&&Array.isArray(n[0])}function Dl(n){return 0===n.length?[]:Array.isArray(n[0])?n:[n]}function Ee(n){let t;if(Array.isArray(n)){if(1!==n.length)throw new E(`Expected Tensor length to be 1; got ${n.length}`);t=n[0]}else t=n;return t}function Xe(n){if(Array.isArray(n)&&Array.isArray(n[0])){if(1===n.length)return n[0];throw new E(`Expected exactly 1 Shape; got ${n.length}`)}return n}function Al(n){let t=0;for(const e of n)t+=0===e.shape.length?1:e.shape.reduce((s,r)=>s*r);return t}const ng="Variable";class Yn{constructor(t,e="float32",s=ng,r=!0,o=null){this.dtype=e??"float32",this.shape=t.shape,this.id=tg(),this.originalName=zm(s=s??ng),this.name=Vm(this.originalName),this.trainable_=r,this.constraint=o,this.val=rd(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function fT(n,t){if(n.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(n.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function nh(n){return n.map(t=>t.read())}function sh(n){n.forEach(t=>{t[0].write(t[1])})}class zt{constructor(t){this.dtype=t.dtype,this.shape=t.shape,this.ndim=null!=t.shape?t.shape.length:t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class Jn{constructor(t,e,s,r,o,a,i){this.dtype=t,this.shape=e,this.sourceLayer=s,this.inputs=r,this.callArgs=o,this.outputTensorIndex=i,this.id=tg(),null!=a&&(this.originalName=zm(a),this.name=Vm(this.originalName)),this.rank=e.length}}let mT=0;class Rl{constructor(t,e){this.callArgs=e,this.id=mT++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const s of t.inboundLayers)s?.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)t.push(null!=e?e.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let gT=0;class Pe extends Nr{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=gT++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const s=this.getClassName();e=ds(s)+"_"+El(s)}if(this.name=e,this.trainable_=t.trainable??!0,null!=t.inputShape||null!=t.batchInputShape){let s;if(null!=t.batchInputShape)s=t.batchInputShape;else if(null!=t.inputShape){let o=null;null!=t.batchSize&&(o=t.batchSize),s=[o].concat(t.inputShape)}this.batchInputShape=s;let r=t.dtype;null==r&&(r=t.inputDType),null==r&&(r="float32"),this.dtype=r}this.initialWeights=null!=t.weights?t.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new Cn(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new E(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return en(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return en(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Kn(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Kn(`Layer ${this.name} is not connected, no input to return.`);return en(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Kn(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Kn(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return en(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=tt(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=tt(this.inputSpec);if(t.length!==e.length)throw new E(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let s=0;s<t.length;s++){const r=t[s],o=e[s];if(null==o)continue;const a=r.rank;if(null!=o.ndim&&a!==o.ndim)throw new E(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${o.ndim}, found ndim=${a}`);if(null!=o.maxNDim&&a>o.maxNDim)throw new E(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${o.maxNDim}, found ndim=${a}`);if(null!=o.minNDim&&a<o.minNDim)throw new E(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${o.minNDim}, found ndim=${a}.`);if(null!=o.dtype&&r.dtype!==o.dtype)throw new E(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${o.dtype}, found dtype=${r.dtype}.`);if(o.axes){const i=r.shape;for(const l in o.axes){const u=Number(l),c=o.axes[l],d=u>=0?i[u]:i[i.length+u];if(null!=c&&-1===[c,null].indexOf(d))throw new E(`Input ${s} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${c} but got shape ${i}.`)}}if(null!=o.shape)for(let i=0;i<o.shape.length;++i){const l=o.shape[i],u=r.shape[i];if(null!=l&&null!=u&&l!==u)throw new E(`Input ${s} is incompatible with layer ${this.name}: expected shape=${o.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const s=tt(t);let r=!0;for(const a of s)if(!(a instanceof Jn)){r=!1;break}let o=!0;for(const a of s)if(a instanceof Jn){o=!1;break}if(r===o)throw new E("Arguments to apply() must be all SymbolicTensors or all Tensors");return tr(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const a=[];for(const i of tt(t))a.push(i.shape);this.build(en(a)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&o&&(this._refCount=1)}if(this.assertInputCompatibility(t),o){let a=this.call(t,e);const i=tt(a),l=[];for(let u of i)-1!==s.indexOf(u)&&(u=u.clone()),l.push(u);if(a=en(l),null!=this.activityRegularizer)throw new $e("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}{const a=function yT(n){n=tt(n);const t=[];for(const e of n)t.push(e.shape);return en(t)}(t),i=this.computeOutputShape(a);let l;const u="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?a[0]:a),l=null!=i&&i.length>0&&Array.isArray(i[0])?i.map((c,d)=>new Jn(u,c,this,tt(t),e,this.name,d)):new Jn(u,i,this,tt(t),e,this.name),this.addInboundNode(t,l,null,null,a,i,e),this._refCount++,null!=this.activityRegularizer)throw new $e("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((s,r)=>{null!=s&&null!=t[r]&&t[r]!==s&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Kn(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const s=JSON.stringify(e.outputShapes);-1===t.indexOf(s)&&t.push(s)}if(1===t.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Kn(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Cn(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Al(this.weights)}build(t){this.built=!0}getWeights(t=!1){return nh(t?this.trainableWeights:this.weights)}setWeights(t){F(()=>{const e=this.weights;if(e.length!==t.length)throw new E(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const s=[],r=nh(e);for(let o=0;o<r.length;++o){const a=r[o],i=e[o],l=t[o];if(!Se(a.shape,l.shape))throw new E(`Layer weight shape ${a.shape} not compatible with provided weight shape ${l.shape}`);s.push([i,l])}sh(s)})}addWeight(t,e,s,r,o,a,i){if(-1!==this._addedWeightNames.indexOf(t))throw new E(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==s&&(s="float32"),this.fastWeightInitDuringBuild&&(r=it("zeros"));const l=r.apply(e,s),u=new Yn(l,s,t,a,i);return l.dispose(),null!=o&&this.addLoss(()=>o.apply(u.read())),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=tt(t),null!=this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(s=>{if(null!=s)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,s,r,o,a,i=null){const l=tt(t);e=tt(e),s=tt(s),r=tt(r),o=Dl(o),a=Dl(a);const u=[],c=[],d=[];for(const h of l)u.push(h.sourceLayer),c.push(h.nodeIndex),d.push(h.tensorIndex);new Rl({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:d,inputTensors:l,outputTensors:e,inputMasks:s,outputMasks:r,inputShapes:o,outputShapes:a},i);for(let h=0;h<e.length;h++)e[h].sourceLayer=this,e[h].nodeIndex=this.inboundNodes.length-1,e[h].tensorIndex=h}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function sg(n,t,e){if((null==t||null!=e&&e>0)&&(t=n.sourceLayer,e=n.nodeIndex),0===t.inboundNodes.length)return[n];{const s=t.inboundNodes[e];if(0===s.inboundLayers.length)return s.inputTensors;{const r=[];for(let o=0;o<s.inboundLayers.length;o++){const u=sg(s.inputTensors[o],s.inboundLayers[o],s.nodeIndices[o]);for(const c of u)-1===r.indexOf(c)&&r.push(c)}return r}}}let Ol=(()=>{class n extends Pe{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:El("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new E("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let s=e.batchInputShape;if(null==s){if(null==e.inputShape)throw new E("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");s=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new E("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const r=e.dtype||"float32";this.batchInputShape=s,this.dtype=r,this.inputSpec=[{shape:s}];const o=new Jn(this.dtype,this.batchInputShape,this,[],{},this.name);o.nodeIndex=0,o.tensorIndex=0,new Rl({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[o],outputTensors:[o],inputMasks:[null],outputMasks:[null],inputShapes:[s],outputShapes:[s]})}apply(e,s){throw new E(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}return n.className="InputLayer",n})();function Ss(n){return rh.apply(this,arguments)}function rh(){return(rh=(0,M.Z)(function*(n){if(null==n)return;const t=[],e=[],s=[];for(const r in n){const o=n[r];if("number"!=typeof o){const a=o;t.push(a.data()),e.push(r),s.push(a)}}if(t.length>0){const r=yield Promise.all(t);for(let o=0;o<r.length;++o)n[e[o]]=r[o][0];De(s)}})).apply(this,arguments)}function rg(n){if(null!=n)for(const t in n){const e=n[t];"number"!=typeof e&&e.dispose()}}Z(Ol);class Or{constructor(){this.validationData=null}setParams(t){this.params=t}onEpochBegin(t,e){return(0,M.Z)(function*(){})()}onEpochEnd(t,e){return(0,M.Z)(function*(){})()}onBatchBegin(t,e){return(0,M.Z)(function*(){})()}onBatchEnd(t,e){return(0,M.Z)(function*(){})()}onTrainBegin(t){return(0,M.Z)(function*(){})()}onTrainEnd(t){return(0,M.Z)(function*(){})()}setModel(t){}}class vT{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}onEpochBegin(t,e){var s=this;return(0,M.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochBegin(t,e)})()}onEpochEnd(t,e){var s=this;return(0,M.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochEnd(t,e)})()}onBatchBegin(t,e){var s=this;return(0,M.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchBegin(t,e)})()}onBatchEnd(t,e){var s=this;return(0,M.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchEnd(t,e)})()}onTrainBegin(t){var e=this;return(0,M.Z)(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainBegin(t)})()}onTrainEnd(t){var e=this;return(0,M.Z)(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainEnd(t)})()}}class NT extends Or{constructor(){super()}onEpochBegin(t){var e=this;return(0,M.Z)(function*(){e.seen=0,e.totals={}})()}onBatchEnd(t,e){var s=this;return(0,M.Z)(function*(){null==e&&(e={});const r=e.size??0;s.seen+=r;for(const o in e){const a=e[o];if("number"==typeof a)s.totals.hasOwnProperty(o)||(s.totals[o]=0),s.totals[o]=s.totals[o]+a*r;else{let i;o in s.totals?i=s.totals[o]:s.totals[o]=0;const l=F(()=>te(s.totals[o],R(a,r)));s.totals[o]=l,i?.dispose()}}})()}onEpochEnd(t,e){var s=this;return(0,M.Z)(function*(){if(null!=e)for(const r of s.params.metrics)null!=s.totals[r]&&("number"==typeof s.totals[r]?e[r]=s.totals[r]/s.seen:F(()=>{const o=R(we(1,s.seen),s.totals[r]);e[r]=o,s.totals[r].dispose(),jn(e[r])}))})()}}class CT extends Or{onTrainBegin(t){var e=this;return(0,M.Z)(function*(){e.epoch=[],e.history={}})()}onEpochEnd(t,e){var s=this;return(0,M.Z)(function*(){null==e&&(e={}),s.epoch.push(t);for(const r in e)null==s.history[r]&&(s.history[r]=[]),s.history[r].push(e[r])})()}syncData(){var t=this;return(0,M.Z)(function*(){const e=[],s=[],r=[];for(const a in t.history){const i=t.history[a];for(let l=0;l<i.length;++l)"number"!=typeof i[l]&&(e.push(i[l].data()),s.push(a),r.push(l))}const o=yield Promise.all(e);for(let a=0;a<o.length;++a)t.history[s[a]][r[a]].dispose(),t.history[s[a]][r[a]]=o[a][0]})()}}class kT extends Or{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Nu(this.yieldEvery)&&(this.maybeWait=function US(n,t){let s,e=mn();return(...o)=>{const a=mn();return a-e<t||(e=a,s=n(...o)),s}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}maybeWait(t,e,s){var r=this;return(0,M.Z)(function*(){const o=[];null!=r.yield&&(yield Ss(s),o.push(r.yield(t,e,s))),o.push(wl()),yield Promise.all(o)})()}onEpochBegin(t,e){var s=this;return(0,M.Z)(function*(){s.currentEpoch=t,null!=s.epochBegin&&(yield Ss(e),yield s.epochBegin(t,e))})()}onEpochEnd(t,e){var s=this;return(0,M.Z)(function*(){const r=[];null!=s.epochEnd&&(yield Ss(e),r.push(s.epochEnd(t,e))),"epoch"===s.yieldEvery&&r.push(wl()),yield Promise.all(r)})()}onBatchBegin(t,e){var s=this;return(0,M.Z)(function*(){null!=s.batchBegin&&(yield Ss(e),yield s.batchBegin(t,e))})()}onBatchEnd(t,e){var s=this;return(0,M.Z)(function*(){const r=[];null!=s.batchEnd&&(yield Ss(e),r.push(s.batchEnd(t,e))),"batch"===s.yieldEvery?r.push(wl()):Nu(s.yieldEvery)&&r.push(s.maybeWait(s.currentEpoch,t,e)),yield Promise.all(r)})()}onTrainBegin(t){var e=this;return(0,M.Z)(function*(){null!=e.trainBegin&&(yield Ss(t),yield e.trainBegin(t))})()}onTrainEnd(t){var e=this;return(0,M.Z)(function*(){null!=e.trainEnd&&(yield Ss(t),yield e.trainEnd(t))})()}}function og(n,t){return null==n&&(n={}),n instanceof Or?[n]:Array.isArray(n)&&n[0]instanceof Or?n:tt(n).map(s=>new kT(s,t))}let IT=(()=>{class n{constructor(){}static registerCallbackConstructor(e,s){C(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),n.checkForDuplicate(s),null==n.constructors[e]&&(n.constructors[e]=[]),n.constructors[e].push(s)}static checkForDuplicate(e){for(const s in n.constructors)n.constructors[+s].forEach(o=>{if(o===e)throw new E("Duplicate callback constructor.")})}static clear(){n.constructors={}}static createCallbacks(e){const s=[];for(const r in n.constructors){const o=+r;e>=o&&s.push(...n.constructors[o])}return s.map(r=>new r)}}return n.constructors={},n})();function ag(n,t,e,s,r,o,a,i,l){const u=new CT,c=[new NT,...IT.createCallbacks(t)];null!=n&&c.push(...n),c.push(u);const d=new vT(c);return d.setParams({epochs:e,initialEpoch:s,samples:r,steps:o,batchSize:a,verbose:t,doValidation:i,metrics:l}),{callbackList:d,history:u}}function hs(n,t={},e=!1){return ma(n,gn.getMap().classNameMap,t,"layer",e)}function Fl(n,t){return F(()=>{"float32"!==n.dtype&&(n=n.asType("float32"));const e=ve(wa(n),t,!0),s=Gc(e.shape,St()),r=Xt(is(e,s));return we(n,r)})}function Pl(n,t){return F(()=>gt(wa(ge(t,n)),-1))}function oh(n,t){return F(()=>gt(Pt(ge(t,n)),-1))}function ah(n,t){return F(()=>{const e=ge(n,t),s=un(Pt(n),St(),Number.MAX_VALUE),r=Pt(we(e,s));return R(100,gt(r,-1))})}function Na(n,t,e=!1){return F(()=>{if(e)t=nd(t);else{const s=ve(t,t.shape.length-1,!0);t=we(t,s)}return t=un(t,St(),1-St()),bt(ve(R(n.toFloat(),xn(t)),t.shape.length-1))})}function Ll(n,t,e=!1){return F(()=>{const s=ll(function sT(n){const t=[ks(n.shape)];return n.reshape(t)}(n)).toInt(),r=(t=un(t,St(),1-St())).shape;return Na(Ff(s,r[r.length-1]).reshape(r),t,e)})}function Ml(n,t){return F(()=>{let e;return e=un(t,St(),1-St()),e=xn(we(e,ge(1,e))),gt(function DT(n,t){if(!Se(n.shape,t.shape))throw new E(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(t.shape)}`);return F(()=>{const e=t.relu(),s=t.abs().neg();return e.sub(t.mul(n)).add(s.exp().log1p())})}(n,e),-1)})}function ig(n,t){return F(()=>{const e=Fl(n,-1),s=Fl(t,-1),r=R(e,s);return bt(ve(r,-1))})}const zl={meanSquaredError:Pl,meanAbsoluteError:oh,meanAbsolutePercentageError:ah,meanSquaredLogarithmicError:function ST(n,t){return F(()=>{const e=un(t,St(),Number.MAX_VALUE),s=xn(te(1,e)),r=un(n,St(),Number.MAX_VALUE),o=xn(te(1,r));return gt(wa(ge(s,o)),-1)})},squaredHinge:function TT(n,t){return F(()=>{const e=is(0,ge(1,R(n,t)));return gt(wa(e),-1)})},hinge:function _T(n,t){return F(()=>{const e=is(0,ge(1,R(n,t)));return gt(e,-1)})},categoricalHinge:function $T(n,t){return F(()=>{const e=ve(R(n,t),-1),s=On(R(ge(1,n),t),-1);return is(0,te(1,ge(s,e)))})},logcosh:function ET(n,t){return F(()=>{const e=Math.log(2),s=ge(t,n),r=ge(te(s,hl(R(-2,s))),e);return gt(r,-1)})},categoricalCrossentropy:Na,sparseCategoricalCrossentropy:Ll,binaryCrossentropy:Ml,kullbackLeiblerDivergence:function AT(n,t){return F(()=>{const e=un(n,St(),1),s=un(t,St(),1);return ve(R(n,xn(we(e,s))),-1)})},poisson:function RT(n,t){return F(()=>{const e=xn(te(St(),t));return gt(ge(t,R(n,e)),-1)})},cosineProximity:ig};function ih(n){if("string"==typeof n){if(n in zl)return zl[n];let t=`Unknown loss ${n}`;throw n.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new E(t)}return n}function lg(n,t){return F(()=>{const e=R(.5,bn(t)),s=xa(qn(t,e),n.dtype);return gt(Hs(n,s),-1)})}function ug(n,t){return F(()=>xa(Hs(Mc(n,-1),Mc(t,-1)),"float32"))}function LT(n,t){return Ml(n,t)}function MT(n,t){return n.rank===t.rank&&(n=n.squeeze([n.rank-1])),(t=t.argMax(-1)).dtype!==n.dtype&&(t=t.asType(n.dtype)),Hs(n,t).asType("float32")}const dg=Na,hg=Ll,Vl={binaryAccuracy:lg,categoricalAccuracy:ug,precision:function PT(n,t){return F(()=>{const e=function cg(n,t){return F(()=>as(n.equal(1),t.equal(1)).sum().cast("float32"))}(n,t),s=function FT(n,t){return F(()=>as(n.equal(0),t.equal(1)).sum().cast("float32"))}(n,t),r=e.add(s);return Nn(qn(r,0),e.div(r),0).cast("float32")})},categoricalCrossentropy:dg,sparseCategoricalCrossentropy:hg,mse:Pl,MSE:Pl,mae:oh,MAE:oh,mape:ah,MAPE:ah,cosine:ig};function jT(n){if("string"==typeof n&&n in Vl)return Vl[n];if("string"!=typeof n&&null!=n)return n;throw new E(`Unknown metric ${n}`)}function Bl(n){if(cn(null!==n,`Unknown LossOrMetricFn ${n}`),"string"==typeof n)return n;{let t;for(const e of Object.keys(zl))if(zl[e]===n){t=e;break}if(void 0!==t)return t;for(const e of Object.keys(Vl))if(Vl[e]===n){t=e;break}return void 0!==t?t:n.name}}function fg(n,t,e=!1){if(null==n||"object"!=typeof n||Object.getPrototypeOf(n)!==Object.prototype||!lh(n))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){const s=JSON.stringify(n);s.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function lh(n){if(null===n)return!0;if("object"==typeof n){if(Object.getPrototypeOf(n)===Object.prototype){const t=Object.keys(n);for(const e of t)if("string"!=typeof e||!lh(n[e]))return!1;return!0}if(Array.isArray(n)){for(const t of n)if(!lh(t))return!1;return!0}return!1}{const t=typeof n;return"string"===t||"number"===t||"boolean"===t}}function Wl(n,t,e=console.log){let s="";for(let r=0;r<n.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=n[r],s=s.slice(0,t[r]),s+=" ".repeat(t[r]-s.length);e(s)}function YT(n,t,e){let s;try{s=JSON.stringify(n.outputShape)}catch{s="multiple"}Wl([`${n.name} (${n.getClassName()})`,s,n.countParams().toString()],t,e)}function JT(n,t,e,s){let r;try{r=JSON.stringify(n.outputShape)}catch{r="multiple"}const o=[];for(const c of n.inboundNodes)if(!(null!=e&&e.length>0&&-1===e.indexOf(c)))for(let d=0;d<c.inboundLayers.length;++d)o.push(`${c.inboundLayers[d].name}[${c.nodeIndices[d]}][${c.tensorIndices[d]}]`);const a=n.name,i=n.getClassName(),l=0===o.length?"":o[0];Wl([`${a} (${i})`,r,n.countParams().toString(),l],t,s);for(let c=1;c<o.length;++c)Wl(["","","",o[c]],t,s)}function mg(n,t,e){return("inboundNodes"===n||"outputLayers"===n||"inputLayers"===n)&&0===t&&"string"==typeof e}function uh(n,t){if(null===n)return null;if("string"==typeof n)return Qs(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const o=n[r];mg(t,r,o)?e.push(o):e.push(uh(o,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];if("name"===s&&"string"==typeof r)e[s]=r;else{const o=Qs(s);e[o]=uh(r,o)}}return e}}function ch(n,t){if(null==n)return null;if("string"==typeof n)return ds(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const o=n[r];mg(t,r,o)?e.push(o):e.push(ch(o,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];e[ds(s)]="name"!==s&&"className"!==s||"string"!=typeof r?ch(r,s):r}return e}}class Ts{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof Ts)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,s){if(null!=this.id2Value[t.id])throw new E(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function QT(n,t){if(null==n.dtype||n.dtype===t.dtype)return t;try{return me(t,n.dtype)}catch{throw new E(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=s&&(this.id2Mask[t.id]=s),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof Jn){if(null==this.id2Value[t.id])throw new E(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new E(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof Jn){if(null==this.id2Value[t.id])throw new E(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new E(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&De(this.id2Mask)}}const hh={},gg={};function Ca(n,t,e,s){const r=null!=e&&e.training,o=Array.isArray(n),a=o?n:[n],i=a.map(f=>f.name),l=[],u=t.names();for(const f of i)-1!==u.indexOf(f)?l.push(t.getValue(f)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().join(",");let d,h;if(null==hh[c]){const f=function e_(n,t){C(null!=n&&n.length>0,()=>"Expected at least one fetch, got none");let e=[],s={};if(1===n.length){const r=yg(n[0],t);e=r.sorted,s=r.recipientMap}else{const r=new Set;for(const o of n){const{sorted:a,recipientMap:i}=yg(o,t);for(const l of a)r.has(l.name)||(e.push(l),r.add(l.name));for(const l in i)null==s[l]&&(s[l]=new Set),i[l].forEach(u=>s[l].add(u))}}return{sorted:e,recipientCounts:t_(s)}}(a,t);d=f.sorted,h=f.recipientCounts,hh[c]=d,gg[c]=h}d=hh[c],h={},r||Object.assign(h,gg[c]);const p=new Ts(t);for(let f=0;f<d.length;++f){if(null!=s){const _=Pc().numTensors;_>s.maxNumTensors&&(s.maxNumTensors=_),_<s.minNumTensors&&(s.minNumTensors=_)}const m=d[f],g=m.sourceLayer;if(g instanceof Ol)continue;const y=[],x=[],v=[];let b=!1;for(const _ of m.inputs){const A=p.getValue(_),z=p.getMask(_);y.push(A),x.push(z),null!=z&&(b=!0),r||(h[_.name]--,0===h[_.name]&&!t.hasKey(_)&&-1===i.indexOf(_.name)&&!A.isDisposed&&!0!==_.sourceLayer.stateful&&v.push(A))}b&&((e=e||{}).mask=x[0]);const w=tt(g.apply(y,e));let k=null;g.supportsMasking&&(k=g.computeMask(y,x));const N=n_(m),S=Array.isArray(N)?N:[N];for(let _=0;_<S.length;++_){p.hasKey(S[_])||p.add(S[_],w[_],Array.isArray(k)?k[0]:k);const A=i.indexOf(S[_].name);-1!==A&&(l[A]=w[_])}r||De(v)}return p.disposeMasks(),o?l:l[0]}function t_(n){const t={};for(const e in n)t[e]=n[e].size;return t}function yg(n,t){const e=new Set,s=[],r={};for(const i of t.names())e.add(i);const o=[],a=[];for(o.push(n);o.length>0;){const i=o[o.length-1];if(e.has(i.name)){o.pop();continue}const l=a[a.length-1]===o.length-1;if(0===i.inputs.length||l)o.pop(),s.push(i),e.add(i.name),l&&a.pop();else{a.push(o.length-1);for(const u of i.inputs)null==r[u.name]&&(r[u.name]=new Set),r[u.name].add(i.name),!e.has(u.name)&&o.push(u)}}return{sorted:s,recipientMap:r}}function n_(n){let t;if(1===n.sourceLayer.inboundNodes.length)t=n.sourceLayer.output;else{let e=null;for(let s=0;s<n.sourceLayer.inboundNodes.length;++s)for(const r of n.sourceLayer.inboundNodes[s].outputTensors)if(r.id===n.id){e=s;break}t=n.sourceLayer.getOutputAt(e)}return t}class Ln extends Pe{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const x=this.getClassName().toLowerCase();this.name=El(x)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(t.inputs)?t.inputs.slice():[t.inputs],this.outputs=Array.isArray(t.outputs)?t.outputs.slice():[t.outputs],Cs(this.inputs).length!==this.inputs.length)throw new E(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(x=>x.name)}`);Cs(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(x=>x.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const x of this.outputs){const b=x.nodeIndex,w=x.tensorIndex;this.outputLayers.push(x.sourceLayer),this.outputLayersNodeIndices.push(b),this.outputLayersTensorIndices.push(w)}for(const x of this.inputs){const v=x.sourceLayer,b=x.nodeIndex,w=x.tensorIndex;cn(0===b,"input layer has >1 nodes"),cn(0===w,"input layer has >1 tensors"),this.inputLayers.push(v),this.inputLayersNodeIndices.push(b),this.inputLayersTensorIndices.push(w)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let x=0;x<this.inputLayers.length;x++){const v=this.inputLayers[x];if(!(v instanceof Ol))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${x} (0-based) originates from layer type ${v.getClassName()}.`);this.inputNames.push(v.name),this.feedInputShapes.push(v.batchInputShape),this.feedInputNames.push(v.name)}for(const x of this.outputLayers)this.outputNames.push(x.name);this.internalInputShapes=this.inputs.map(x=>x.shape),this.internalOutputShapes=this.outputs.map(x=>x.shape);const e={},s={},r={},o={},a={},i=[],l=(x,v,b,w,k,N)=>{(null==w||null==k||null==N)&&(w=x.sourceLayer,k=x.nodeIndex,N=x.tensorIndex);const S=w.inboundNodes[k];if(-1!==b.indexOf(S))throw new Cn(`The tensor ${x.name} at layer "${w.name}" is part of a cycle.`);if(-1!==v.indexOf(S))return;this.containerNodes.add(Ln.nodeKey(w,k)),w.id in a||(a[w.id]=Object.keys(a).length),-1===b.indexOf(S)&&b.push(S);const _=S.inboundLayers.length;for(let A=0;A<_;A++)l(S.inputTensors[A],v,b,S.inboundLayers[A],S.nodeIndices[A],S.tensorIndices[A]);for(v.push(S);b.indexOf(S)>=0;)b.splice(b.indexOf(S),1);i.push(S)},u=[],c=[];for(const x of this.outputs)l(x,u,c);const d=i.slice().reverse();for(const x of d){s[x.id]=x,x.id in e||(e[x.id]=0);let v=e[x.id];v=Math.max(v,r[x.outboundLayer.id]??0),r[x.outboundLayer.id]=v,o[x.outboundLayer.id]=x.outboundLayer,e[x.id]=v;for(let w=0;w<x.inboundLayers.length;w++){const S=x.inboundLayers[w].inboundNodes[x.nodeIndices[w]];e[S.id]=Math.max(v+1,e[S.id]??0),s[S.id]=S}}const h={};for(const x in e){const v=e[x];v in h||(h[v]=[]),h[v].push(s[x])}const p={};for(const x in r){const v=r[x];v in p||(p[v]=[]),p[v].push(o[x])}let f=Object.keys(p).map(x=>parseInt(x,10)).sort(Il);this.layers=[];for(const x of f){const v=p[x];v.sort((b,w)=>{const k=a[b.id],N=a[w.id];return k<N?-1:k>N?1:0});for(const b of v)b instanceof Ln&&this.internalContainerRefs.push(b),this.layers.push(b)}this.layersByDepth=p,f=Object.keys(h).map(x=>parseInt(x,10)).sort(Il);const m=this.inputs.slice(),g=[];for(const x of f)for(const v of h[x]){const b=v.outboundLayer;if(null!=b){for(const w of v.inputTensors)if(-1===m.indexOf(w))throw new Cn(`Graph disconnected: cannot obtain value for tensor ${w} at layer "${b.name}". The following previous layers were accessed without issue: ${g}`);for(const w of v.outputTensors)m.push(w);g.push(b.name)}}this.nodesByDepth=h;const y=this.layers.map(x=>x.name);for(const x of y){const v=y.filter(b=>b===x).length;if(1!==v)throw new Cn(`The name "${x}" is used ${v} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(y))}this.outboundNodes=[],this.inboundNodes=[],new Rl({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(x=>null),outputMasks:this.outputs.map(x=>null),inputShapes:this.inputs.map(x=>x.shape),outputShapes:this.outputs.map(x=>x.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(s=>s.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new E("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const s of this.layers)e.push(...s.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const s={};let r=0;for(const a of this.layers)for(const i of a.weights){if(null!=s[i.originalName])throw new E(`Duplicate weight name: ${i.originalName}`);s[i.originalName]=i,r++}const o=[];for(const a in t){let i=a;if(null==s[a]){const l=a.split("/");i=l.slice(0,-2).concat([l[l.length-1]]).join("/")}if(null!=s[i])o.push([s[i],t[a]]);else if(e)throw new E(`Provided weight data has no target variable: ${a}`);delete s[i]}if(e){const a=[];for(const i in s)a.push(i);if(a.length>0)throw new E(`${a.length} of ${r} weights are not set: ${a}`)}sh(o)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 2.8.6",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const s=ch(this.updatedConfig());return e?JSON.stringify(s):s}call(t,e){return F(()=>{t=tt(t);const s=new Ts;for(let r=0;r<this.inputs.length;++r)s.add(this.inputs[r],t[r]);return Ca(this.outputs,s,e)})}computeMask(t,e){return F(()=>{let s;return t=tt(t),s=null==e?Js(null,t.length):tt(e),this.runInternalGraph(t,s)[1]})}computeOutputShape(t){const e=Dl(t);if(e.length!==this.inputLayers.length)throw new E(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const s={};for(let i=0;i<e.length;i++)s[this.inputLayers[i].name+"_0_0"]=e[i];const r=Object.keys(this.nodesByDepth).map(i=>parseInt(i,10)).sort(Il);if(r.length>1)for(const i of r){const l=this.nodesByDepth[i];for(const u of l){const c=u.outboundLayer;if(-1!==this.inputLayers.map(m=>m.id).indexOf(c.id))continue;const d=[];for(let m=0;m<u.inboundLayers.length;m++)d.push(s[`${u.inboundLayers[m].name}_${u.nodeIndices[m]}_${u.tensorIndices[m]}`]);const p=Dl(c.computeOutputShape(en(d))),f=c.inboundNodes.indexOf(u);for(let m=0;m<p.length;m++)s[`${c.name}_${f}_${m}`]=p[m]}}const o=[],a=[];for(let i=0;i<this.outputLayers.length;i++)a.push(`${this.outputLayers[i].name}_${this.outputLayersNodeIndices[i]}_${this.outputLayersTensorIndices[i]}`);for(let i=0;i<a.length;i++){const l=a[i];cn(l in s),o.push(s[l])}return en(o)}runInternalGraph(t,e){null==e&&(e=Js(null,t.length));const s={};for(let l=0;l<this.inputs.length;++l)s[this.inputs[l].id]=[t[l],e[l]];const r=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(Il);for(const l of r){const u=this.nodesByDepth[l];for(const c of u){const d=c.outboundLayer,h=c.inputTensors,p=c.outputTensors,f=new Array;for(const m of h)m.id in s&&f.push(s[m.id]);if(f.length===h.length){let g,y,x,v,m={};if(null!=c.callArgs&&(m=c.callArgs),1===f.length){const[b,w]=f[0];null==m.mask&&(m.mask=w),x=tt(d.call(b,m)),v=tt(d.computeMask(b,w)),g=[b],y=[w]}else g=f.map(b=>b[0]),y=f.map(b=>b[1]),null==m.mask&&(m.mask=y),x=tt(d.call(g,m)),v=tt(d.computeMask(g,y));if(d.activityRegularizer)throw new $e("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let b=0;b<p.length;++b)s[p[b].id]=[x[b],v[b]]}}}const o=[],a=[],i=[];for(const l of this.outputs){cn(l.id in s,`Could not compute output ${l.name} : ${l.id}`);const[u,c]=s[l.id];i.push(u.shape),o.push(u),a.push(c)}return[o,a,i]}buildNodeConversionMap(t){const e={};let s;for(const r of this.layers){s=r instanceof Ln?1:0;for(let o=0;o<r.inboundNodes.length;o++){const a=Ln.nodeKey(r,o);this.containerNodes.has(a)&&(e[a]=s,s+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new E(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new E("Provide either a layer name or layer index");for(const s of this.layers)if(s.name===t)return s;throw new E(`No such layer: ${t}`)}calculateLosses(){return F(()=>{const t=[];for(const e of this.layers)for(let s=0;s<e.inboundNodes.length;++s){const r=Ln.nodeKey(e,s);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),s=[];for(const a of this.layers){const i=a.getClassName(),l=a.getConfig(),u=[];for(let d=0;d<a.inboundNodes.length;d++){const h=a.inboundNodes[d],p=Ln.nodeKey(a,d);let f={};if(this.containerNodes.has(p)){if(h.callArgs)try{JSON.stringify(h.callArgs),f=h.callArgs}catch{console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: ${h.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),f={}}if(h.inboundLayers.length>0){const m=[];for(let g=0;g<h.inboundLayers.length;g++){const y=h.inboundLayers[g],v=h.tensorIndices[g];let w=e[Ln.nodeKey(y,h.nodeIndices[g])];null==w&&(w=0),m.push([y.name,w,v,f])}u.push(m)}}}const c={};c.name=a.name,c.className=i,c.config=l,c.inboundNodes=u,s.push(c)}t.layers=s;const r=[];for(let a=0;a<this.inputLayers.length;a++){const i=this.inputLayers[a],u=Ln.nodeKey(i,this.inputLayersNodeIndices[a]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),r.push([i.name,c,this.inputLayersTensorIndices[a]])}t.inputLayers=r;const o=[];for(let a=0;a<this.outputLayers.length;a++){const i=this.outputLayers[a],u=Ln.nodeKey(i,this.outputLayersNodeIndices[a]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),o.push([i.name,c,this.outputLayersTensorIndices[a]])}return t.outputLayers=o,t}static fromConfig(t,e,s={},r=!1){const o={},a={};function i(g,y){g.name in a?a[g.name].push(y):a[g.name]=[y]}function l(g,y){const x=[];let v;for(const b of y){const w=b[0],k=b[1],N=b[2];if(v=b[3]??{},!(w in o))return void i(g,y);const S=o[w];if(S.inboundNodes.length<=k)return void i(g,y);x.push(S.inboundNodes[k].outputTensors[N])}x.length>0&&g.apply(en(x),v)}function u(g){const y=g.name,x=hs(g,null!=e.customObjects?e.customObjects:{});x.setFastWeightInitDuringBuild(r),o[y]=x,g.inboundNodes.forEach(b=>{if(!(b instanceof Array))throw new E(`Corrupted configuration, expected array for nodeData: ${b}`);i(x,b)})}const c=e.name,d=e.layers;for(const g of d)u(g);for(;!GS(a);)for(const g of d){const y=o[g.name];if(y.name in a){const x=a[y.name];delete a[y.name];for(const v of x)l(y,v)}}const h=[],p=[],f=e.inputLayers;for(const g of f){const y=g[0],x=g[1],v=g[2];cn(y in o),h.push(o[y].inboundNodes[x].outputTensors[v])}const m=e.outputLayers;for(const g of m){const y=g[0],x=g[1],v=g[2];cn(y in o),p.push(o[y].inboundNodes[x].outputTensors[v])}return new t({inputs:h,outputs:p,name:c})}get stateful(){if(this._stateful)throw new E("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){F(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function bg(n,t){return function xg(n,t,e){const s=t.length;if(null==n||Array.isArray(n)&&0===n.length)return t.map(r=>null);if(1===s)return Array.isArray(n)&&1===n.length?n:"object"==typeof n&&t[0]in n?[n[t[0]]]:[n];if(Array.isArray(n)){if(n.length!==s)throw new Error(`Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return n}if("object"==typeof n&&Object.keys(n).length>0&&"object"==typeof n[Object.keys(n)[0]]){const r=[];return t.forEach(o=>{r.push(o in n?n[o]:null)}),r}throw new Error(`The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(n)}`)}(n,t,"classWeight")}function wg(n,t,e,s){return ph.apply(this,arguments)}function ph(){return(ph=(0,M.Z)(function*(n,t,e,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=e){const r=F(()=>{if(1===n.shape.length)return n.clone();if(2===n.shape.length){if(n.shape[1]>1)return n.argMax(1);if(1===n.shape[1])return n.reshape([n.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),o=Array.from(yield r.data());De(r);const a=[];return o.forEach(i=>{if(null==e[i])throw new Error(`classWeight must contain all classes in the training data. The class ${i} exists in the data but not in classWeight`);a.push(e[i])}),vn(a,"float32")}return null})).apply(this,arguments)}function s_(n,t){return R(n,t)}function vg(n,t){let e,s;e=t.xs,s=t.ys,C(null!=e&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);const o=Ng("input",n.inputNames,e),a=Ng("output",n.outputNames,s),i=o[0].shape[0];C(o.length===n.inputs.length,()=>`LayersModel has ${n.inputs.length} inputs, but the dataset provides ${o.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`),C(a.length===n.outputs.length,()=>`LayersModel has ${n.outputs.length} outputs, but the dataset provides ${a.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);for(let l=0;l<o.length;l++)C(o[l].shape[0]===i,()=>`Batch size mismatch: input ${n.inputNames[l]} has ${o[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);for(let l=0;l<a.length;l++)C(a[l].shape[0]===i,()=>`Batch size mismatch: output ${n.outputNames[l]} has ${a[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);return{xs:o,ys:a}}function Ng(n,t,e){if(e instanceof O)return[e];if(Array.isArray(e))return C(e.length===t.length,()=>`Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`),e;{const s=[];for(const r of t){if(null==e[r])throw new E(`The feature data generated by the dataset lacks the required ${n} key '${r}'.`);s.push(e[r])}return s}}function o_(n){if(3===n.length)throw new $e("Validation with sample weights is not implemented yet.");return{xs:n[0],ys:n[1]}}function fh(){return(fh=(0,M.Z)(function*(n,t,e){const s=null!=e.batchesPerEpoch;if(C(null!=n.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),C(null!=e,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),C(null!=e.epochs&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),C(!s||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),C(null==e.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),n.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");n.isTraining=!0;try{const r=null!=e.validationData;let o,a;if(r)if(Cg(e.validationData))C(null==e.validationBatches||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{const g=o_(e.validationData);o=g.xs,a=g.ys}const i=n.makeTrainFunction(),l=n.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map(g=>"val_"+g)):l.slice();const c=og(e.callbacks,e.yieldEvery),d=e.verbose??1,{callbackList:h,history:p}=ag(c,d,e.epochs,null,null,i_(t,e),null,r,u);h.setModel(n),n.history=p,yield h.onTrainBegin(),n.stopTraining_=!1;let f=e.initialEpoch??0,m=yield t.iterator();for(;f<e.epochs;){const g={};yield h.onEpochBegin(f);let y=0,x=0;for(s||(m=yield t.iterator());!s||y<e.batchesPerEpoch;){const v=yield m.next();if(s&&v.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=v.value){const{xs:b,ys:w}=vg(n,v.value),k={};k.batch=x,k.size=b[0].shape[0],yield h.onBatchBegin(x,k);const N=[];if(null!=e.classWeight){const A=bg(e.classWeight,n.outputNames);for(let z=0;z<A.length;++z)N.push(yield wg(w[z],null,A[z]))}const S=b.concat(w).concat(N),_=i(S);De(S);for(let A=0;A<l.length;++A){const U=_[A];k[l[A]]=U,jn(U)}yield h.onBatchEnd(x,k),rg(k),x++,y++}if(s?y>=e.batchesPerEpoch:v.done){if(r){let b;b=Cg(e.validationData)?tt(yield n.evaluateDataset(e.validationData,{batches:e.validationBatches})):tt(n.evaluate(o,a,{batchSize:e.validationBatchSize??32,verbose:0}));for(let w=0;w<n.metricsNames.length;++w)g[`val_${n.metricsNames[w]}`]=b[w]}break}if(n.stopTraining_)break}if(yield h.onEpochEnd(f,g),f++,n.stopTraining_)break}return yield h.onTrainEnd(),yield n.history.syncData(),n.history}finally{n.isTraining=!1}})).apply(this,arguments)}function i_(n,t){let e=null;return null!=t.batchesPerEpoch?e=t.batchesPerEpoch:Number.isFinite(n.size)&&(e=n.size),e}function Cg(n){return"function"==typeof n.iterator}function l_(n){return"function"==typeof n.next}function mh(){return(mh=(0,M.Z)(function*(n,t,e){const s=null!=(e=e||{}).batches,r=n.testFunction;let o=[];if(e.verbose>0)throw new $e("Verbose mode is not implemented yet.");C(!s||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);const a=l_(t)?t:yield t.iterator();let i=0,l=0;for(;!s||l<e.batches;){const u=yield a.next();if(o=F(()=>{if(u.value){const{xs:c,ys:d}=vg(n,u.value),h=c.concat(d),p=F(()=>r(h));if(De(h),0===l)for(let m=0;m<p.length;++m)o.push(Ne(0));const f=h[0].shape[0];for(let m=0;m<p.length;++m){const g=p[m],y=o[m];o[m]=F(()=>te(o[m],R(f,g))),l>0&&De(y)}De(p),i+=f,++l}return o}),u.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<o.length;++u){const c=o[u];o[u]=we(o[u],i),De(c)}return en(o)})).apply(this,arguments)}function gh(n){C(n>0&&Number.isInteger(n),()=>`batchSize is required to be a positive integer, but got ${n}`)}function ka(n,t,e){return null==n?[null]:Array.isArray(n)?n.map(s=>nr(s,t,e-t)):nr(n,t,e-t)}function yh(n,t){return F(()=>null==n?null:Array.isArray(n)?n.map(e=>yh(e,t)):Um(n,"int32"===t.dtype?t:t.toInt()))}function xh(n,t){const e=[];let s=0,r=null;for(;s<n;)r=s+t,r>=n&&(r=n),e.push([s,r]),s=r;return e}function c_(n,t,e,s,r,o,a,i,l,u,c,d,h,p,f){return bh.apply(this,arguments)}function bh(){return(bh=(0,M.Z)(function*(n,t,e,s,r,o,a,i,l,u,c,d,h,p,f){null==r&&(r=32),null==o&&(o=1),null==c&&(c=!0),null==h&&(h=0);let m=!1;if(null!=l&&null!=u&&(m=!0),null!=f&&(m=!0,null==p))throw new E("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=n.checkNumSamples(e,r,p,"steps_per_epoch");let y;null!=g&&(y=Pn(0,g)),null==a&&(a=1);const{callbackList:x,history:v}=ag(i,a,o,h,g,p,r,m,d);x.setModel(n),n.history=v,yield x.onTrainBegin(),n.stopTraining_=!1;for(let b=h;b<o;++b){yield x.onEpochBegin(b);const w={};if(null!=p)throw new $e("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new $e("batch shuffling is not implemneted yet");c&&J(y);const k=vn(y),N=xh(g,r);for(let S=0;S<N.length;++S){const _={};if(yield x.onBatchBegin(S,_),F(()=>{const A=N[S][0],z=N[S][1],U=nr(k,A,z-A);_.batch=S,_.size=z-A;const G=yh(e,U),H=t(G);for(let W=0;W<s.length;++W){const K=H[W];_[s[W]]=K,jn(K)}if(S===N.length-1&&m){const W=n.testLoop(l,u,r);for(let B=0;B<s.length;++B){const K=s[B],j=W[B];jn(j),w["val_"+K]=j}}}),yield x.onBatchEnd(S,_),rg(_),n.stopTraining_)break}k.dispose()}if(yield x.onEpochEnd(b,w),n.stopTraining_)break}return yield x.onTrainEnd(),yield n.history.syncData(),n.history})).apply(this,arguments)}function wh(){return(wh=(0,M.Z)(function*(n,t,e,s={}){if(n.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,o,a,i,l,u,c;n.isTraining=!0;try{const d=s.batchSize??32;gh(d);const h=!1,p=yield n.standardizeUserData(t,e,s.sampleWeight,s.classWeight,h,d);r=p[0],o=p[1],c=p[2];let m,f=!1;if(null!=s.validationData&&s.validationData.length>0){if(f=!0,2!==s.validationData.length)throw 3===s.validationData.length?new $e("validationData including sample weights is not supported yet."):new E(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);a=s.validationData[0],i=s.validationData[1];const N=!0,S=yield n.standardizeUserData(a,i,null,null,N,d);l=S[0],u=S[1],m=l.concat(u)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){f=!0;const N=Math.floor(r[0].shape[0]*(1-s.validationSplit)),S=r[0].shape[0];l=ka(r,N,S),r=ka(r,0,N),u=ka(o,N,S),o=ka(o,0,N),m=l.concat(u)}else null!=s.validationSteps&&(f=!0);const g=r.concat(o).concat(c);n.checkTrainableWeightsConsistency();const y=n.makeTrainFunction(),x=n.getDedupedMetricsNames();let v,b;f?(n.makeTestFunction(),v=n.testFunction,b=x.slice().concat(x.map(N=>"val_"+N))):(v=null,m=[],b=x.slice());const w=og(s.callbacks,s.yieldEvery);return yield c_(n,y,g,x,d,s.epochs,s.verbose,w,v,m,s.shuffle,b,s.initialEpoch,null,null)}finally{n.isTraining=!1,sr(r,t),sr(o,e),sr(l,a),sr(u,i),null!=c&&De(c)}})).apply(this,arguments)}function kg(n){const t=[];n instanceof O&&(n=[n]);for(let e=0;e<n.length;++e){const s=n[e];if(1===s.rank)t.push(ba(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function sr(n,t){if(null==n)return;const e=[];if(t instanceof O)e.push(t.id);else if(Array.isArray(t))t.forEach(r=>e.push(r.id));else if(null!=t)for(const r in t)e.push(t[r].id);const s=[];if(n instanceof O)-1===e.indexOf(n.id)&&s.push(n);else if(Array.isArray(n))n.forEach(r=>{-1===e.indexOf(r.id)&&s.push(r)});else if(null!=n)for(const r in n){const o=n[r];-1===e.indexOf(o.id)&&s.push(o)}s.forEach(r=>{r.isDisposed||r.dispose()})}function vh(n){return Array.isArray(n)}function Ig(n){return!function h_(n){return n instanceof O}(n)&&!vh(n)}function Sg(n,t,e,s=!0,r=""){if(null==t||0===t.length){if(null!=n){let a=!1;if(vh(n)&&n.length>0)a=!0;else if(Ig(n)){for(const i in n)if(n.hasOwnProperty(i)){a=!0;break}}else a=!0;if(a)throw new E(`Error when checking model ${r} expected no data, but got ${n}`)}return[]}if(null==n)return t.map(a=>null);let o;if(Ig(n)){o=[];for(const a of t){if(null==n[a])throw new E(`No data provided for "${a}". Need data for each key in: ${t}`);o.push(n[a])}}else if(vh(n)){if(n.length!==t.length)throw new E(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);o=n}else{if(t.length>1)throw new E(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);o=[n]}if(o=kg(o),null!=e)for(let a=0;a<t.length;++a){if(null==e[a])continue;const i=o[a];if(i.shape.length!==e[a].length)throw new E(`Error when checking ${r}: expected ${t[a]} to have ${e[a].length} dimension(s). but got array with shape ${i.shape}`);for(let l=0;l<e[a].length;++l){if(0===l&&!s)continue;const u=i.shape[l],c=e[a][l];if(null!=c&&c>=0&&u!==c)throw new E(`Error when checking ${r}: expected ${t[a]} to have shape [${e[a]}], but got array with shape [${i.shape}].`)}}return o}function Tg(n,t,e,s=!0,r=""){let o;if(Array.isArray(n)){if(n.length!==t.length)throw new E(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`);o=n}else{if(t.length>1)throw new E(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);o=[n]}if(null!=e)for(let a=0;a<t.length;++a){if(null==e[a])continue;const i=o[a];if(i.shape.length!==e[a].length)throw new E(`Error when checking ${r}: expected ${t[a]} to have ${e[a].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let l=0;l<e[a].length;++l){if(0===l&&!s)continue;const u=i.shape[l],c=e[a][l];if(null!=c&&c!==u)throw new E(`Error when checking ${r}: expected ${t[a]} to have shape ${JSON.stringify(e[a])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}let Fr=(()=>{class n extends Ln{constructor(e){super(e),this.isTraining=!1}summary(e,s,r=console.log){if(!this.built)throw new E("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function KT(n,t,e,s=console.log){const r=function ZT(n){let t=!0;const e=[],s=[];for(const r in n.nodesByDepth)e.push(n.nodesByDepth[r]);for(const r of e){if(r.length>1||1===r.length&&r[0].inboundLayers.length>1){t=!1;break}s.push(...r)}if(t)for(const r of n.layers){let o=!1;for(const a of r.inboundNodes)if(-1!==s.indexOf(a)){if(o){t=!1;break}o=!0}if(!t)break}return t}(n),o=["Layer (type)","Output shape","Param #"];let a;if(r?(t=t||65,e=e||[.45,.85,1]):(t=t||98,e=e||[.33,.55,.67,1]),e[e.length-1]<=1&&(e=e.map(c=>Math.floor(t*c))),!r){o.push("Receives inputs"),a=[];for(const c in n.nodesByDepth)a.push(...n.nodesByDepth[c])}s("_".repeat(t)),Wl(o,e,s),s("=".repeat(t));const i=n.layers;for(let c=0;c<i.length;++c)r?YT(i[c],e,s):JT(i[c],e,a,s),s((c===i.length-1?"=":"_").repeat(t));n.checkTrainableWeightsConsistency();const l=function XT(n){let t;return t=Al(null!=n.collectedTrainableWeights?n.collectedTrainableWeights:n.trainableWeights),t}(n),u=Al(n.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,s,r)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function qT(n){const t={Adagrad:()=>Ys.adagrad(.01),Adadelta:()=>Ys.adadelta(1,.95,St()),Adam:()=>Ys.adam(.001,.9,.999,St()),Adamax:()=>Ys.adamax(.002,.9,.999,St(),0),RMSProp:()=>Ys.rmsprop(.001,.9,0,St()),SGD:()=>Ys.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,n in t)return t[n]();throw new E(`Unknown Optimizer ${n}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof xs))throw new E("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let s=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new E(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);s=e.loss.map(l=>ih(l))}else{const i=ih(e.loss);this.outputs.forEach(l=>{s.push(i)})}else{e.loss=e.loss;for(const i in e.loss)if(-1===this.outputNames.indexOf(i))throw new E(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(const i of this.outputNames)null==e.loss[i]&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),s.push(ih(e.loss[i]))}this.lossFunctions=s,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){const l=this.internalOutputShapes[i];this.feedOutputNames.push(this.outputNames[i]),this.feedOutputShapes.push(l),this.feedLossFns.push(this.lossFunctions[i])}const r=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],tr("loss",()=>{for(let i=0;i<this.outputs.length;++i){if(-1!==r.indexOf(i))continue;const l=this.lossFunctions[i];this.outputs.length>1&&(this.metricsTensors.push([l,i]),this.metricsNames.push(this.outputNames[i]+"_loss"))}});const o=function m_(n,t){if(null==n||Array.isArray(n)&&0===n.length)return t.map(s=>[]);let e;if("string"==typeof n||"function"==typeof n)e=[n];else{if(!Array.isArray(n)&&"object"!=typeof n)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);e=n}if(Array.isArray(e))return t.map(s=>e);{const s=[];for(const r of t){let o=e.hasOwnProperty(r)?e[r]:[];Array.isArray(o)||(o=[o]),s.push(o)}return s}}(e.metrics,this.outputNames),a=(i,l,u)=>{this.outputNames.length>1&&(l=this.outputNames[i]+"_"+l),this.metricsNames.push(l),this.metricsTensors.push([u,i])};tr("metric",()=>{for(let i=0;i<this.outputs.length;++i)-1===r.indexOf(i)&&(c=>{let h,p,f;for(const m of c){if("string"==typeof m&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(m)){const y=this.internalOutputShapes[i];let x;1===y[y.length-1]||this.lossFunctions[i]===Ml?-1!==["accuracy","acc"].indexOf(m)?p=lg:-1!==["crossentropy","ce"].indexOf(m)&&(p=LT):this.lossFunctions[i]===Ll?-1!==["accuracy","acc"].indexOf(m)?p=MT:-1!==["crossentropy","ce"].indexOf(m)&&(p=hg):-1!==["accuracy","acc"].indexOf(m)?p=ug:-1!==["crossentropy","ce"].indexOf(m)&&(p=dg),-1!==["accuracy","acc"].indexOf(m)?x="acc":-1!==["crossentropy","ce"].indexOf(m)&&(x="ce"),f=p,h=""+x}else f=jT(m),h=""+Bl(m);let g;tr(h,()=>{g=f}),a(i,h,g)}})(o[i])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,s,r={}){const o=r.batchSize??32;gh(o);const i=this.standardizeUserDataXY(e,s,!0,o);try{const l=i[0].concat(i[1]);return this.makeTestFunction(),en(this.testLoop(this.testFunction,l,o,r.verbose,r.steps))}finally{sr(i[0],e),sr(i[1],s)}}evaluateDataset(e,s){var r=this;return(0,M.Z)(function*(){return r.makeTestFunction(),function u_(n,t,e){return mh.apply(this,arguments)}(r,e,s)})()}checkNumSamples(e,s,r,o="steps"){let a;if(null!=r){if(a=null,null!=s)throw new E(`If ${o} is set, batchSize must be null or undefined.Got batchSize = ${s}`)}else{if(null==e)throw new E(`Either the input data should have a defined shape, or ${o} shoud be specified.`);a=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return a}execute(e,s){if(Array.isArray(s)&&0===s.length)throw new E("`outputs` is an empty Array, which is not allowed.");const r=Array.isArray(s),a=this.retrieveSymbolicTensors(r?s:[s]),i=new Ts;if(e instanceof O&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new E(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let u=0;u<this.inputs.length;++u)i.add(this.inputs[u],e[u])}else for(const u of this.inputs){const c=e[u.name];if(null==c)throw new E(`No value is provided for the model's input ${u.name}`);i.add(u,c)}const l=Ca(a,i);return r?l:l[0]}retrieveSymbolicTensors(e){const s=Js(null,e.length);let r=e.length;for(const o of this.layers){const a=Array.isArray(o.output)?o.output:[o.output],i=a.map(l=>l.name);for(let l=0;l<e.length;++l){const u=i.indexOf(e[l]);if(-1!==u&&(s[l]=a[u],r--),0===r)break}if(0===r)break}if(r>0){const o=[];throw s.forEach((a,i)=>{null==a&&o.push(e[i])}),new E(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(o)}`)}return s}predictLoop(e,s=32,r=!1){return F(()=>{const o=this.checkNumSamples(e);if(r)throw new $e("Verbose predictLoop() is not implemented yet.");const a=xh(o,s),i=this.outputs.map(l=>[]);for(let l=0;l<a.length;++l)F(()=>{const h=ka(e,a[l][0],a[l][1]),p=[];if(Array.isArray(h))for(let m=0;m<h.length;++m)p.push({key:this.inputs[m],value:h[m]});else p.push({key:this.inputs[0],value:h});const f=new Ts(p);return Ca(this.outputs,f)}).forEach((c,d)=>i[d].push(c));return en(i.map(l=>Lt(l,0)))})}predict(e,s={}){const r=kg(e);Tg(r,this.inputNames,this.feedInputShapes,!1);try{const o=s.batchSize??32;return gh(o),this.predictLoop(r,o)}finally{sr(r,e)}}predictOnBatch(e){Tg(e,this.inputNames,this.feedInputShapes,!0);const s=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,s)}standardizeUserDataXY(e,s,r=!0,o){if(null==this.optimizer_)throw new Cn("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let i=0;i<this.feedOutputShapes.length;++i){const l=this.feedOutputShapes[i];a.push(this.feedLossFns[i]===Ll?l.slice(0,l.length-1).concat([1]):l)}if(function p_(n,t,e){const s=Cs(n.map(o=>o.shape[0]));s.sort();const r=Cs(t.map(o=>o.shape[0]));if(r.sort(),s.length>1)throw new E(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map(o=>o.shape))}`);if(r.length>1)throw new E(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(o=>o.shape))}`);if(s.length>0&&r.length>0&&!Se(s,r))throw new E(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=Sg(e,this.feedInputNames,this.feedInputShapes,!1,"input"),s=Sg(s,this.feedOutputNames,a,!1,"target")),function f_(n,t,e){const s=[Pl,Ml,Na];for(let r=0;r<n.length;++r){const o=n[r],a=t[r],i=e[r];if(null!=a){if(a===Na&&1===o.shape[o.shape.length-1])throw new E(`You are passing a target array of shape ${o.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(a)){const l=o.shape.slice(1),u=i.slice(1);for(let c=0;c<l.length;++c){const d=l[c],h=u[c];if(null!=h&&d!==h)throw new E(`A target Tensor with shape ${o.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(s,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=o&&o>0&&e[0].shape[0]%o!=0)throw new E(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${o}. Found: ${e[0].shape[0]} sample(s).`);return[e,s]}standardizeUserData(e,s,r,o,a=!0,i){var l=this;return(0,M.Z)(function*(){const[u,c]=l.standardizeUserDataXY(e,s,a,i);if(null!=r)throw new Error("sample weight is not supported yet.");let d=null;if(null!=o){const h=bg(o,l.outputNames);d=[];for(let p=0;p<h.length;++p)d.push(yield wg(c[p],null,h[p]))}return[u,c,d]})()}testLoop(e,s,r,o=0,a){return F(()=>{const i=this.checkNumSamples(s,r,a,"steps"),l=[];if(o>0)throw new $e("Verbose mode is not implemented yet.");if(null!=a)throw new $e("steps mode in testLoop() is not implemented yet");{const u=xh(i,r),c=vn(Pn(0,i));for(let d=0;d<u.length;++d){const h=u[d][0],p=u[d][1],f=nr(c,h,p-h),m=yh(s,f),g=e(m);if(0===d)for(let y=0;y<g.length;++y)l.push(Ne(0));for(let y=0;y<g.length;++y)l[y]=te(l[y],R(p-h,g[y]))}for(let d=0;d<l.length;++d)l[d]=we(l[d],i)}return l})}getDedupedMetricsNames(){const e=this.metricsNames,s=[];for(let r=0;r<e.length;++r){const o=e[r];let a=o;Am(e,o)>1&&(a+=`_${Am(e.slice(0,r),o)}`),s.push(a)}return s}makeTrainFunction(){return e=>{const s=[],r=e.slice(0,this.inputs.length),o=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],u=this.collectedTrainableWeights.map(h=>h.read());return[this.optimizer_.minimize(()=>{const h=[];for(let g=0;g<this.inputs.length;++g)h.push({key:this.inputs[g],value:r[g]});const p=new Ts(h),f=Ca(this.outputs,p,{training:!0});let m;for(let g=0;g<this.lossFunctions.length;++g){let x=this.lossFunctions[g](o[g],f[g]);null!=a[g]&&(x=s_(x,a[g]));const v=gt(x);s.push(v),m=0===g?x:te(m,x)}for(let g=0;g<this.metricsTensors.length;++g){let y;if(this.outputs.length>1&&g<this.outputs.length)y=s[g];else{const v=this.metricsTensors[g][1];y=gt((0,this.metricsTensors[g][0])(o[v],f[v]))}jn(y),i.push(y)}return m=gt(m),this.calculateLosses().forEach(g=>{m=te(m,g)}),m},!0,u)].concat(i)}}makeTestFunction(){this.testFunction=e=>F(()=>{const s=[];let r;const o=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let c=0;c<this.inputs.length;++c)i.push({key:this.inputs[c],value:o[c]});const l=new Ts(i),u=Ca(this.outputs,l);for(let c=0;c<this.lossFunctions.length;++c){const h=gt((0,this.lossFunctions[c])(a[c],u[c]));r=0===c?h:te(r,h),s.push(r)}for(let c=0;c<this.metricsTensors.length;++c){const h=this.metricsTensors[c][1],p=gt((0,this.metricsTensors[c][0])(a[h],u[h]));s.push(p)}return s})}fit(e,s,r={}){var o=this;return(0,M.Z)(function*(){return function d_(n,t,e){return wh.apply(this,arguments)}(o,e,s,r)})()}fitDataset(e,s){var r=this;return(0,M.Z)(function*(){return function a_(n,t,e){return fh.apply(this,arguments)}(r,e,s)})()}trainOnBatch(e,s){var r=this;return(0,M.Z)(function*(){const o=yield r.standardizeUserData(e,s),a=o[0],i=o[1],u=r.makeTrainFunction()(a.concat(i)),c=[];for(const d of u){const h=yield d.data();c.push(h[0])}return De(u),en(c)})()}getNamedWeights(e){const s=[],r=null!=e&&e.trainableOnly,o=r?this.trainableWeights:this.weights,a=this.getWeights(r);for(let i=0;i<o.length;++i)r&&!o[i].trainable||s.push({name:o[i].originalName,tensor:a[i]});return s}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const s=Pc().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=s-Pc().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=ds(this.loss);else if(Array.isArray(this.loss)){for(const s of this.loss)if("string"!=typeof s)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(s=>ds(s))}else{const s=Object.keys(this.loss);e={};const r=this.loss;for(const o of s){if("string"!=typeof r[o])throw new Error("Serialization of non-string loss is not supported.");e[o]=ds(r[o])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[ds(Bl(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>ds(Bl(e)));{const e={};for(const s in this.metrics)e[s]=ds(Bl(this.metrics[s]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const r=hs(uh(e.optimizer_config));let o,a;if("string"==typeof e.loss)o=Qs(e.loss);else if(Array.isArray(e.loss))o=e.loss.map(i=>Qs(i));else if(null!=e.loss){o={};for(const i in e.loss)o[i]=Qs(e.loss[i])}if(Array.isArray(e.metrics))a=e.metrics.map(i=>Qs(i));else if(null!=e.metrics){a={};for(const i in e.metrics)a[i]=Qs(e.metrics[i])}this.compile({loss:o,metrics:a,optimizer:r})}save(e,s){var r=this;return(0,M.Z)(function*(){if("string"==typeof e){const d=(n=>dt.getSaveHandlers(n))(e);if(0===d.length)throw new E(`Cannot find any save handlers for URL '${e}'`);if(d.length>1)throw new E(`Found more than one (${d.length}) save handlers for URL '${e}'`);e=d[0]}if(null==e.save)throw new E("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const o=yield Qp(r.getNamedWeights(s)),u={modelTopology:r.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.8.6",convertedBy:null};if(null!=s&&s.includeOptimizer&&null!=r.optimizer){u.trainingConfig=r.getTrainingConfig();const d="optimizer",{data:h,specs:p}=yield Qp(yield r.optimizer.getWeights(),d);o.specs.push(...p),o.data=xc([o.data,h])}return null!=r.userDefinedMetadata&&(fg(r.userDefinedMetadata,r.name,!0),u.userDefinedMetadata=r.userDefinedMetadata),u.weightData=o.data,u.weightSpecs=o.specs,e.save(u)})()}setUserDefinedMetadata(e){fg(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}return n.className="Model",n})();Z(Fr),Z((()=>{class n extends Fr{}return n.className="Functional",n})()),Z((()=>{class n extends Fr{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:El("sequential_"),null!=e.layers)for(const s of e.layers)this.add(s)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(r=>r<0))throw new E(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const s=e instanceof n||e instanceof Fr;let r;if(s){if(r=e,1!==r.outputs.length)throw new E("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==r.inputs.length)throw new E("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new E("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const o=function bT(n){if(null==n.batchShape&&null==n.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=n.batchShape&&null!=n.shape)throw new E("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=n.batchShape;null!=n.shape&&null==t&&(t=[null].concat(n.shape));let e=n.dtype;return null==e&&(e="float32"),new Ol({batchInputShape:t,name:n.name,dtype:e,sparse:n.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(o)}if(s)this.outputs=r.outputs,this.inputs=r.inputs;else{if(1!==e.inboundNodes.length)throw new E(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new E("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=sg(this.outputs[0])}this.inboundNodes=[],new Rl({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Js(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(o=>o.shape),outputShapes:this.outputs[0].shape})}else{const o=e.apply(this.outputs[0]);if(Array.isArray(o))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[o],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,s){return null==this.model&&this.build(),this.model.call(e,s)}build(e){if(Xe(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Fr({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,s,r=console.log){this.built||this.build(),super.summary(e,s,r)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,s,r={}){if(!this.built)throw new Cn("The model needs to be compiled before being used.");return this.model.evaluate(e,s,r)}evaluateDataset(e,s){var r=this;return(0,M.Z)(function*(){if(!r.built)throw new Cn("The model needs to be compiled before being used.");return r.model.evaluateDataset(e,s)})()}predict(e,s={}){return null==this.model&&this.build(),this.model.predict(e,s)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}fit(e,s,r={}){var o=this;return(0,M.Z)(function*(){if(!o.built)throw new Cn("The model needs to be compiled before being used.");return o.model.fit(e,s,r)})()}fitDataset(e,s){var r=this;return(0,M.Z)(function*(){if(!r.built)throw new Cn("The model needs to be compiled before being used.");return r.model.fitDataset(e,s)})()}trainOnBatch(e,s){var r=this;return(0,M.Z)(function*(){return r.model.trainOnBatch(e,s)})()}static fromConfig(e,s,r={},o=!1){let a,i={};if(s instanceof Array){if(null==s[0].className||"Merge"===s[0].className)throw new E("Legacy serialization format not supported yet.");a=s}else C(null!=s.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=s.layers,delete s.layers,i=s;const l=new e(i);if(!(l instanceof n))throw new $e(`Sequential.fromConfig called on non-Sequential input: ${l}`);for(const u of a){const d=hs(u,void 0,o);o&&d.setFastWeightInitDuringBuild(!0),l.add(d)}return l}set stopTraining(e){if(null==this.model)throw new E("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new E("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const s of this.layers){const r={};r.className=s.getClassName(),r.config=s.getConfig(),e.push(r)}return{name:this.name,layers:e}}}return n.className="Sequential",n})());class sn extends Nr{getConfig(){return{}}}Z((()=>{class n extends sn{apply(e,s=1){return function oT(n,t=1){if(1!==t)throw new $e(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return il(n)}(e,s)}}return n.className="elu",n})()),Z((()=>{class n extends sn{apply(e){return Pf(e)}}return n.className="selu",n})()),Z((()=>{class n extends sn{apply(e){return Ns(e)}}return n.className="relu",n})()),Z((()=>{class n extends sn{apply(e){return F(()=>la(6,Ns(e)))}}return n.className="relu6",n})()),Z((()=>{class n extends sn{apply(e){return e}}return n.className="linear",n})()),Z((()=>{class n extends sn{apply(e){return ua(e)}}return n.className="sigmoid",n})()),Z((()=>{class n extends sn{apply(e){return function iT(n){return F(()=>{const t=te(.5,R(.2,n));return un(t,0,1)})}(e)}}return n.className="hardSigmoid",n})()),Z((()=>{class n extends sn{apply(e){return hl(e)}}return n.className="softplus",n})()),Z((()=>{class n extends sn{apply(e){return function aT(n){return F(()=>we(n,Pt(n).add(1)))}(e)}}return n.className="softsign",n})()),Z((()=>{class n extends sn{apply(e){return zf(e)}}return n.className="tanh",n})());let _g=(()=>{class n extends sn{apply(e,s=-1){return nd(e,s)}}return n.className="softmax",n})();function _s(n){return n.getClassName()}function Ih(n,t={}){return ma(n,gn.getMap().classNameMap,t,"activation")}function $s(n){if(null==n){return Ih({className:"linear",config:{}})}if("string"==typeof n){const t={};return t.className=n,t.config={},Ih(t)}return n instanceof sn?n:Ih(n)}Z(_g),Z((()=>{class n extends sn{apply(e,s=-1){return Rf(e,s)}}return n.className="logSoftmax",n})()),Z((()=>{class n extends sn{apply(e,s=1){return F(()=>ua(e.mul(s)).mul(e))}}return n.className="swish",n})());class $g extends Nr{}Z((()=>{class n extends $g{constructor(e){super(),function Sh(n){if(null!=n&&"object"!=typeof n)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return F(()=>{let s=It([1]);return this.hasL1&&(s=te(s,ve(R(this.l1,Pt(e))))),this.hasL2&&(s=te(s,ve(R(this.l2,wa(e))))),s.asScalar()})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,s){return new e({l1:s.l1,l2:s.l2})}}return n.className="L1L2",n})());const Eg={l1l2:"L1L2"};function Ze(n){return qd(n)}function Dg(n,t={}){return ma(n,gn.getMap().classNameMap,t,"regularizer")}function lt(n){return null==n?null:"string"==typeof n?Dg({className:n in Eg?Eg[n]:n,config:{}}):n instanceof $g?n:Dg(n)}function Pr(n,t,e){if("number"==typeof n)return Js(n,t);if(n.length!==t)throw new E(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`);for(let s=0;s<t;++s){const r=n[s];if(!QS(r))throw new E(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(n)} including a non-integer number ${r}`)}return n}function Mn(n,t,e,s,r=1){if(null==n)return n;let a;return a="same"===e?n:n-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function Gl(n,t,e,s){if(null==n)return null;if("valid"===s)n=n*t+Is([e-t,0]);else{if("same"!==s)throw new E(`Unsupport padding mode: ${s}.`);n*=t}return n}function _h(n,t){return F(()=>(wt(t),"channelsFirst"===t?Ke(n,[0,2,3,1]):n))}function Ag(n,t){return F(()=>(wt(t),"channelsFirst"===t?Ke(n,[0,2,3,4,1]):n))}function $h(n,t,e,s=[1,1],r="valid",o,a,i=null){return F(()=>{if(null==o&&(o="channelsLast"),wt(o),3!==n.rank&&4!==n.rank)throw new E(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);if(3!==t.rank&&4!==t.rank)throw new E(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);let l=_h(n,o);if("causal"===r)throw new $e("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=yN({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:a,dataFormat:"NHWC",bias:e,activation:i}),"channelsFirst"===o&&(l=Ke(l,[0,3,1,2])),l})}Z((()=>{class n extends Pe{constructor(e){super(e??{}),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,s){e=Ee(e);let r=Ns(e);return null!=this.maxValue&&(r=un(r,0,this.maxValue)),r}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ReLU",n})()),Z((()=>{class n extends Pe{constructor(e){super(e??{}),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=e.alpha??this.DEFAULT_ALPHA}call(e,s){const r=Ee(e);return Hc(r,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LeakyReLU",n})()),Z((()=>{class n extends Pe{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=it(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=lt(e.alphaRegularizer),this.alphaConstraint=_t(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new E(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const s=(e=Xe(e)).slice(1);if(null!=this.sharedAxes)for(const o of this.sharedAxes)s[o-1]=1;this.alpha=this.addWeight("alpha",s,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const r={};if(null!=this.sharedAxes)for(let o=1;o<e.length;++o)r[o]=e[o];this.inputSpec=[new zt({ndim:e.length,axes:r})],this.built=!0}call(e,s){return e=Ee(e),Zc(e,this.alpha.read())}getConfig(){const e={alphaInitializer:ht(this.alphaInitializer),alphaRegularizer:Ze(this.alphaRegularizer),alphaConstraint:Tt(this.alphaConstraint),sharedAxes:this.sharedAxes},s=super.getConfig();return Object.assign(e,s),e}}return n.className="PReLU",n})()),Z((()=>{class n extends Pe{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new $e(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=e.alpha??this.DEFAULT_ALPHA}call(e,s){const r=Ee(e);return il(r)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ELU",n})()),Z((()=>{class n extends Pe{constructor(e){super(e??{}),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=e.theta??this.DEFAULT_THETA}call(e,s){const r=Ee(e);return r.mul(xa(r.greater(this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ThresholdedReLU",n})()),Z((()=>{class n extends Pe{constructor(e){super(e??{}),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new _g).apply,this.axis=e.axis??this.DEFAULT_AXIS}call(e,s){const r=Ee(e);return this.softmax(r,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Softmax",n})());class Ul extends Pe{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Ul.verifyArgs(e),this.rank=t,Rt(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new $e(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Pr(e.kernelSize,t,"kernelSize"),this.strides=Pr(e.strides??1,t,"strides"),this.padding=e.padding??"valid",dn(this.padding),this.dataFormat=e.dataFormat??"channelsLast",wt(this.dataFormat),this.activation=$s(e.activation),this.useBias=e.useBias??!0,this.biasInitializer=it(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=_t(e.biasConstraint),this.biasRegularizer=lt(e.biasRegularizer),this.activityRegularizer=lt(e.activityRegularizer),this.dilationRate=Pr(e.dilationRate??1,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new E(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new E(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new E(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(t){if(cn("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!Xd(t.kernelSize,"number",1,3))throw new E(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:_s(this.activation),useBias:this.useBias,biasInitializer:ht(this.biasInitializer),biasRegularizer:Ze(this.biasRegularizer),activityRegularizer:Ze(this.activityRegularizer),biasConstraint:Tt(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class Lr extends Ul{constructor(t,e){super(t,e),this.kernel=null,Lr.verifyArgs(e),this.filters=e.filters,Rt(this.filters,"filters"),this.kernelInitializer=it(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=_t(e.kernelConstraint),this.kernelRegularizer=lt(e.kernelRegularizer)}build(t){t=Xe(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new E(`The channel dimension of the input should be defined. Found ${t[e]}`);const s=t[e],r=this.kernelSize.concat([s,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:s}}],this.built=!0}call(t,e){return F(()=>{let s;t=Ee(t);const r=null==this.bias?null:this.bias.read(),o=Om(this.activation.getClassName());if(null!=o&&2===this.rank)s=$h(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate,o);else{if(1===this.rank)s=function Rg(n,t,e,s=1,r="valid",o,a=1){return F(()=>{if(null==o&&(o="channelsLast"),wt(o),3!==n.shape.length)throw new E(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);if(3!==t.shape.length)throw new E(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=e&&1!==e.shape.length)throw new E(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===o&&(n=Ke(n,[0,2,1])),"causal"===r)throw new $e("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=$f(n,t,s,"same"===r?"same":"valid","NWC",a);return null!=e&&(i=Zn(i,e)),i})}(t,this.kernel.read(),r,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)s=$h(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new $e("convolutions greater than 3D are not implemented yet.");s=function Og(n,t,e,s=[1,1,1],r="valid",o,a){return F(()=>{if(null==o&&(o="channelsLast"),wt(o),4!==n.rank&&5!==n.rank)throw new E(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);if(4!==t.rank&&5!==t.rank)throw new E(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);let i=Ag(n,o);if("causal"===r)throw new $e("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=Hw(i,t,s,"same"===r?"same":"valid","NDHWC",a),null!=e&&(i=Zn(i,e)),"channelsFirst"===o&&(i=Ke(i,[0,4,1,2,3])),i})}(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(s=this.activation.apply(s))}return s})}computeOutputShape(t){t=Xe(t);const e=[],s="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let o=0;o<s.length;++o){const a=Mn(s[o],this.kernelSize[o],this.padding,this.strides[o],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[o]);e.push(a)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:ht(this.kernelInitializer),kernelRegularizer:Ze(this.kernelRegularizer),kernelConstraint:Tt(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new E(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}}let Fg=(()=>{class n extends Lr{constructor(e){super(2,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Xd(e.kernelSize,"number",1,2))throw new E(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv2D",n})();Z(Fg),Z((()=>{class n extends Lr{constructor(e){super(3,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new E(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv3D",n})()),Z((()=>{class n extends Fg{constructor(e){if(super(e),this.inputSpec=[new zt({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new E(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=Xe(e)).length)throw new E("Input should have rank 4; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new E("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new zt({ndim:4,axes:{[s]:r}})],this.built=!0}call(e,s){return F(()=>{let r=Ee(e);if(4!==r.shape.length)throw new E(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let i,l;"channelsFirst"===this.dataFormat?(i=2,l=3):(i=1,l=2);const c=o[l],h=this.kernelSize[1],f=this.strides[1],y=[o[0],Gl(o[i],this.strides[0],this.kernelSize[0],this.padding),Gl(c,f,h,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Ke(r,[0,2,3,1]));let x=Ef(r,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(x=Ke(x,[0,3,1,2])),null!=this.bias&&(x=Zn(x,this.bias.read(),this.dataFormat)),null!=this.activation&&(x=this.activation.apply(x)),x})}computeOutputShape(e){const s=(e=Xe(e)).slice();let r,o,a;"channelsFirst"===this.dataFormat?(r=1,o=2,a=3):(r=3,o=1,a=2);const i=this.kernelSize[0],l=this.kernelSize[1],u=this.strides[0],c=this.strides[1];return s[r]=this.filters,s[o]=Gl(s[o],u,i,this.padding),s[a]=Gl(s[a],c,l,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv2DTranspose",n})());let b_=(()=>{class n extends Lr{constructor(e,s){if(super(e,s),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==s.filters)throw new E("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=s.kernelInitializer||null!=s.kernelRegularizer||null!=s.kernelConstraint)throw new E("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=s.padding&&"same"!==s.padding&&"valid"!==s.padding)throw new E(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(s.padding)}`);this.depthMultiplier=s.depthMultiplier??1,this.depthwiseInitializer=it(s.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=lt(s.depthwiseRegularizer),this.depthwiseConstraint=_t(s.depthwiseConstraint),this.pointwiseInitializer=it(s.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=lt(s.pointwiseRegularizer),this.pointwiseConstraint=_t(s.pointwiseConstraint)}build(e){if((e=Xe(e)).length<this.rank+2)throw new E(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s]||e[s]<0)throw new E(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[s])}`);const r=e[s],o=this.kernelSize.concat([r,this.depthMultiplier]),a=[];for(let l=0;l<this.rank;++l)a.push(1);a.push(r*this.depthMultiplier,this.filters);const i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",o,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):null,this.inputSpec=[new zt({ndim:this.rank+2,axes:{[s]:r}})],this.built=!0}call(e,s){return F(()=>{let r;if(e=Ee(e),1===this.rank)throw new $e("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Ke(e,[0,2,3,1])),r=Lf(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(r=Zn(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),"channelsFirst"===this.dataFormat&&(r=Ke(r,[0,3,1,2])),r})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=ht(this.depthwiseInitializer),e.pointwiseInitializer=ht(this.pointwiseInitializer),e.depthwiseRegularizer=Ze(this.depthwiseRegularizer),e.pointwiseRegularizer=Ze(this.pointwiseRegularizer),e.depthwiseConstraint=Tt(this.depthwiseConstraint),e.pointwiseConstraint=Tt(this.pointwiseConstraint),e}}return n.className="SeparableConv",n})();function Pg(n,t,e,s){if(Array.isArray(n)){if(null!=t||null!=e)throw new E("When inputs is an array, neither initialState or constants should be provided");null!=s&&(e=n.slice(n.length-s,n.length),n=n.slice(0,n.length-s)),n.length>1&&(t=n.slice(1,n.length)),n=n[0]}function r(o){return null==o||Array.isArray(o)?o:[o]}return{inputs:n,initialState:t=r(t),constants:e=r(e)}}function Lg(n,t,e,s=!1,r,o,a=!1,i=!1){return F(()=>{const l=t.shape.length;if(l<3)throw new E(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(Pn(2,l));if(t=Ke(t,u),null!=o)throw new $e("The rnn() functoin of the deeplearn.js backend does not support constants yet.");a&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=r.asType("bool").asType("float32")).rank===l-1&&(r=An(r,-1)),r=Ke(r,u)),s&&(t=qs(t,0),null!=r&&(r=qs(r,0)));const c=[];let d,h=e;const p=t.shape[0],f=_r(t);let m,g;null!=r&&(m=_r(r));for(let y=0;y<p;++y){const x=f[y],v=F(()=>n(x,h));if(null==r)d=v[0],h=v[1];else{const b=F(()=>{const w=m[y],k=bn(w).sub(w);return{output:v[0].mul(w).add(h[0].mul(k)),newStates:h.map((_,A)=>v[1][A].mul(w).add(_.mul(k)))}});d=b.output,h=b.newStates}i&&c.push(d)}return i&&(g=Ks(c,1)),[d,g,h]})}Z((()=>{class n extends b_{constructor(e){super(2,e)}}return n.className="SeparableConv2D",n})()),Z((()=>{class n extends Lr{constructor(e){super(1,e),n.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Xd(e.kernelSize,"number",1,1))throw new E(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv1D",n})()),Z((()=>{class n extends Pe{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,s){return F(()=>{if(e=Ee(e),"channelsLast"===this.dataFormat){const r=Tl(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Tl(r,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const r=Tl(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Tl(r,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Cropping2D",n})()),Z((()=>{class n extends Pe{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=e.size??this.DEFAULT_SIZE,this.dataFormat=e.dataFormat??"channelsLast",wt(this.dataFormat),this.interpolation=e.interpolation??"nearest",function ZS(n){er(jS,"InterpolationFormat",n)}(this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,s){return F(()=>{let r=Ee(e);const o=r.shape;if("channelsFirst"===this.dataFormat){r=Ke(r,[0,2,3,1]);const a=this.size[0]*o[2],i=this.size[1]*o[3],l="nearest"===this.interpolation?r.resizeNearestNeighbor([a,i]):r.resizeBilinear([a,i]);return Ke(l,[0,3,1,2])}{const a=this.size[0]*o[1],i=this.size[1]*o[2];return"nearest"===this.interpolation?r.resizeNearestNeighbor([a,i]):r.resizeBilinear([a,i])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="UpSampling2D",n})()),Z((()=>{class n extends Ul{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=e.depthMultiplier??1,this.depthwiseInitializer=it(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=_t(e.depthwiseConstraint),this.depthwiseRegularizer=lt(e.depthwiseRegularizer)}build(e){if((e=Xe(e)).length<4)throw new E(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const s="channelsFirst"===this.dataFormat?1:3;if(null==e[s]||e[s]<0)throw new E(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[s]}).`);const r=e[s];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return F(()=>{let r=function w_(n,t,e=[1,1],s="valid",r,o){return F(()=>{null==r&&(r="channelsLast"),wt(r);let a=_h(n,r);if(4!==n.rank)throw new E(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);if(4!==t.rank)throw new E(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return a=aa(a,t,e,"same"===s?"same":"valid","NHWC",o),"channelsFirst"===r&&(a=Ke(a,[0,3,1,2])),a})}(e=Ee(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(r=Zn(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),r})}computeOutputShape(e){e=Xe(e);const r="channelsFirst"===this.dataFormat?e[3]:e[2],o="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=Mn("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),i=Mn(r,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],o,a,i]:[e[0],a,i,o]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=ht(this.depthwiseInitializer),e.depthwiseRegularizer=Ze(this.depthwiseRegularizer),e.depthwiseConstraint=Tt(this.depthwiseRegularizer),e}}return n.className="DepthwiseConv2D",n})());let Ia=(()=>{class n extends Pe{constructor(e){let s;if(super(e),null==e.cell)throw new E("cell property is missing for the constructor of RNN.");if(s=Array.isArray(e.cell)?new Vg({cells:e.cell}):e.cell,null==s.stateSize)throw new E("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=s,this.returnSequences=e.returnSequences??!1,this.returnState=e.returnState??!1,this.goBackwards=e.goBackwards??!1,this._stateful=e.stateful??!1,this.unroll=e.unroll??!1,this.supportsMasking=!0,this.inputSpec=[new zt({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return this.states_??Pn(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(s=>null)}setStates(e){this.states_=e}computeOutputShape(e){th(e)&&(e=e[0]);let s=this.cell.stateSize;Array.isArray(s)||(s=[s]);const r=s[0];let o;if(o=this.returnSequences?[e[0],e[1],r]:[e[0],r],this.returnState){const a=[];for(const i of s)a.push([e[0],i]);return[o].concat(a)}return o}computeMask(e,s){return F(()=>{Array.isArray(s)&&(s=s[0]);const r=this.returnSequences?s:null;if(this.returnState){const o=this.states.map(a=>null);return[r].concat(o)}return r})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,s=[];for(let r=0;r<e;++r)s.push(null);return s}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new $e("Constants support is not implemented in RNN yet.");th(e)&&(e=e[0]);const r=this.stateful?e[0]:null,o=e.slice(2);this.inputSpec[0]=new zt({shape:[r,null,...o]});const a=[e[0]].concat(e.slice(2));let i;if(this.cell.build(a),i=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!Se(this.stateSpec.map(l=>l.shape[l.shape.length-1]),i))throw new E(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(l=>new zt({shape:[null,l]}));this.stateful&&this.resetStates()}resetStates(e,s=!1){F(()=>{if(!this.stateful)throw new Kn("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape[0];if(null==r)throw new E("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(o=>It([r,o])):[It([r,this.cell.stateSize])];else if(null==e)De(this.states_),null!=this.keptStates&&(De(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(o=>It([r,o])):this.states_[0]=It([r,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new E(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===s?this.keptStates.push(this.states_.slice()):De(this.states_);for(let o=0;o<this.states_.length;++o){const a=e[o],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[o]:this.cell.stateSize,l=[r,i];if(!Se(a.shape,l))throw new E(`State ${o} is incompatible with layer ${this.name}: expected shape=${l}, received shape=${a.shape}`);this.states_[o]=a}}this.states_=this.states_.map(o=>jn(o.clone()))})}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const a=Pg(e,r,o,this.numConstants);e=a.inputs,r=a.initialState,o=a.constants;let i=[],l=[];if(null!=r){s.initialState=r,i=i.concat(r),this.stateSpec=[];for(const c of r)this.stateSpec.push(new zt({shape:c.shape}));l=l.concat(this.stateSpec)}if(null!=o&&(s.constants=o,i=i.concat(o),this.numConstants=o.length),i[0]instanceof Jn){const c=[e].concat(i),d=this.inputSpec.concat(l),h=this.inputSpec;this.inputSpec=d;const p=super.apply(c,s);return this.inputSpec=h,p}return super.apply(e,s)}call(e,s){return F(()=>{const r=null==s?null:s.mask,o=null==s?null:s.training;let a=null==s?null:s.initialState;e=Ee(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));const i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==i)throw new E(`RNN Layer has ${i} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const l={training:o},c=Lg((m,g)=>{const y=this.cell.call([m].concat(g),l);return[y[0],y.slice(1)]},e,a,this.goBackwards,r,null,this.unroll,this.returnSequences),d=c[0],h=c[1],p=c[2];this.stateful&&this.resetStates(p,o);const f=this.returnSequences?h:d;return this.returnState?[f].concat(p):f})}getInitialState(e){return F(()=>{let s=It(e.shape);return s=ve(s,[1,2]),s=ba(s),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(r=>r>1?Qd(s,[1,r]):s):this.cell.stateSize>1?[Qd(s,[1,this.cell.stateSize])]:[s]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),s={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(s.numConstants=this.numConstants);const r=this.cell.getConfig();return this.getClassName()===n.className&&(s.cell={className:this.cell.getClassName(),config:r}),Object.assign({},r,e,s)}static fromConfig(e,s,r={}){const a=hs(s.cell,r);return new e(Object.assign(s,{cell:a}))}}return n.className="RNN",n})();Z(Ia);class Hl extends Pe{}let Mg=(()=>{class n extends Hl{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Rt(this.units,"units"),this.activation=$s(e.activation??this.DEFAULT_ACTIVATION),this.useBias=e.useBias??!0,this.kernelInitializer=it(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=it(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=it(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=lt(e.kernelRegularizer),this.recurrentRegularizer=lt(e.recurrentRegularizer),this.biasRegularizer=lt(e.biasRegularizer),this.kernelConstraint=_t(e.kernelConstraint),this.recurrentConstraint=_t(e.recurrentConstraint),this.biasConstraint=_t(e.biasConstraint),this.dropout=Rr([1,Is([0,e.dropout??0])]),this.recurrentDropout=Rr([1,Is([0,e.recurrentDropout??0])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Xe(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return F(()=>{if(2!==e.length)throw new E(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let r=e[1];e=e[0];const o=s.training??!1;let a;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Es({ones:()=>bn(e),rate:this.dropout,training:o})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Es({ones:()=>bn(r),rate:this.recurrentDropout,training:o}));const i=this.dropoutMask,l=this.recurrentDropoutMask;a=Xn(null!=i?R(e,i):e,this.kernel.read()),null!=this.bias&&(a=Zn(a,this.bias.read())),null!=l&&(r=R(r,l));let u=te(a,Xn(r,this.recurrentKernel.read()));return null!=this.activation&&(u=this.activation.apply(u)),[u,u]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:_s(this.activation),useBias:this.useBias,kernelInitializer:ht(this.kernelInitializer),recurrentInitializer:ht(this.recurrentInitializer),biasInitializer:ht(this.biasInitializer),kernelRegularizer:Ze(this.kernelRegularizer),recurrentRegularizer:Ze(this.recurrentRegularizer),biasRegularizer:Ze(this.biasRegularizer),activityRegularizer:Ze(this.activityRegularizer),kernelConstraint:Tt(this.kernelConstraint),recurrentConstraint:Tt(this.recurrentConstraint),biasConstraint:Tt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,s)}}return n.className="SimpleRNNCell",n})();Z(Mg),Z((()=>{class n extends Ia{constructor(e){e.cell=new Mg(e),super(e)}call(e,s){return F(()=>(null!=this.cell.dropoutMask&&(De(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(De(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return new e(s)}}return n.className="SimpleRNN",n})());let zg=(()=>{class n extends Hl{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new E("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Rt(this.units,"units"),this.activation=$s(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=$s(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=e.useBias??!0,this.kernelInitializer=it(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=it(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=it(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=lt(e.kernelRegularizer),this.recurrentRegularizer=lt(e.recurrentRegularizer),this.biasRegularizer=lt(e.biasRegularizer),this.kernelConstraint=_t(e.kernelConstraint),this.recurrentConstraint=_t(e.recurrentConstraint),this.biasConstraint=_t(e.biasConstraint),this.dropout=Rr([1,Is([0,e.dropout??0])]),this.recurrentDropout=Rr([1,Is([0,e.recurrentDropout??0])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Xe(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return F(()=>{if(2!==e.length)throw new E(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const r=s.training??!1;let o=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Es({ones:()=>bn(e),rate:this.dropout,training:r,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Es({ones:()=>bn(o),rate:this.recurrentDropout,training:r,count:3}));const i=this.recurrentDropoutMask;let l,u,c;0<this.dropout&&this.dropout<1&&(e=R(e,this.dropoutMask[0]));let d=Xn(e,this.kernel.read());this.useBias&&(d=Zn(d,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(o=R(o,i[0]));const h=this.recurrentKernel.read(),[p,f]=wn(h,[2*this.units,this.units],h.rank-1),m=Xn(o,p),[g,y,x]=wn(d,3,d.rank-1),[v,b]=wn(m,2,m.rank-1);l=this.recurrentActivation.apply(te(g,v)),u=this.recurrentActivation.apply(te(y,b));const w=Xn(R(u,o),f);c=this.activation.apply(te(x,w));const k=te(R(l,o),R(te(1,bt(l)),c));return[k,k]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:_s(this.activation),recurrentActivation:_s(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ht(this.kernelInitializer),recurrentInitializer:ht(this.recurrentInitializer),biasInitializer:ht(this.biasInitializer),kernelRegularizer:Ze(this.kernelRegularizer),recurrentRegularizer:Ze(this.recurrentRegularizer),biasRegularizer:Ze(this.biasRegularizer),activityRegularizer:Ze(this.activityRegularizer),kernelConstraint:Tt(this.kernelConstraint),recurrentConstraint:Tt(this.recurrentConstraint),biasConstraint:Tt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,s)}}return n.className="GRUCell",n})();Z(zg),Z((()=>{class n extends Ia{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new zg(e),super(e)}call(e,s){return F(()=>(null!=this.cell.dropoutMask&&(De(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(De(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="GRU",n})());let Eh=(()=>{class n extends Hl{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Rt(this.units,"units"),this.activation=$s(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=$s(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=e.useBias??!0,this.kernelInitializer=it(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=it(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=it(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=lt(e.kernelRegularizer),this.recurrentRegularizer=lt(e.recurrentRegularizer),this.biasRegularizer=lt(e.biasRegularizer),this.kernelConstraint=_t(e.kernelConstraint),this.recurrentConstraint=_t(e.recurrentConstraint),this.biasConstraint=_t(e.biasConstraint),this.dropout=Rr([1,Is([0,e.dropout??0])]),this.recurrentDropout=Rr([1,Is([0,e.recurrentDropout??0])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var s;let o;if(e=Xe(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const a=this.biasInitializer,i=this.units;o=new((s=class extends In{apply(u,c){const d=a.apply([i]),h=(new jm).apply([i]),p=a.apply([2*i]);return Gm(Gm(d,h),p)}}).className="CustomInit",s)}else o=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,o,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,s){return F(()=>{const r=s.training??!1;if(3!==e.length)throw new E(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let o=e[1];const a=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Es({ones:()=>bn(e),rate:this.dropout,training:r,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Es({ones:()=>bn(o),rate:this.recurrentDropout,training:r,count:4}));const l=this.recurrentDropoutMask;let u,c,d,h;0<this.dropout&&this.dropout<1&&(e=R(e,this.dropoutMask[0]));let p=Xn(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(o=R(o,l[0])),p=te(p,Xn(o,this.recurrentKernel.read())),this.useBias&&(p=Zn(p,this.bias.read()));const[f,m,g,y]=wn(p,4,p.rank-1);u=this.recurrentActivation.apply(f),c=this.recurrentActivation.apply(m),d=te(R(c,a),R(u,this.activation.apply(g))),h=this.recurrentActivation.apply(y);const x=R(h,this.activation.apply(d));return[x,x,d]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:_s(this.activation),recurrentActivation:_s(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ht(this.kernelInitializer),recurrentInitializer:ht(this.recurrentInitializer),biasInitializer:ht(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Ze(this.kernelRegularizer),recurrentRegularizer:Ze(this.recurrentRegularizer),biasRegularizer:Ze(this.biasRegularizer),activityRegularizer:Ze(this.activityRegularizer),kernelConstraint:Tt(this.kernelConstraint),recurrentConstraint:Tt(this.recurrentConstraint),biasConstraint:Tt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,s)}}return n.className="LSTMCell",n})();Z(Eh),Z((()=>{class n extends Ia{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Eh(e),super(e)}call(e,s){return F(()=>(null!=this.cell.dropoutMask&&(De(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(De(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="LSTM",n})());let Vg=(()=>{class n extends Hl{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const s of this.cells.slice().reverse())Array.isArray(s.stateSize)?e.push(...s.stateSize):e.push(s.stateSize);return e}call(e,s){return F(()=>{let r=e.slice(1);const o=[];for(const l of this.cells.slice().reverse())Array.isArray(l.stateSize)?o.push(r.splice(0,l.stateSize.length)):o.push(r.splice(0,1));o.reverse();const a=[];let i;for(let l=0;l<this.cells.length;++l){const u=this.cells[l];r=o[l],i=0===l?[e[0]].concat(r):[i[0]].concat(r),i=u.call(i,s),a.push(i.slice(1))}r=[];for(const l of a.slice().reverse())r.push(...l);return[i[0]].concat(r)})}build(e){let s;th(e)&&(e=e[0]),this.cells.forEach((r,o)=>{tr(`RNNCell_${o}`,()=>{r.build(e),s=Array.isArray(r.stateSize)?r.stateSize[0]:r.stateSize,e=[e[0],s]})}),this.built=!0}getConfig(){const e=super.getConfig(),o={cells:this.cells.map(a=>({className:a.getClassName(),config:a.getConfig()}))};return Object.assign({},e,o)}static fromConfig(e,s,r={}){const o=[];for(const a of s.cells)o.push(hs(a,r));return new e({cells:o})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const s of this.cells)e.push(...s.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const s of this.cells)e.push(...s.nonTrainableWeights);if(!this.trainable){const s=[];for(const r of this.cells)s.push(...r.trainableWeights);return s.concat(e)}return e}getWeights(){const e=[];for(const s of this.cells)e.push(...s.weights);return nh(e)}setWeights(e){const s=[];for(const r of this.cells){const a=e.splice(r.weights.length);for(let i=0;i<r.weights.length;++i)s.push([r.weights[i],a[i]])}sh(s)}}return n.className="StackedRNNCells",n})();function Es(n){const{ones:t,rate:e,training:s=!1,count:r=1}=n,o=()=>Hm(t(),e),a=()=>va(o,t,s);return!r||r<=1?jn(a().clone()):Array(r).fill(void 0).map(a).map(l=>jn(l.clone()))}Z(Vg);let N_=(()=>{class n extends Ia{constructor(e){if(e.unroll)throw new $e("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new $e("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new zt({ndim:5})]}call(e,s){return F(()=>{if(null!=this.cell.dropoutMask&&(De(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(De(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),s&&s.constants)throw new E("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})})}computeOutputShape(e){let s=this.computeSingleOutputShape(e);return this.returnSequences||(s=[s[0],...s.slice(2)]),this.returnState&&(s=[s,...Array(2).fill([e[0],...s.slice(-3)])]),s}getInitialState(e){return F(()=>{const{stateSize:s}=this.cell,o=this.computeSingleOutputShape(e.shape),i=It([o[0],...o.slice(2)]);return Array.isArray(s)?Array(s.length).fill(i):[i]})}resetStates(e,s=!1){F(()=>{if(!this.stateful)throw new Kn("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape,o=this.computeSingleOutputShape(r),a=[o[0],...o.slice(2)];if(null==r[0])throw new E("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>It(a)):[It(a)];else if(null==e)De(this.states_),null!=this.keptStates&&(De(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>It(a)):this.states_[0]=It(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new E(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);s?this.keptStates.push(this.states_.slice()):De(this.states_);for(let l=0;l<this.states_.length;++l){const u=e[l],c=a;if(!Se(u.shape,c))throw new E(`State ${l} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${u.shape}`);this.states_[l]=u}}this.states_=this.states_.map(l=>jn(l.clone()))})}computeSingleOutputShape(e){const{dataFormat:s,filters:r,kernelSize:o,padding:a,strides:i,dilationRate:l}=this.cell,u="channelsFirst"===s,d=e[u?4:3],h=Mn(e[u?3:2],o[0],a,i[0],l[0]),p=Mn(d,o[1],a,i[1],l[1]);return[...e.slice(0,2),...u?[r,h,p]:[h,p,r]]}}return n.className="ConvRNN2D",n})(),Bg=(()=>{class n extends Eh{constructor(e){const{filters:s,kernelSize:r,strides:o,padding:a,dataFormat:i,dilationRate:l}=e;super(Object.assign({},e,{units:s})),this.filters=s,Rt(this.filters,"filters"),this.kernelSize=Pr(r,2,"kernelSize"),this.kernelSize.forEach(u=>Rt(u,"kernelSize")),this.strides=Pr(o||1,2,"strides"),this.strides.forEach(u=>Rt(u,"strides")),this.padding=a||"valid",dn(this.padding),this.dataFormat=i||"channelsLast",wt(this.dataFormat),this.dilationRate=Pr(l||1,2,"dilationRate"),this.dilationRate.forEach(u=>Rt(u,"dilationRate"))}build(e){var s;e=Xe(e);const r="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[r])throw new E(`The channel dimension of the input should be defined. Found ${e[r]}`);const i=this.kernelSize.concat([e[r],4*this.filters]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const l=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",l,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let u;if(this.unitForgetBias){const c=this.biasInitializer,d=this.filters;u=new((s=class extends In{apply(p,f){return Jd([c.apply([d]),vs([d]),c.apply([2*d])])}}).className="CustomInit",s)}else u=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,u,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,s){return F(()=>{if(3!==e.length)throw new E(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const r=s.training||!1,o=e[0],a=e[1],i=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Es({ones:()=>bn(o),rate:this.dropout,training:r,count:4}));const u=this.dropoutMask,c=(Q,ne,se)=>ne&&ne[se]?R(ne[se],Q):Q;let d=c(o,u,0),h=c(o,u,1),p=c(o,u,2),f=c(o,u,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Es({ones:()=>bn(a),rate:this.recurrentDropout,training:r,count:4}));const m=this.recurrentDropoutMask;let g=c(a,m,0),y=c(a,m,1),x=c(a,m,2),v=c(a,m,3);const[w,k,N,S]=wn(this.kernel.read(),4,3),[_,A,z,U]=this.useBias?wn(this.bias.read(),4):[null,null,null,null];d=this.inputConv(d,w,_,this.padding),h=this.inputConv(h,k,A,this.padding),p=this.inputConv(p,N,z,this.padding),f=this.inputConv(f,S,U,this.padding);const[G,H,W,B]=wn(this.recurrentKernel.read(),4,3);g=this.recurrentConv(g,G),y=this.recurrentConv(y,H),x=this.recurrentConv(x,W),v=this.recurrentConv(v,B);const K=this.recurrentActivation.apply(te(d,g)),j=this.recurrentActivation.apply(te(h,y)),X=te(R(j,i),R(K,this.activation.apply(te(p,x)))),Y=R(this.recurrentActivation.apply(te(f,v)),this.activation.apply(X));return[Y,Y,X]})}getConfig(){const r=function(n,t){var e={};for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&t.indexOf(s)<0&&(e[s]=n[s]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(n);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(n,s[r])&&(e[s[r]]=n[s[r]])}return e}(super.getConfig(),["units"]);return Object.assign({},r,{filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides})}inputConv(e,s,r,o){const a=Us(e,s,this.strides,o||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return r?Zn(a,r,this.dataFormat):a}recurrentConv(e,s){return Us(e,s,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}return n.className="ConvLSTM2DCell",n})();Z(Bg),Z((()=>{class n extends N_{constructor(e){const s=new Bg(e);super(Object.assign({},e,{cell:s}))}static fromConfig(e,s){return new e(s)}}return n.className="ConvLSTM2D",n})());let Wg=(()=>{class n extends Pe{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const s=e.shape,r=[];for(let o=0;o<this.noiseShape.length;++o)r.push(this.noiseShape[o]??s[o]);return r}call(e,s){return F(()=>{this.invokeCallHook(e,s);const r=Ee(e);if(0<this.rate&&this.rate<1){const o=s.training??!1,a=this.getNoiseShape(r);return va(()=>Hm(r,this.rate,a,this.seed),()=>r,o)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},s=super.getConfig();return Object.assign(e,s),e}dispose(){return super.dispose()}}return n.className="Dropout",n})();Z(Wg),Z((()=>{class n extends Wg{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const s=e.shape;return[s[0],1,s[2]]}}return n.className="SpatialDropout1D",n})()),Z((()=>{class n extends Pe{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=[s,e.inputDim]}this.units=e.units,Rt(this.units,"units"),this.activation=$s(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=it(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=it(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=_t(e.kernelConstraint),this.biasConstraint=_t(e.biasConstraint),this.kernelRegularizer=lt(e.kernelRegularizer),this.biasRegularizer=lt(e.biasRegularizer),this.activityRegularizer=lt(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const s=(e=Xe(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[s,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:s}}],this.built=!0}computeOutputShape(e){const s=(e=Xe(e)).slice();return s[s.length-1]=this.units,s}call(e,s){return F(()=>{this.invokeCallHook(e,s);const r=Ee(e),o=Om(this.activation.getClassName());let a;return null!=o?a=Xn(r,this.kernel.read(),o,this.bias?this.bias.read():null):(a=Xn(r,this.kernel.read()),null!=this.bias&&(a=Zn(a,this.bias.read())),null!=this.activation&&(a=this.activation.apply(a))),a})}getConfig(){const e={units:this.units,activation:_s(this.activation),useBias:this.useBias,kernelInitializer:ht(this.kernelInitializer),biasInitializer:ht(this.biasInitializer),kernelRegularizer:Ze(this.kernelRegularizer),biasRegularizer:Ze(this.biasRegularizer),activityRegularizer:Ze(this.activityRegularizer),kernelConstraint:Tt(this.kernelConstraint),biasConstraint:Tt(this.biasConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dense",n})()),Z((()=>{class n extends Pe{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=Xe(e);for(const s of e.slice(1))if(null==s)throw new E(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],ks(e,1)]}call(e,s){return F(()=>{this.invokeCallHook(e,s);let r=Ee(e);if("channelsFirst"===this.dataFormat&&r.rank>1){const o=[0];for(let a=2;a<r.rank;++a)o.push(a);o.push(1),r=r.transpose(o)}return function rT(n){if(n.rank<=1)throw new E(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);const t=[n.shape[0],ks(n.shape,1)];return n.reshape(t)}(r)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const s=super.getConfig();return Object.assign(e,s),e}}return n.className="Flatten",n})()),Z((()=>{class n extends Pe{constructor(e){super(e),this.supportsMasking=!0,this.activation=$s(e.activation)}call(e,s){return F(()=>{this.invokeCallHook(e,s);const r=Ee(e);return this.activation.apply(r)})}getConfig(){const e={activation:_s(this.activation)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Activation",n})()),Z((()=>{class n extends Pe{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,s){return F(()=>function nT(n,t){return F(()=>{if(2!==n.shape.length)throw new E(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);return Qd(ba(n,1),[1,t,1])})}(e=Ee(e),this.n))}getConfig(){const e={n:this.n},s=super.getConfig();return Object.assign(e,s),e}}return n.className="RepeatVector",n})()),Z((()=>{class n extends Pe{constructor(e){super(e),this.targetShape=e.targetShape;for(let s=0;s<this.targetShape.length;++s)this.isUnknown(this.targetShape[s])&&(this.targetShape[s]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,s){const r="Total size of new array must be unchanged.",o=s.slice();let a=1,i=null;for(let u=0;u<o.length;++u){const c=o[u];if(this.isUnknown(c)){if(null!==i)throw new E("Can only specifiy one unknown dimension.");i=u}else a*=c}const l=ks(e);if(null!==i){if(0===a||l%a!=0)throw new E(r);o[i]=l/a}else if(l!==a)throw new E(r);return o}computeOutputShape(e){let s=!1;for(let r=0;r<e.length;++r)if(this.isUnknown(e[r])){s=!0;break}return s?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,s){return F(()=>{this.invokeCallHook(e,s);const r=Ee(e),o=r.shape,a=o.slice(0,1).concat(this.fixUnknownDimension(o.slice(1),this.targetShape));return r.reshape(a)})}getConfig(){const e={targetShape:this.targetShape},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Reshape",n})()),Z((()=>{class n extends Pe{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const s=Pn(1,e.dims.length+1);if(!Se(e.dims.slice().sort(),s))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new zt({ndim:this.dims.length+1})]}computeOutputShape(e){const s=(e=Xe(e)).slice();return this.dims.forEach((r,o)=>{s[o+1]=e[r]}),s}call(e,s){return Ke(Ee(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Permute",n})()),Z((()=>{class n extends Pe{constructor(e){super(e??{}),this.supportsMasking=!0,this.maskValue=null!=e?e.maskValue??0:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={maskValue:this.maskValue};return Object.assign(s,e),s}computeMask(e,s){const r=Ee(e);return Lc(Tr(r,this.maskValue),-1)}call(e,s){return F(()=>{this.invokeCallHook(e,s);const r=Ee(e),i=Lc(Tr(r,this.maskValue),-1,!0);return r.mul(i.asType(r.dtype))})}}return n.className="Masking",n})()),Z((()=>{class n extends Pe{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=null==e.inputLength?[s,null]:[s].concat(tt(e.inputLength))}this.inputDim=e.inputDim,Rt(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Rt(this.outputDim,"outputDim"),this.embeddingsInitializer=it(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=lt(e.embeddingsRegularizer),this.activityRegularizer=lt(e.activityRegularizer),this.embeddingsConstraint=_t(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,s){return F(()=>this.maskZero?(e=Ee(e),Tr(e,Fe(e))):null)}computeOutputShape(e){if(e=Xe(e),null==this.inputLength)return[...e,this.outputDim];const s=tt(this.inputLength);if(s.length!==e.length-1)throw new E(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let r=0;for(let o=0;o<s.length;++o){const a=s[o],i=e[o+1];if(null!=a&&null!=i&&a!==i)throw new E(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(s[r]=i),r++}}return[e[0],...s,this.outputDim]}call(e,s){return F(()=>{this.invokeCallHook(e,s);let r=Ee(e);return"int32"!==r.dtype&&(r=xa(r,"int32")),Um(this.embeddings.read(),r.as1D()).reshape(Xe(this.computeOutputShape(r.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:ht(this.embeddingsInitializer),embeddingsRegularizer:Ze(this.embeddingsRegularizer),activityRegularizer:Ze(this.activityRegularizer),embeddingsConstraint:Tt(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Embedding",n})());class rr extends Pe{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new $e}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const s=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const o=t[t.length-e.length+r],a=e[r];if(null==o||null==a||o<0||a<0)s.push(null);else if(1===o)s.push(a);else if(1===a)s.push(o);else{if(o!==a)throw new E("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));s.push(o)}}return s}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[Xe(t)]),t.length<2)throw new E(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const o of t)null!=o&&null!==o[0]&&e.push(o[0]);if(e=Cs(e),e.length>1)throw new E(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let s=null==t[0]?null:t[0].slice(1);for(let o=1;o<t.length;++o){const a=null==t[o]?null:t[o].slice(1);s=this.computeElementwiseOpOutputShape(s,a)}const r=t.map(o=>o.length);this.reshapeRequired=-1!==t.indexOf(null)||1!==Cs(r).length}call(t,e){return F(()=>{if(this.reshapeRequired){const s=[],r=t.map(o=>o.rank);if(-1===r.indexOf(null)){const o=Is(r);for(let a of t){const i=a.rank;for(let l=0;l<o-i;++l)a=ba(a,1);s.push(a)}return this.mergeFunction(s)}{let o=!1;for(const l of t){const u=l.rank;if(null==u){const c=l.shape,d=c[0],h=c.slice(1).concat([d]);let p=l.reshape([d].concat(ks(c.slice(1))));p=Ke(p,[1,0]),p=p.reshape(h),s.push(p),o=!0}else if(u>1){const c=Pn(1,u).concat([0]);s.push(Ke(l,c)),o=!0}else s.push(l)}let a=this.mergeFunction(s);const i=a.rank;if(o)if(null==i){const l=a.shape,c=l[l.length-1],d=[c].concat(l.slice(0,l.length-1));a=Ke(a.reshape([-1,c]),[1,0]).reshape(d)}else if(i>1){const l=[i-1].concat(Pn(0,i-1));a=Ke(a,l)}return a}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==t[0]?null:t[0].slice(1);for(let r=1;r<t.length;++r){const o=null==t[r]?null:t[r].slice(1);e=this.computeElementwiseOpOutputShape(e,o)}let s=[];for(const r of t)null!=r&&null!==r[0]&&s.push(r[0]);return s=Cs(s),e=1===s.length?s.concat(e):[null].concat(e),e}computeMask(t,e){return F(()=>{if(null==e)return null;if(!Array.isArray(e))throw new E("`mask` should be an Array");if(!Array.isArray(t))throw new E("`inputs` should be an Array");if(e.length!==t.length)throw new E(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(r=>null==r))return null;let s=(e=e.map(r=>null==r?r:An(r,0)))[0];for(let r=1;r<e.length-1;++r)s=as(s,e[r]);return s})}}function Sa(n,t){for(;n<0;)n+=t;return n}function Ta(n,t,e,s,r,o=.001){let a;if(2===n.rank)a=Iw(n,t,e,s,r,o);else if(3===n.rank)a=Tw(n,t,e,s,r,o);else{if(4!==n.rank)throw new $e(`batchNormalization is not implemented for array of rank ${n.rank} yet`);a=$w(n,t,e,s,r,o)}return a}function jl(n,t,e,s,r,o){return F(()=>{let a;wt(r),Lm(o),dn(s),null==e&&(e=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),n=_h(n,r);const i="same"===s?"same":"valid";return a="max"===o?jc(n,t,e,i):Bc(n,t,e,i),"channelsFirst"===r&&(a=Ke(a,[0,3,1,2])),a})}function Gg(n,t,e,s,r,o){return F(()=>{let a;wt(r),Lm(o),dn(s),null==e&&(e=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),n=Ag(n,r);const i="same"===s?"same":"valid";return a="max"===o?mv(n,t,e,i):vw(n,t,e,i),"channelsFirst"===r&&(a=Ke(a,[0,4,1,2,3])),a})}Z((()=>{class n extends rr{constructor(e){super(e)}mergeFunction(e){return F(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=te(s,e[r]);return s})}}return n.className="Add",n})()),Z((()=>{class n extends rr{constructor(e){super(e)}mergeFunction(e){return F(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=R(s,e[r]);return s})}}return n.className="Multiply",n})()),Z((()=>{class n extends rr{constructor(e){super(e)}mergeFunction(e){return F(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=te(s,e[r]);return R(1/e.length,s)})}}return n.className="Average",n})()),Z((()=>{class n extends rr{constructor(e){super(e)}mergeFunction(e){return F(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=is(s,e[r]);return s})}}return n.className="Maximum",n})()),Z((()=>{class n extends rr{constructor(e){super(e)}mergeFunction(e){return F(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=la(s,e[r]);return s})}}return n.className="Minimum",n})()),Z((()=>{class n extends rr{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=e.axis??this.DEFAULT_AXIS,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new E("A `Concatenate` layer should be called on a list of at least 2 inputs");let s=!0;for(const o of e)if(null!=o){s=!1;break}if(s)return;const r=[];for(let o=0;o<e.length;++o){const a=e[o].slice();a.splice(this.axis,1);let i=!1;for(const l of r)if(Se(l,a)){i=!0;break}i||r.push(a)}if(r.length>1)throw new E("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return F(()=>Jd(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new E("A `Concatenate` layer should be called on a list of inputs.");const s=e,r=s[0].slice(),o=this.axis<0?r.length+this.axis:this.axis;for(const a of s.slice(1)){if(null==r[o]||null==a[o]){r[o]=null;break}r[o]+=a[o]}return r}computeMask(e,s){if(null==s)return null;if(!Array.isArray(s))throw new E("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new E("`inputs` should be an array for Concatenate");if(s.length!==e.length)throw new E(`Mismatch in the length of mask (${s.length}) and the legnth of inputs (${e.length})`);return F(()=>{let r=!0;if(s.forEach(i=>{null==i||(r=!1)}),r)return null;const o=[];for(let i=0;i<e.length;++i)o.push(null==s[i]?bn(e[i]).asType("bool"):s[i].rank<e[i].rank?An(s[i],-1):s[i]);const a=Lt(o,this.axis);return _f(a,-1,!1)})}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Concatenate",n})()),Z((()=>{class n extends rr{constructor(e){super(e),this.axes=e.axes,this.normalize=e.normalize??!1,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){C(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0],r=e[1];if(s.length>3||r.length>3)throw new $e("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);if(s[o[0]]!==r[o[1]])throw new E(`Dimension incompatibility: ${s[o[0]]} !== ${r[o[1]]}`)}mergeFunction(e){if(2!==e.length)throw new E(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let o,s=e[0],r=e[1];return o=Array.isArray(this.axes)?this.axes.map((a,i)=>Sa(a,e[i].shape.length)):[Sa(this.axes,s.shape.length),Sa(this.axes,r.shape.length)],this.normalize&&(s=Fl(s,o[0]),r=Fl(r,o[1])),function C_(n,t,e){if(n.shape.length>3||t.shape.length>3)throw new $e("batchDot is not implemented for tensors of 4D or higher rank yet");if(C(n.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`),C(n.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof e&&(e=[e,e]),"complex64"===n.dtype||"complex64"===t.dtype)throw new $e("batchDot is not implemented for complex64-type Tensors yet.");const s=n.shape.length,r=t.shape.length;null==e&&(e=[s-1,r-2]);const o=e;return F(()=>{let a,i;if(s>r){a=s-r;const l=[];for(let u=0;u<a;++u)l.push(1);t=t.reshape(t.shape.concat(l))}else if(r>s){a=r-s;const l=[];for(let u=0;u<a;++u)l.push(1);n=n.reshape(n.shape.concat(l))}else a=0;if(i=2===n.shape.length&&2===t.shape.length?o[0]===o[1]?n.mul(t).sum(o[0]):n.transpose([1,0]).mul(t).sum(o[1]):n.matMul(t,o[0]!==n.shape.length-1,o[1]===t.shape.length-1),a>0){let l;l=s>r?s+r-3:s-1;const u=[];for(let c=l;c<l+a;++c)u.push(c);i=i.squeeze(u)}return 1===i.shape.length&&(i=i.expandDims(1)),i})}(s,r,o)}interpretAxes(e,s){let r;return r=Array.isArray(this.axes)?this.axes:[Sa(this.axes,e.length),Sa(this.axes,s.length)],r}computeOutputShape(e){C(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0].slice(),r=e[1].slice();if(s.length>3||r.length>3)throw new $e("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);s.splice(o[0],1),r.splice(o[1],1),r.splice(0,1);const a=s.concat(r);return 1===a.length&&a.push(1),a}computeMask(e,s){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dot",n})()),Z((()=>{class n extends Pe{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={stddev:this.stddev};return Object.assign(s,e),s}call(e,s){return F(()=>{this.invokeCallHook(e,s);const r=Ee(e);return va(()=>_l(r.shape,0,this.stddev).add(r),()=>r,s.training||!1)})}}return n.className="GaussianNoise",n})()),Z((()=>{class n extends Pe{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return F(()=>{this.invokeCallHook(e,s);const r=Ee(e);return this.rate>0&&this.rate<1?va(()=>{const a=Math.sqrt(this.rate/(1-this.rate));return r.mul(_l(r.shape,1,a))},()=>r,s.training||!1):r})}}return n.className="GaussianDropout",n})()),Z((()=>{class n extends Pe{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Ee(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return F(()=>{if(this.rate<1&&this.rate>0){const r=this._getNoiseShape(e);return va(()=>{const a=Ee(e),u=-1.7580993408473766;let c=js(cl(r),this.rate);c=xa(c,"float32");const d=((1-this.rate)*(1+this.rate*u**2))**-.5,h=-d*u*this.rate;return a.mul(c).add(c.add(-1).mul(u)).mul(d).add(h)},()=>Ee(e),s.training||!1)}return e})}}return n.className="AlphaDropout",n})()),Z((()=>{class n extends Pe{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=e.axis??-1,this.momentum=e.momentum??.99,this.epsilon=e.epsilon??.001,this.center=e.center??!0,this.scale=e.scale??!0,this.betaInitializer=it(e.betaInitializer||"zeros"),this.gammaInitializer=it(e.gammaInitializer||"ones"),this.movingMeanInitializer=it(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=it(e.movingVarianceInitializer||"ones"),this.betaConstraint=_t(e.betaConstraint),this.gammaConstraint=_t(e.gammaConstraint),this.betaRegularizer=lt(e.betaRegularizer),this.gammaRegularizer=lt(e.gammaRegularizer)}build(e){e=Xe(e);const s=this.axis>=0?this.axis:this.axis+e.length,r=e[s];if(null==r)throw new E(`Axis ${s} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new zt({ndim:e.length,axes:{[s]:r}})];const o=[r];this.scale&&(this.gamma=this.addWeight("gamma",o,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",o,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",o,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",o,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,s){return F(()=>{const r=s.training??!1,o=Ee(e),a=o.shape,i=a.length,l=Pn(0,i),u=this.axis>=0?this.axis:this.axis+i;l.splice(u,1);const c=Js(1,i);c[u]=a[u];const d=l.slice();d.sort();const h=!Se(d,Pn(0,i).slice(0,i-1));if(!r)return(()=>{if(h){const v=this.movingMean.read().reshape(c),b=this.movingVariance.read().reshape(c),w=this.center?this.beta.read().reshape(c):null,k=this.scale?this.gamma.read().reshape(c):null;return Ta(o,v,b,w,k,this.epsilon)}return Ta(o,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[f,m,g]=function S_(n,t,e,s,r=.001){return Se(s.slice().sort(),Pn(0,n.rank-1))?function k_(n,t,e,s,r=.001){return F(()=>{const o=Kc(n,s),a=o.mean,i=o.variance;return[Ta(n,a,i,e,t,r),a,i]})}(n,t,e,s,r):function I_(n,t,e,s,r=.001){return F(()=>{const o=Kc(n,s),a=o.mean,i=o.variance,l=[];for(const f of Pn(0,n.rank))-1!==s.indexOf(f)?l.push(1):l.push(n.shape[f]);const u=a.reshape(l),c=i.reshape(l),d=null==t?null:t.reshape(l),h=null==e?null:e.reshape(l);return[Ta(n,u,c,h,d,r),a,i]})}(n,t,e,s,r)}(o,this.gamma.read(),this.beta.read(),l,this.epsilon),y=(v,b,w)=>{F(()=>{const k=1-w,N=v.read(),S=N.sub(b).mul(k);v.write(N.sub(S))})};return(()=>{y(this.movingMean,m,this.momentum),y(this.movingVariance,g,this.momentum)})(),f})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ht(this.betaInitializer),gammaInitializer:ht(this.gammaInitializer),movingMeanInitializer:ht(this.movingMeanInitializer),movingVarianceInitializer:ht(this.movingVarianceInitializer),betaRegularizer:Ze(this.betaRegularizer),gammaRegularizer:Ze(this.gammaRegularizer),betaConstraint:Tt(this.betaConstraint),gammaConstraint:Tt(this.gammaConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BatchNormalization",n})()),Z((()=>{class n extends Pe{constructor(e){if(null==e&&(e={}),super(e),this.axis=e.axis??-1,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const s of this.axis)if(!Number.isInteger(s))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=e.epsilon??.001,this.center=e.center??!0,this.scale=e.scale??!0,this.betaInitializer=it(e.betaInitializer||"zeros"),this.gammaInitializer=it(e.gammaInitializer||"ones"),this.betaRegularizer=lt(e.betaRegularizer),this.gammaRegularizer=lt(e.gammaRegularizer),this.supportsMasking=!0}build(e){const s=(e=Xe(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let a=0;a<this.axis.length;++a)this.axis[a]<0&&(this.axis[a]+=s);for(const a of this.axis)if(a<0||a>=s)throw new Error(`Invalid axis: ${a}`);if(this.axis.length!==Cs(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const r=this.axis.map(a=>e[a]);this.gamma=this.scale?this.addWeight("gamma",r,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",r,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,s){const r=Ee(e),o=r.shape,a=o.length;return F(()=>{let{mean:l,variance:u}=Kc(r,this.axis,!0);const c=Js(1,a);for(const g of this.axis)c[g]=o[g];const d=g=>null!=g&&g.shape.length!==a&&this.axis!==[a-1]?g.reshape(c):g;let h=d(this.gamma.read()),p=d(this.beta.read());const f=[],m=[];for(let g=0;g<a;++g)-1!==this.axis.indexOf(g)?(f.push(o[g]),m.push(1)):(f.push(1),m.push(o[g]));return l=l.tile(f),u=u.tile(f),h=h.tile(m),p=p.tile(m),Ta(r,l,u,p,h,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ht(this.betaInitializer),gammaInitializer:ht(this.gammaInitializer),betaRegularizer:Ze(this.betaRegularizer),gammaRegularizer:Ze(this.gammaRegularizer)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LayerNormalization",n})()),Z((()=>{class n extends Pe{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=e.dataFormat??"channelsLast",null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new E(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let s,r;if("number"==typeof e.padding[0])s=[e.padding[0],e.padding[0]],r=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new E(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(s=e.padding[0],2!==e.padding[1].length)throw new E(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);r=e.padding[1]}this.padding=[s,r]}this.inputSpec=[new zt({ndim:4})]}computeOutputShape(e){let s,r;return e=Xe(e),"channelsFirst"===this.dataFormat?(s=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],s,r]):(s=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],s,r,e[3]])}call(e,s){return F(()=>function T_(n,t,e){return F(()=>{if(4!==n.rank)throw new E(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);if(null==t&&(t=[[1,1],[1,1]]),2!==t.length||2!==t[0].length||2!==t[1].length)throw new E("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==e&&(e="channelsLast"),"channelsLast"!==e&&"channelsFirst"!==e)throw new E(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let s;return s="channelsFirst"===e?[[0,0],[0,0],t[0],t[1]]:[[0,0],t[0],t[1],[0,0]],Xc(n,s)})}(Ee(e),this.padding,this.dataFormat))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ZeroPadding2D",n})());class Ug extends Pe{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new E(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);this.poolSize=t.poolSize}if(Rt(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new E(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);this.strides=t.strides}Rt(this.strides,"strides"),this.padding=t.padding??"valid",dn(this.padding),this.inputSpec=[new zt({ndim:3})]}computeOutputShape(t){const e=Mn((t=Xe(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return F(()=>{this.invokeCallHook(t,e),t=ba(Ee(t),2);const s=this.poolingFunction(Ee(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return sd(s,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}Z((()=>{class n extends Ug{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return wt(a),dn(o),jl(e,s,r,o,a,"max")}}return n.className="MaxPooling1D",n})()),Z((()=>{class n extends Ug{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return wt(a),dn(o),jl(e,s,r,o,a,"avg")}}return n.className="AveragePooling1D",n})());class Hg extends Pe{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new E(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];Rt(this.poolSize,"poolSize"),Rt(this.strides,"strides"),this.padding=t.padding??"valid",this.dataFormat=t.dataFormat??"channelsLast",wt(this.dataFormat),dn(this.padding),this.inputSpec=[new zt({ndim:4})]}computeOutputShape(t){t=Xe(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2];return e=Mn(e,this.poolSize[0],this.padding,this.strides[0]),s=Mn(s,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s]:[t[0],e,s,t[3]]}call(t,e){return F(()=>(this.invokeCallHook(t,e),this.poolingFunction(Ee(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}Z((()=>{class n extends Hg{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return wt(a),dn(o),jl(e,s,r,o,a,"max")}}return n.className="MaxPooling2D",n})()),Z((()=>{class n extends Hg{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return wt(a),dn(o),jl(e,s,r,o,a,"avg")}}return n.className="AveragePooling2D",n})());class jg extends Pe{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new E(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];Rt(this.poolSize,"poolSize"),Rt(this.strides,"strides"),this.padding=t.padding??"valid",this.dataFormat=t.dataFormat??"channelsLast",wt(this.dataFormat),dn(this.padding),this.inputSpec=[new zt({ndim:5})]}computeOutputShape(t){t=Xe(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=Mn(e,this.poolSize[0],this.padding,this.strides[0]),s=Mn(s,this.poolSize[1],this.padding,this.strides[1]),r=Mn(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s,r]:[t[0],e,s,r,t[4]]}call(t,e){return F(()=>(this.invokeCallHook(t,e),this.poolingFunction(Ee(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}Z((()=>{class n extends jg{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return wt(a),dn(o),Gg(e,s,r,o,a,"max")}}return n.className="MaxPooling3D",n})()),Z((()=>{class n extends jg{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return wt(a),dn(o),Gg(e,s,r,o,a,"avg")}}return n.className="AveragePooling3D",n})());class qg extends Pe{constructor(t){super(t),this.inputSpec=[new zt({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new $e}}Z((()=>{class n extends qg{constructor(e){super(e||{})}call(e,s){return F(()=>{const r=Ee(e);return gt(r,1)})}}return n.className="GlobalAveragePooling1D",n})()),Z((()=>{class n extends qg{constructor(e){super(e||{})}call(e,s){return F(()=>{const r=Ee(e);return On(r,1)})}}return n.className="GlobalMaxPooling1D",n})());class Kg extends Pe{constructor(t){super(t),this.dataFormat=t.dataFormat??"channelsLast",wt(this.dataFormat),this.inputSpec=[new zt({ndim:4})]}computeOutputShape(t){return"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new $e}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}Z((()=>{class n extends Kg{call(e,s){return F(()=>{const r=Ee(e);return gt(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalAveragePooling2D",n})()),Z((()=>{class n extends Kg{call(e,s){return F(()=>{const r=Ee(e);return On(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalMaxPooling2D",n})());class Xg extends Pe{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,s={}){const o=hs(e.layer,s);delete e.layer;const a={layer:o};return Object.assign(a,e),new t(a)}}var ey;function ce(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&C("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}Z((()=>{class n extends Xg{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=Xe(e)).length<3)throw new E(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const s=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(s),this.layer.built=!0),super.build(e)}computeOutputShape(e){const s=[(e=Xe(e))[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(s);return[r[0],e[1]].concat(r.slice(1))}call(e,s){return F(()=>Lg((i,l)=>[Ee(this.layer.call(i,s)),[]],e=Ee(e),[],!1,null,null,!1,!0)[1])}}return n.className="TimeDistributed",n})()),Z((()=>{class n extends Xg{constructor(e){super(e);const s=e.layer.getConfig(),r={};r.className=e.layer.getClassName(),r.config=s,this.forwardLayer=hs(r),s.goBackwards=!0!==s.goBackwards;const o={};if(o.className=e.layer.getClassName(),o.config=s,this.backwardLayer=hs(o),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,function __(n){er(XS,"BidirectionalMergeMode",n)}(this.mergeMode),e.weights)throw new $e("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const r=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,r)),this.backwardLayer.setWeights(e.slice(r))}computeOutputShape(e){let r,o,a,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState&&(a=s.slice(1)),r=s[0],"concat"===this.mergeMode?(r[r.length-1]*=2,o=[r]):o=null==this.mergeMode?[r,r.slice()]:[r],this.returnState?null==this.mergeMode?o.concat(a).concat(a.slice()):[r].concat(a).concat(a.slice()):en(o)}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const a=Pg(e,r,o,this.numConstants);if(e=a.inputs,r=a.initialState,o=a.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(null==r||0===r.length)&&null==o)return super.apply(e,s);const i=[],l=[];if(null!=r){const c=r.length;if(c%2>0)throw new E("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");s.initialState=r,i.push(...r);const d=r.map(h=>new zt({shape:h.shape}));this.forwardLayer.stateSpec=d.slice(0,c/2),this.backwardLayer.stateSpec=d.slice(c/2),l.push(...d)}if(null!=o)throw new $e("Support for constants in Bidirectional layers is not implemented yet.");const u=i[0]instanceof Jn;for(const c of i)if(c instanceof Jn!==u)throw new E("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(u){const c=[e].concat(i),d=this.inputSpec.concat(l),h=this.inputSpec;this.inputSpec=d;const p=super.apply(c,s);return this.inputSpec=h,p}return super.apply(e,s)}call(e,s){return F(()=>{const r=s.initialState;let o,a,i,l;if(null==r)o=this.forwardLayer.call(e,s),a=this.backwardLayer.call(e,s);else{const u=r.slice(0,r.length/2),c=r.slice(r.length/2);o=this.forwardLayer.call(e,Object.assign(s,{initialState:u})),a=this.backwardLayer.call(e,Object.assign(s,{initialState:c}))}return this.returnState&&(Array.isArray(o)&&(i=o.slice(1).concat(a.slice(1))),o=o[0],a=a[0]),this.returnSequences&&(a=qs(a,1)),"concat"===this.mergeMode?l=Jd([o,a]):"sum"===this.mergeMode?l=te(o,a):"ave"===this.mergeMode?l=R(.5,te(o,a)):"mul"===this.mergeMode?l=R(o,a):null==this.mergeMode&&(l=[o,a]),this.returnState?null==this.mergeMode?l.concat(i):[l].concat(i):l})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){tr(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),tr(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,s){let r;if(Array.isArray(s)&&(s=s[0]),r=this.returnSequences?null==this.mergeMode?[s,s]:s:null==this.mergeMode?[null,null]:null,this.returnState){const a=this.forwardLayer.states.map(i=>null);return Array.isArray(r)?r.concat(a).concat(a):[r].concat(a).concat(a)}return r}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},s=super.getConfig();return Object.assign(e,s),e}static fromConfig(e,s){const r=hs(s.layer);if(delete s.layer,null!=s.numConstants)throw new $e("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const o=s;return o.layer=r,new e(o)}}return n.className="Bidirectional",n})()),function(n){let t;var e;(e=t=n.CheckpointFormatVersion||(n.CheckpointFormatVersion={}))[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(ey||(ey={})),Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const y$=fm;class x$ extends ie{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new ee(this,Cr())}write(t,e,s){this.firstUse&&(this.firstUse=!1,q().get("IS_NODE")&&Dr("\n============================\nHi there \u{1f44b}. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={};return this.data.set(r,{values:t,dtype:s,refCount:1}),r}makeTensorInfo(t,e,s){let r;if("string"===e&&null!=s&&s.length>0&&to(s[0])){const o=s.map(a=>ra(a));r=this.write(o,t,e)}else r=this.write(s,t,e);return{dataId:r,shape:t,dtype:e}}incRef(t){this.data.get(t).refCount++}decRef(t){this.data.has(t)&&this.data.get(t).refCount--}move(t,e,s,r){this.data.set(t,{values:e,dtype:r,refCount:1})}numDataIds(){return this.data.numDataIds()}read(t){var e=this;return(0,M.Z)(function*(){return e.readSync(t)})()}readSync(t){const{dtype:e,complexTensorInfos:s}=this.data.get(t);return"complex64"===e?cs(this.readSync(s.real.dataId),this.readSync(s.imag.dataId)):this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let s=e;if("string"===t.dtype)try{s=e.map(r=>fr(r))}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Ae(t.shape,t.dtype,s)}makeOutput(t,e,s){const r=this.write(t,e,s);return Cr().makeTensorFromDataId(r,e,s,this)}disposeData(t){if(this.data.has(t)){const{complexTensorInfos:e}=this.data.get(t);null!=e&&(this.disposeData(e.real.dataId),this.disposeData(e.imag.dataId)),this.data.delete(t)}}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.data.has(e)){const s=this.data.get(e);s.refCount--,s.refCount<1&&this.disposeData(e)}}time(t){return(0,M.Z)(function*(){const e=mn();return t(),{kernelMs:mn()-e}})()}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(t){ce([t],"where");const e=this.readSync(t.dataId);return y$(t.shape,e)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function He(n,t,e){return({inputs:s,attrs:r,backend:o})=>{const{x:a}=s;if(ce(a,n),"string"===a.dtype||"string"===e)throw new Error("unaryKernelFunc does not support string input/output");const i=o,l=i.data.get(a.dataId).values,u=V(a.shape),c=e||a.dtype,d=dr(c,u);for(let h=0;h<u;++h)d[h]=t(l[h],r);return i.makeTensorInfo(a.shape,c,d)}}function zr(n,t,e){return({inputs:s,attrs:r,backend:o})=>{const{x:a}=s;if(ce(a,n),"string"===a.dtype||"string"===e)throw new Error("unaryKernelFunc does not support string input/output");const i=o,l=i.data.get(a.dataId).values,u=e||a.dtype,c=t(l,u,r);return i.makeTensorInfo(a.shape,u,c)}}Tf("cpu",()=>new x$,1);const _y=He(bo,n=>n>=0?n:Math.exp(n)-1),w$={kernelName:bo,backendName:"cpu",kernelFunc:_y};function Qn(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const v$={kernelName:ai,backendName:"cpu",kernelFunc:Qn};function $y(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:o}=s;ce([r],"leakyRelu");const a=V(r.shape),i=e.data.get(r.dataId).values,l=Ut("float32",a);for(let u=0;u<i.length;u++)l[u]=i[u]<0?o*i[u]:i[u];return e.makeTensorInfo(r.shape,"float32",l)}const N$={kernelName:ii,backendName:"cpu",kernelFunc:$y};function Ct(n){return(t,e,s,r,o)=>{const a=Re(t,e),i=a.length,l=Ce(a),c=Ut(o,V(a)),d=t.length,h=e.length,p=Ce(t),f=Ce(e),m=ia(t,a),g=ia(e,a);if(m.length+g.length===0)for(let y=0;y<c.length;++y)c[y]=n(s[y%s.length],r[y%r.length]);else for(let y=0;y<c.length;++y){const x=so(y,i,l),v=x.slice(-d);m.forEach(N=>v[N]=0);const b=Wn(v,d,p),w=x.slice(-h);g.forEach(N=>w[N]=0);const k=Wn(w,h,f);c[y]=n(s[b],r[k])}return[c,a]}}const C$=Ct((n,t)=>n<0?t*n:n);function Ey(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t;ce([s,r],"prelu");const o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,[i,l]=C$(s.shape,r.shape,o,a,s.dtype);return e.makeTensorInfo(l,s.dtype,i)}const k$={kernelName:Si,backendName:"cpu",kernelFunc:Ey},Dy=He(Lo,n=>Math.max(0,n)),I$={kernelName:Lo,backendName:"cpu",kernelFunc:Dy},Ay=He(Mo,n=>Math.min(Math.max(0,n),6)),S$={kernelName:Mo,backendName:"cpu",kernelFunc:Ay};function qh(n,t,e,s,r){if("linear"===e)return Qn({inputs:{x:t},backend:n});if("relu"===e)return Dy({inputs:{x:t},backend:n});if("elu"===e)return _y({inputs:{x:t},backend:n});if("relu6"===e)return Ay({inputs:{x:t},backend:n});if("prelu"===e)return Ey({inputs:{x:t,alpha:s},backend:n});if("leakyrelu"===e)return $y({inputs:{x:t},backend:n,attrs:{alpha:r}});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function rn(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,i=e.makeTensorInfo(s.shape,"complex64");return e.data.get(i.dataId).complexTensorInfos={real:e.makeTensorInfo(s.shape,"float32",o),imag:e.makeTensorInfo(r.shape,"float32",a)},i}const T$={kernelName:Du,backendName:"cpu",kernelFunc:rn};function Jl(n,t,e="float32"){if("complex64"===e)return rn({inputs:{real:Jl(n,t,"float32"),imag:Jl(n,t,"float32")},backend:n});const s=Ht(V(t),e);return n.makeTensorInfo(t,e,s)}function or(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.real,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const _$={kernelName:tc,backendName:"cpu",kernelFunc:or};function Ds(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return Qn({inputs:{x:r},backend:e});const a=Jl(e,r.shape,r.dtype),i=Ds({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),l=rn({inputs:{real:i,imag:a},backend:e});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}if("complex64"===r.dtype){const a=or({inputs:{input:r},backend:e}),i=Ds({inputs:{x:a},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(a),i}if(!vu(r.dtype,o)){const a=Qn({inputs:{x:r},backend:e});return{dataId:a.dataId,shape:a.shape,dtype:o}}if("int32"===o){const a=e.data.get(r.dataId).values,i=Int32Array.from(a);return e.makeTensorInfo(r.shape,"int32",i)}if("bool"===o){const a=e.data.get(r.dataId).values,i=Vs([0],r.dtype),[l,u]=Ct((c,d)=>c!==d?1:0)(r.shape,[],a,i,"bool");return e.makeTensorInfo(u,"bool",l)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`)}const $$={kernelName:po,backendName:"cpu",kernelFunc:Ds};function Ot(n,t,e,s){return null==e?({inputs:r,backend:o})=>{const{a,b:i}=r,l=o;ce([a,i],n);const u=l.data.get(a.dataId).values,c=l.data.get(i.dataId).values,d=s||a.dtype,[h,p]=t(a.shape,i.shape,u,c,d);return l.makeTensorInfo(p,d,h)}:({inputs:r,backend:o})=>{const{a,b:i}=r,l=o;if("complex64"===a.dtype||"complex64"===i.dtype){const u=Ds({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),h=c.complexTensorInfos.imag,p=l.data.get(c.complexTensorInfos.real.dataId).values,f=l.data.get(h.dataId).values,m=Ds({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),g=l.data.get(m.dataId),x=g.complexTensorInfos.imag,v=l.data.get(g.complexTensorInfos.real.dataId).values,b=l.data.get(x.dataId).values,[w,k,N]=e(a.shape,i.shape,p,f,v,b),S=l.makeTensorInfo(N,"float32",w),_=l.makeTensorInfo(N,"float32",k),A=rn({inputs:{real:S,imag:_},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(m),l.disposeIntermediateTensorInfo(S),l.disposeIntermediateTensorInfo(_),A}{const u=l.data.get(a.dataId).values,c=l.data.get(i.dataId).values,d=s||a.dtype,[h,p]=t(a.shape,i.shape,u,c,d);return l.makeTensorInfo(p,d,h)}}}function Kh(n){return(t,e,s,r,o,a)=>{const i=Re(t,e),l=V(i),u=i.length,c=Ce(i),d=Ut("float32",l),h=Ut("float32",l),p=ia(t,i),f=ia(e,i),m=cs(s,r),g=cs(o,a),y=t.length,x=Ce(t),v=e.length,b=Ce(e);if(p.length+f.length===0)for(let w=0;w<d.length;w++){const k=w%m.length,N=w%g.length,S=n(m[2*k],m[2*k+1],g[2*N],g[2*N+1]);d[w]=S.real,h[w]=S.imag}else for(let w=0;w<d.length;w++){const k=so(w,u,c),N=k.slice(-y);p.forEach(U=>N[U]=0);const S=Wn(N,y,x),_=k.slice(-v);f.forEach(U=>_[U]=0);const A=Wn(_,v,b),z=n(m[2*S],m[2*S+1],g[2*A],g[2*A+1]);d[w]=z.real,h[w]=z.imag}return[d,h,i]}}const Ry=Ct((n,t)=>n+t),E$=Kh((n,t,e,s)=>({real:n+e,imag:t+s})),Ea=Ot(hr,Ry,E$),D$={kernelName:hr,backendName:"cpu",kernelFunc:Ea};function ut(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:o}=s,a=V(r.shape),i=Ms(o,a),l=V(i);C(a===l,()=>`The new shape (${i}) has ${l} elements and the old shape (${r.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`),e.incRef(r.dataId);const u=e.data.get(r.dataId);if(null!=u.complexTensorInfos){const d=u.complexTensorInfos.imag;u.complexTensorInfos.real.shape=i,d.shape=i}return{dataId:r.dataId,shape:i,dtype:r.dtype}}const A$={kernelName:Ti,backendName:"cpu",kernelFunc:ut};function Oy(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o}=t,{transposeA:a,transposeB:i}=s;ce([r,o],"matMul");const l=r.shape.length,u=o.shape.length,c=a?r.shape[l-2]:r.shape[l-1],d=i?o.shape[u-1]:o.shape[u-2],h=a?r.shape[l-1]:r.shape[l-2],p=i?o.shape[u-2]:o.shape[u-1],f=r.shape.slice(0,-2),m=o.shape.slice(0,-2),g=V(f),y=V(m);C(l>=2&&u>=2&&(g===y||1===g||1===y),()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${f}) and (${m}).`);const b=(g>y?r.shape.slice(0,-2):o.shape.slice(0,-2)).concat([h,p]);C(c===d,()=>`Error in matMul: inner shapes (${c}) and (${d}) of Tensors with shapes ${r.shape} and ${o.shape} and transposeA=${a} and transposeB=${i} must match.`);const k=i?[y,p,d]:[y,d,p],N=ut({inputs:{x:r},backend:e,attrs:{shape:a?[g,c,h]:[g,h,c]}}),S=ut({inputs:{x:o},backend:e,attrs:{shape:k}}),_=a?N.shape[1]:N.shape[2],A=a?N.shape[2]:N.shape[1],z=i?S.shape[1]:S.shape[2],U=Math.max(g,y),G=e.data.get(N.dataId).values,H=e.data.get(S.dataId).values,W=Ce(N.shape),B=Ce(S.shape),[K,j,X]=a?[W[0],1,W[1]]:[W[0],W[1],1],[Y,Q,ne]=i?[1,B[1],B[0]]:[B[1],1,B[0]],se=A*z,re=Ae([U,A,z],N.dtype),le=re.values,oe=e.blockSize;for(let fe=0;fe<U;fe++)for(let xe=0;xe<A;xe+=oe)for(let be=0;be<z;be+=oe)for(let _e=0;_e<_;_e+=oe){const Oe=Math.min(xe+oe,A),je=Math.min(be+oe,z),pt=Math.min(_e+oe,_);for(let rt=xe;rt<Oe;rt++)for(let nt=be;nt<je;nt++){let st=0;for(let ot=_e;ot<pt;ot++){const vt=Math.min(fe,g-1)*K,fs=Math.min(fe,y-1)*ne;st+=G[vt+rt*j+ot*X]*H[ot*Y+nt*Q+fs]}le[fe*se+(rt*z+nt)]+=st}}return e.disposeIntermediateTensorInfo(N),e.disposeIntermediateTensorInfo(S),e.makeTensorInfo(b,re.dtype,re.values)}const R$={kernelName:Ha,backendName:"cpu",kernelFunc:Oy},F$={kernelName:Bi,backendName:"cpu",kernelFunc:function O$(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o,bias:a,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:d}=s;let h,p,f;const m=[];h=Oy({inputs:{a:r,b:o},attrs:{transposeA:l,transposeB:u},backend:e}),a&&(p=Ea({inputs:{a:h,b:a},backend:e}),m.push(h),h=p),c&&(f=qh(e,h,c,i,d),m.push(h),h=f);for(const y of m)e.disposeIntermediateTensorInfo(y);return h}};function Fy(n){const t=new Float32Array(n.length);for(let e=0;e<n.length;++e)t[e]=Math.abs(n[e]);return t}const P$={kernelName:Va,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend;ce(t,"abs");let s=new Float32Array(V(t.shape));return s=Fy(e.data.get(t.dataId).values),e.makeOutput(s,t.shape,"float32")}},L$=He(ro,n=>Math.acos(n)),M$={kernelName:ro,backendName:"cpu",kernelFunc:L$},z$=He(oo,n=>Math.acosh(n)),V$={kernelName:oo,backendName:"cpu",kernelFunc:z$},W$={kernelName:Su,backendName:"cpu",kernelFunc:function B$(n){const{inputs:t,backend:e}=n,s=t;ce(t,"addN");const r=s.map(i=>e.data.get(i.dataId).values),o=Ae(s[0].shape,s[0].dtype),a=o.values;for(let i=0;i<s.length;i++){const l=r[i];for(let u=0;u<a.length;u++)a[u]+=l[u]}return e.makeTensorInfo(o.shape,o.dtype,o.values)}};function Xh(n,t,e,s,r){const o=t.length,a=V(t),i=Ce(t),l=Ce(r),u=Ut(e,V(r));for(let c=0;c<a;++c){const d=so(c,o,i),h=new Array(d.length);for(let f=0;f<h.length;f++)h[f]=d[s[f]];u[Wn(h,o,l)]=n[c]}return u}function Sn(n){const{inputs:t,attrs:e,backend:s}=n,{x:r}=t,{perm:o}=e;ce(r,"transpose");const i=new Array(r.shape.length);for(let d=0;d<i.length;d++)i[d]=r.shape[o[d]];const u=Xh(s.data.get(r.dataId).values,r.shape,r.dtype,o,i);return{dataId:s.write(u,i,r.dtype),shape:i,dtype:r.dtype}}const G$={kernelName:Li,backendName:"cpu",kernelFunc:Sn},H$={kernelName:"All",backendName:"cpu",kernelFunc:function U$(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;ce(r,"all");const i=Te(o,r.shape);let l=i;const u=xt(l,r.shape.length);let c=r;null!=u&&(c=Sn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Nt(l.length,r.shape.length)),Mt("all",l,c.shape.length);const[d,h]=At(c.shape,l),p=V(h),f=Ht(V(d),c.dtype),m=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let v=m[x];for(let b=0;b<p;++b){const w=m[x+b];v=v&&w}f[y]=v}null!=u&&e.disposeIntermediateTensorInfo(c);const g=e.makeTensorInfo(d,c.dtype,f);if(a){const x=ut({inputs:{x:g},backend:e,attrs:{shape:yt(d,i)}});return e.disposeIntermediateTensorInfo(g),x}return g}},q$={kernelName:"Any",backendName:"cpu",kernelFunc:function j$(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;ce(r,"any");const i=Te(o,r.shape);let l=i;const u=xt(l,r.shape.length);let c=r;null!=u&&(c=Sn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Nt(l.length,r.shape.length)),Mt("any",l,c.shape.length);const[d,h]=At(c.shape,l),p=V(h),f=Ht(V(d),c.dtype),m=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let v=m[x];for(let b=0;b<p;++b){const w=m[x+b];v=v||w}f[y]=v}null!=u&&e.disposeIntermediateTensorInfo(c);const g=e.makeTensorInfo(d,c.dtype,f);if(a){const x=ut({inputs:{x:g},backend:e,attrs:{shape:yt(d,i)}});return e.disposeIntermediateTensorInfo(g),x}return g}},X$={kernelName:Ba,backendName:"cpu",kernelFunc:function K$(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;ce(r,"argMax");let a=Te(o,r.shape);const i=xt(a,r.shape.length);let l=r;const u=[];null!=i&&(l=Sn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Nt(a.length,l.shape.length)),a=[a[0]],Mt("argMax",a,l.shape.length);const[c,d]=At(l.shape,a),p=Ht(V(c),"int32"),f=V(d),m=e.data.get(l.dataId).values;for(let g=0;g<p.length;++g){const y=g*f;let x=m[y],v=0;for(let b=0;b<f;++b){const w=m[y+b];w>x&&(x=w,v=b)}p[g]=v}return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(c,"int32",p)}},Y$={kernelName:Wa,backendName:"cpu",kernelFunc:function Z$(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;ce(r,"argMin");let a=Te(o,r.shape);const i=xt(a,r.shape.length);let l=r;const u=[];null!=i&&(l=Sn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Nt(a.length,l.shape.length)),a=[a[0]],Mt("argMin",a,l.shape.length);const[c,d]=At(l.shape,a),p=Ht(V(c),"int32"),f=V(d),m=e.data.get(l.dataId).values;for(let g=0;g<p.length;++g){const y=g*f;let x=m[y],v=0;for(let b=0;b<f;++b){const w=m[y+b];w<x&&(x=w,v=b)}p[g]=v}return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(c,"int32",p)}},J$=He(ao,n=>Math.asin(n)),Q$={kernelName:ao,backendName:"cpu",kernelFunc:J$},eE=He(lo,n=>Math.asinh(n)),tE={kernelName:lo,backendName:"cpu",kernelFunc:eE},nE=He(uo,n=>Math.atan(n)),sE={kernelName:uo,backendName:"cpu",kernelFunc:nE},rE=Ct((n,t)=>Math.atan2(n,t)),oE=Ot(ho,rE),aE={kernelName:ho,backendName:"cpu",kernelFunc:oE},iE=He(co,n=>Math.atanh(n)),lE={kernelName:co,backendName:"cpu",kernelFunc:iE};function Zh(n,t,e,s,r,o){const a=r.strideHeight,i=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,d=r.effectiveFilterWidth,h=r.padInfo.top,p=r.padInfo.left,f="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Ae(r.outShape,e),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],x=r.outShape[2]*r.outShape[3],v=r.outShape[3];for(let b=0;b<r.batchSize;++b){const w=b*y,k=b*s[0];for(let N=0;N<r.inChannels;++N)for(let S=0;S<r.outHeight;++S){const _=S*a-h,A=Math.max(0,_),z=Math.min(r.inHeight,c+_),U=w+S*x;for(let G=0;G<r.outWidth;++G){const H=G*i-p,W=Math.max(0,H),B=Math.min(r.inWidth,d+H);let K=f,j=0,X=0;for(let Q=A;Q<z;Q+=l){const ne=k+Q*s[1];for(let se=W;se<B;se+=u){const le=n[ne+se*s[2]+N];"max"===o&&le>K?K=le:"avg"===o&&(j+=le,X++)}if(isNaN(K))break}g[U+G*v+N]="avg"===o?j/X:K}}}return m}function Py(n,t,e,s,r=!1,o=!1){const a=Ae(s.outShape,"int32"),i=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,d=s.effectiveFilterHeight,h=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,m=Ae(t,e,n);for(let g=0;g<s.batchSize;++g)for(let y=0;y<s.inChannels;++y)for(let x=0;x<s.outHeight;++x){const v=x*i-p;let b=v;for(;b<0;)b+=u;const w=Math.min(s.inHeight,d+v);for(let k=0;k<s.outWidth;++k){const N=k*l-f;let S=N;for(;S<0;)S+=c;const _=Math.min(s.inWidth,h+N);let A=Number.NEGATIVE_INFINITY,z=-1;for(let U=b;U<w;U+=u){const G=U-v;for(let H=S;H<_;H+=c){const W=H-N,B=m.get(g,U,H,y);B>A&&(A=B,z=r?o?((g*s.inHeight+U)*s.inWidth+H)*s.inChannels+y:(U*s.inWidth+H)*s.inChannels+y:G*h+W)}}a.set(z,g,x,k,y)}}return a}function Ly(n,t,e,s,r,o){const a=r.strideDepth,i=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,d=r.dilationWidth,h=r.effectiveFilterDepth,p=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,x="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,v=Ae(r.outShape,e),b=v.values,w=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],k=r.outShape[2]*r.outShape[3]*r.outShape[4],N=r.outShape[3]*r.outShape[4],S=r.outShape[4];for(let _=0;_<r.batchSize;++_){const A=_*w,z=_*s[0];for(let U=0;U<r.inChannels;++U)for(let G=0;G<r.outDepth;++G){const H=G*a-m;let W=H;for(;W<0;)W+=u;const B=Math.min(r.inDepth,h+H),K=A+G*k;for(let j=0;j<r.outHeight;++j){const X=j*i-g;let Y=X;for(;Y<0;)Y+=c;const Q=Math.min(r.inHeight,p+X),ne=K+j*N;for(let se=0;se<r.outWidth;++se){const re=se*l-y;let le=re;for(;le<0;)le+=d;const oe=Math.min(r.inWidth,f+re),fe=ne+se*S;let xe=x,be=0,_e=0;for(let je=W;je<B;je+=u){const pt=z+je*s[1];for(let rt=Y;rt<Q;rt+=c){const nt=pt+rt*s[2];for(let st=le;st<oe;st+=d){const vt=n[nt+st*s[3]+U];if("max"===o&&vt>xe?xe=vt:"avg"===o&&(be+=vt,_e++),isNaN(xe))break}if(isNaN(xe))break}if(isNaN(xe))break}b[fe+U]="avg"===o?be/_e:xe}}}}return v}const dE={kernelName:Ga,backendName:"cpu",kernelFunc:function cE(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;ce(r,"avgPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(mt(a,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=yn(r.shape,o,a,1,i,l);let d;if(1===c.filterWidth&&1===c.filterHeight&&Se(c.inShape,c.outShape))d=Qn({inputs:{x:r},backend:e});else{const h=e.data.get(r.dataId).values,p=Ce(r.shape),f=Zh(h,0,r.dtype,p,c,"avg");d=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return d}},pE={kernelName:Ua,backendName:"cpu",kernelFunc:function hE(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u,dilations:c}=s;ce(r,"avgPool3d");let d=c;null==d&&(d=[1,1,1]);const h=rs(r.shape,o,a,d,i,l,u),f=Ly(e.data.get(r.dataId).values,0,r.dtype,Ce(r.shape),h,"avg");return e.makeTensorInfo(f.shape,"float32",f.values)}},mE={kernelName:Eu,backendName:"cpu",kernelFunc:function fE(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,{filterSize:a,strides:i,pad:l,dilations:u,dimRoundingMode:c}=s;ce([r,o],"avgPool3DGrad");const d=rs(o.shape,a,i,u,l,c),h=d.strideDepth,p=d.strideHeight,f=d.strideWidth,m=d.filterDepth,g=d.filterHeight,y=d.filterWidth,x=d.dilationDepth,v=d.dilationHeight,b=d.dilationWidth,w=d.effectiveFilterDepth,k=d.effectiveFilterHeight,N=d.effectiveFilterWidth,S=w-1-d.padInfo.front,_=N-1-d.padInfo.left,A=k-1-d.padInfo.top,z=Ae(o.shape,"float32"),U=1/(m*g*y),G=e.bufferSync(r);for(let H=0;H<d.batchSize;++H)for(let W=0;W<d.inChannels;++W)for(let B=0;B<d.inDepth;++B)for(let K=0;K<d.inHeight;++K)for(let j=0;j<d.inWidth;++j){const X=B-S,Y=K-A,Q=j-_;let ne=0;for(let se=0;se<w;se+=x){const re=(X+se)/h;if(!(re<0||re>=d.outDepth||Math.floor(re)!==re))for(let le=0;le<k;le+=v){const oe=(Y+le)/p;if(!(oe<0||oe>=d.outHeight||Math.floor(oe)!==oe))for(let fe=0;fe<N;fe+=b){const xe=(Q+fe)/f;xe<0||xe>=d.outWidth||Math.floor(xe)!==xe||(ne+=G.get(H,re,oe,xe,W))}}}z.set(ne*U,H,B,K,j,W)}return e.makeTensorInfo(z.shape,z.dtype,z.values)}},yE={kernelName:$u,backendName:"cpu",kernelFunc:function gE(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o;ce([r,o],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=yn(a.shape,i,l,1,u),d=c.strideHeight,h=c.strideWidth,p=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,x=c.effectiveFilterWidth,v=x-1-c.padInfo.left,b=y-1-c.padInfo.top,w=Ae(a.shape,"float32"),k=1/(p*f),N=e.data.get(r.dataId).values,S=Ae(r.shape,"float32",N);for(let _=0;_<c.batchSize;++_)for(let A=0;A<c.inChannels;++A)for(let z=0;z<c.inHeight;++z)for(let U=0;U<c.inWidth;++U){const G=z-b,H=U-v;let W=0;for(let B=0;B<y;B+=m){const K=(G+B)/d;if(!(K<0||K>=c.outHeight||Math.floor(K)!==K))for(let j=0;j<x;j+=g){const X=(H+j)/h;X<0||X>=c.outWidth||Math.floor(X)!==X||(W+=S.get(_,K,X,A))}}w.set(W*k,_,z,U,A)}return e.makeTensorInfo(w.shape,w.dtype,w.values)}},bE={kernelName:si,backendName:"cpu",kernelFunc:function xE(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,scale:o,offset:a,mean:i,variance:l}=t;C(i.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),C(null==a||i.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),C(null==o||i.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),ce([r,i,l,o,a],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=e.data.get(r.dataId).values,d=e.data.get(i.dataId).values,h=e.data.get(l.dataId).values,p=o?e.data.get(o.dataId).values:new Float32Array([1]),f=a?e.data.get(a.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=p.length,x=h.length,v=d.length;let b=0,w=0,k=0,N=0;for(let S=0;S<c.length;++S)m[S]=f[b++]+(c[S]-d[w++])*p[k++]/Math.sqrt(h[N++]+u),b>=g&&(b=0),w>=v&&(w=0),k>=y&&(k=0),N>=x&&(N=0);return e.makeTensorInfo(r.shape,r.dtype,m)}};function My(n,t,e,s,r){const o=Rc(s,t,e),a=V(e),i=Ce(s);if(o){const d=Oc(t,i);return"string"===r?n.slice(d,d+a):n.subarray(d,d+a)}const u=Ae(s,r,"string"===r?Vd(n):n),c=Ae(e,r);for(let d=0;d<c.size;++d){const h=c.indexToLoc(d),p=h.map((f,m)=>f+t[m]);c.set(u.get(...p),...h)}return"string"===r?pm(c.values):c.values}function ar(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,size:a}=s;ce(r,"slice");const[i,l]=sl(r,o,a);Ac(r,i,l);const c=My(e.data.get(r.dataId).values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,c)}const wE={kernelName:Ai,backendName:"cpu",kernelFunc:ar},NE={kernelName:ja,backendName:"cpu",kernelFunc:function vE(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,crops:a}=s;ce([r],"batchToSpaceND");const i=o.reduce((y,x)=>y*x),l=da(r.shape,o,i),u=ha(l.length,o.length),c=pa(r.shape,o,i),d=_d(a,o.length),h=$d(c,a,o.length),p=ut({inputs:{x:r},backend:e,attrs:{shape:l}}),f=Sn({inputs:{x:p},backend:e,attrs:{perm:u}}),m=ut({inputs:{x:f},backend:e,attrs:{shape:c}}),g=ar({inputs:{x:m},backend:e,attrs:{begin:d,size:h}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(m),g}};function Yh(n,t,e,s,r){const o=V(s),a=Ht(r,e);for(let i=0;i<n.length;i++){const l=n[i];if(l<0)throw new Error("Input x must be non-negative!");l>=r||(a[l]+=o>0?t[i]:1)}return a}function zy(n,t,e,s=!1){const r=n.shape[0],o=n.shape[1],a=Ae([r,e],t.dtype);for(let i=0;i<r;i++)for(let l=0;l<o;l++){const u=n.get(i,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||a.set(s?1:t.size>0?a.get(i,u)+t.get(i,l):a.get(i,u)+1,i,u)}return a}const kE={kernelName:Ap,backendName:"cpu",kernelFunc:function CE(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a}=s,u=Yh(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,u)}};function Vr(n){return(t,e,s)=>{const r=Ut(e,t.length);for(let o=0;o<t.length;++o)r[o]=n(t[o],s);return r}}const Vy=Vr(n=>Math.ceil(n)),IE=zr(fo,Vy),SE={kernelName:fo,backendName:"cpu",kernelFunc:IE},TE=He(mo,(n,t)=>n>t.clipValueMax?t.clipValueMax:n<t.clipValueMin?t.clipValueMin:n),_E={kernelName:mo,backendName:"cpu",kernelFunc:TE},$E={kernelName:qa,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend,s=new Float32Array(V(t.shape)),r=e.data.get(t.dataId),a=r.complexTensorInfos.imag,i=e.data.get(r.complexTensorInfos.real.dataId).values,l=e.data.get(a.dataId).values;for(let u=0;u<i.length;u++)s[u]=Math.hypot(i[u],l[u]);return e.makeOutput(s,t.shape,"float32")}};function By(n,t,e,s){const r=dr(e,V(t));if(s&&"string"!==e){let o=0;n.forEach(a=>{const i=V(a.shape);r.set(a.vals,o),o+=i})}else{let o=0;n.forEach(a=>{const i="string"===e?Vd(a.vals):a.vals;let l=0;for(let u=0;u<a.shape[0];++u){const c=u*t[1]+o;for(let d=0;d<a.shape[1];++d)r[c+d]=i[l++]}o+=a.shape[1]})}return r}function Br(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.imag,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const EE={kernelName:ju,backendName:"cpu",kernelFunc:Br};function Wr(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,o=Te(r,t[0].shape)[0];let a=us(t.map(m=>m.shape),o);if(0===V(a))return e.makeTensorInfo(a,t[0].dtype,[]);const i=t.filter(m=>V(m.shape)>0);if(1===i.length)return Qn({inputs:{x:i[0]},backend:e});if(Id(i.map(m=>m.shape),o),"complex64"===i[0].dtype){const m=i.map(b=>or({inputs:{input:b},backend:e})),g=i.map(b=>Br({inputs:{input:b},backend:e})),y=Wr({inputs:m,backend:e,attrs:{axis:o}}),x=Wr({inputs:g,backend:e,attrs:{axis:o}}),v=rn({inputs:{real:y,imag:x},backend:e});return m.forEach(b=>e.disposeIntermediateTensorInfo(b)),g.forEach(b=>e.disposeIntermediateTensorInfo(b)),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),v}const u=i.map(m=>{const g=V(m.shape.slice(o));return ut({inputs:{x:m},backend:e,attrs:{shape:[-1,g]}})}),c=u.map(m=>({vals:e.data.get(m.dataId).values,shape:m.shape}));a=us(u.map(m=>m.shape),1);const h=By(c,a,t[0].dtype,1===u[0].shape[0]),p=us(i.map(m=>m.shape),o),f=e.makeTensorInfo(p,t[0].dtype,h);return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),f}const DE={kernelName:Ka,backendName:"cpu",kernelFunc:Wr};function Wy(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s;ce([r,o],"conv2d");const d=os(l),h=Dt(r.shape,o.shape,a,u,i,c,!1,d),p=h.filterHeight,f=h.filterWidth,m=h.dilationHeight,g=h.dilationWidth,y=h.padInfo.left,x=h.padInfo.top,v="channelsLast"===h.dataFormat,b=new jt(h.outShape,r.dtype),w=Ce(r.shape),k=Ce(o.shape),N=w[0],S=v?w[1]:w[2],_=v?w[2]:1,A=v?1:w[1],z=b.strides[0],U=v?b.strides[1]:b.strides[2],G=v?b.strides[2]:1,H=v?1:b.strides[1],W=e.data.get(r.dataId).values,B=e.data.get(o.dataId).values,K=b.values;for(let j=0;j<h.batchSize;++j){const X=j*N,Y=j*z;for(let Q=0;Q<h.outHeight;++Q){const ne=Y+Q*U,se=Q*h.strideHeight-x;for(let re=0;re<p;++re){const le=se+re*m;if(le<0||le>=h.inHeight)continue;const oe=re*k[0],fe=X+le*S;for(let xe=0;xe<h.outWidth;++xe){const be=ne+xe*G,_e=xe*h.strideWidth-y;for(let Oe=0;Oe<f;++Oe){const je=_e+Oe*g;if(je<0||je>=h.inWidth)continue;const rt=fe+je*_;let nt=oe+Oe*k[1];for(let st=0;st<h.inChannels;++st){const ot=W[rt+st*A];for(let vt=0;vt<h.outChannels;++vt)K[be+vt*H]+=ot*B[nt+vt];nt+=h.outChannels}}}}}}return e.makeTensorInfo(b.shape,b.dtype,K)}const AE={kernelName:Xa,backendName:"cpu",kernelFunc:Wy},OE={kernelName:Au,backendName:"cpu",kernelFunc:function RE(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;ce([r,o],"conv2dBackpropFilter");const d=os(l),h=Dt(r.shape,c,a,1,i,u,!1,d),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:g}=h,y="channelsLast"===h.dataFormat,x=new jt(h.filterShape,"float32"),v=h.padInfo.left,b=h.padInfo.top,w=e.data.get(r.dataId).values,k=e.data.get(o.dataId).values,N=new jt(r.shape,r.dtype,w),S=new jt(o.shape,o.dtype,k);for(let _=0;_<m;++_){const A=Math.max(0,Math.ceil((b-_)/p)),z=Math.min(h.outHeight,(h.inHeight+b-_)/p);for(let U=0;U<g;++U){const G=Math.max(0,Math.ceil((v-U)/f)),H=Math.min(h.outWidth,(h.inWidth+v-U)/f);for(let W=0;W<h.inChannels;++W)for(let B=0;B<h.outChannels;++B){let K=0;for(let j=0;j<h.batchSize;++j)for(let X=A;X<z;++X){const Y=_+X*p-b;for(let Q=G;Q<H;++Q){const ne=U+Q*f-v;K+=y?N.get(j,Y,ne,W)*S.get(j,X,Q,B):N.get(j,W,Y,ne)*S.get(j,B,X,Q)}}x.set(K,_,U,W,B)}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},PE={kernelName:Za,backendName:"cpu",kernelFunc:function FE(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{inputShape:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s;ce([r,o],"conv2dBackpropInput");const d=Ce(o.shape),h=Ce(r.shape);let p=os(u);const f=Dt(a,o.shape,i,1,l,c,!1,p),m=new jt(f.inShape,"float32"),g=m.values,y=e.data.get(r.dataId).values,x=e.data.get(o.dataId).values,[v,b,w]=d,{batchSize:k,filterHeight:N,filterWidth:S,inChannels:_,inHeight:A,inWidth:z,outChannels:U,outHeight:G,outWidth:H,strideHeight:W,strideWidth:B}=f;p=f.dataFormat;const K=N-1-f.padInfo.top,j=S-1-f.padInfo.left,X="channelsLast"===p,Y=m.strides[0],Q=X?m.strides[1]:m.strides[2],ne=X?m.strides[2]:1,se=X?1:m.strides[1],re=h[0],le=X?h[1]:h[2],oe=X?h[2]:1,fe=X?1:h[1];for(let xe=0;xe<k;++xe)for(let be=0;be<_;++be)for(let _e=0;_e<A;++_e){const Oe=_e-K,je=Math.max(0,Math.ceil(Oe/W)),pt=Math.min(G,(N+Oe)/W);for(let rt=0;rt<z;++rt){const nt=rt-j,st=Math.max(0,Math.ceil(nt/B)),ot=Math.min(H,(S+nt)/B);let vt=0;for(let Bt=je;Bt<pt;++Bt){const ts=Bt*W-Oe;for(let pn=st;pn<ot;++pn){const zn=re*xe+le*Bt+oe*pn,ms=v*(N-1-ts)+b*(S-1-(pn*B-nt))+w*be;for(let Fs=0;Fs<U;++Fs)vt+=y[zn+fe*Fs]*x[ms+Fs]}}g[Y*xe+Q*_e+ne*rt+se*be]=vt}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}},ME={kernelName:Ya,backendName:"cpu",kernelFunc:function LE(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s;ce([r,o],"conv3d");const u=bs(r.shape,o.shape,a,l,i),{filterDepth:c,filterHeight:d,filterWidth:h,dilationDepth:p,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,x=g.left,v=g.top,b=new jt(u.outShape,r.dtype),w=e.data.get(r.dataId).values,k=e.data.get(o.dataId).values,N=b.values,S=Ce(r.shape),_=Ce(o.shape);for(let A=0;A<u.batchSize;++A){const z=A*S[0],U=A*b.strides[0];for(let G=0;G<u.outDepth;++G){const H=U+G*b.strides[1],W=G*u.strideDepth-y;for(let B=0;B<c;++B){const K=W+B*p;if(K<0||K>=u.inDepth)continue;const j=B*_[0],X=z+K*S[1];for(let Y=0;Y<u.outHeight;++Y){const Q=H+Y*b.strides[2],ne=Y*u.strideHeight-v;for(let se=0;se<d;++se){const re=ne+se*f;if(re<0||re>=u.inHeight)continue;const le=j+se*_[1],oe=X+re*S[2];for(let fe=0;fe<u.outWidth;++fe){const xe=Q+fe*u.outChannels,be=fe*u.strideWidth-x;for(let _e=0;_e<h;++_e){const Oe=be+_e*m;if(Oe<0||Oe>=u.inWidth)continue;const pt=oe+Oe*u.inChannels;let rt=le+_e*_[2];for(let nt=0;nt<u.inChannels;++nt){const st=w[pt+nt];for(let ot=0;ot<u.outChannels;++ot)N[xe+ot]+=st*k[rt+ot];rt+=u.outChannels}}}}}}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}},VE={kernelName:Ru,backendName:"cpu",kernelFunc:function zE(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,filterShape:l}=s;ce([r,o],"conv3dBackpropFilterV2");const u=Ce(r.shape),c=Ce(o.shape),d=bs(r.shape,l,a,1,i),h=d.strideDepth,p=d.strideHeight,f=d.strideWidth,m=d.filterDepth,g=d.filterHeight,y=d.filterWidth,x=new jt(d.filterShape,"float32"),v=x.values,[b,w,k,N]=x.strides,S=e.data.get(o.dataId).values,[_,A,z,U]=c,G=e.data.get(r.dataId).values,[H,W,B,K]=u,j=d.padInfo.front,X=d.padInfo.left,Y=d.padInfo.top;for(let Q=0;Q<m;++Q){const ne=Math.max(0,Math.ceil((j-Q)/h)),se=Math.min(d.outDepth,(d.inDepth+j-Q)/h),re=Q*b;for(let le=0;le<g;++le){const oe=Math.max(0,Math.ceil((Y-le)/p)),fe=Math.min(d.outHeight,(d.inHeight+Y-le)/p),xe=le*w+re;for(let be=0;be<y;++be){const _e=Math.max(0,Math.ceil((X-be)/f)),Oe=Math.min(d.outWidth,(d.inWidth+X-be)/f),je=be*k+xe;for(let pt=0;pt<d.inChannels;++pt){const rt=pt*N+je;for(let nt=0;nt<d.outChannels;++nt){let st=0;for(let ot=0;ot<d.batchSize;++ot){const vt=ot*H,fs=ot*_;for(let Bt=ne;Bt<se;++Bt){const pn=(Q+Bt*h-j)*W+vt,cr=Bt*A+fs;for(let zn=oe;zn<fe;++zn){const Fs=(le+zn*p-Y)*B+pn,Ps=zn*z+cr;for(let Ls=_e;Ls<Oe;++Ls)st+=G[(be+Ls*f-X)*K+Fs+pt]*S[Ls*U+Ps+nt]}}}v[rt+nt]=st}}}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},WE={kernelName:Ou,backendName:"cpu",kernelFunc:function BE(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{pad:a,strides:i,inputShape:l}=s;ce([r],"conv3dBackpropInputV2");const u=Ce(r.shape),c=Ce(o.shape),d=bs(l,o.shape,i,1,a),h=new jt(d.inShape,"float32"),p=h.values,[f,m,g,y]=h.strides,x=e.data.get(r.dataId).values,[v,b,w,k]=u,N=e.data.get(o.dataId).values,[S,_,A,z]=c,{batchSize:U,filterDepth:G,filterHeight:H,filterWidth:W,inChannels:B,inDepth:K,inHeight:j,inWidth:X,outChannels:Y,outDepth:Q,outHeight:ne,outWidth:se,strideDepth:re,strideHeight:le,strideWidth:oe}=d,fe=G-1-d.padInfo.front,xe=H-1-d.padInfo.top,be=W-1-d.padInfo.left;for(let _e=0;_e<U;++_e)for(let Oe=0;Oe<B;++Oe)for(let je=0;je<K;++je){const pt=je-fe,rt=Math.max(0,Math.ceil(pt/re)),nt=Math.min(Q,(G+pt)/re);for(let st=0;st<j;++st){const ot=st-xe,vt=Math.max(0,Math.ceil(ot/le)),fs=Math.min(ne,(H+ot)/le);for(let Bt=0;Bt<X;++Bt){const ts=Bt-be,pn=Math.max(0,Math.ceil(ts/oe)),cr=Math.min(se,(W+ts)/oe);let zn=0;for(let ms=rt;ms<nt;++ms){const Fs=ms*re-pt;for(let Ps=vt;Ps<fs;++Ps){const Ls=Ps*le-ot;for(let za=pn;za<cr;++za){const vp=v*_e+b*ms+w*Ps+k*za,MW=S*(G-1-Fs)+_*(H-1-Ls)+A*(W-1-(za*oe-ts))+z*Oe;for(let wu=0;wu<Y;++wu)zn+=x[vp+wu]*N[MW+wu]}}}p[f*_e+m*je+g*st+y*Bt+Oe]=zn}}}return e.makeTensorInfo(h.shape,h.dtype,h.values)}},GE=He(go,n=>Math.cos(n)),UE={kernelName:go,backendName:"cpu",kernelFunc:GE},HE=He(yo,n=>Math.cosh(n)),jE={kernelName:yo,backendName:"cpu",kernelFunc:HE},KE={kernelName:Fu,backendName:"cpu",kernelFunc:function qE(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:o,boxInd:a}=t,{cropSize:i,method:l,extrapolationValue:u}=s,[c,d,h,p]=r.shape,f=o.shape[0],[m,g]=i,y=Ae([f,m,g,p],"float32"),x=e.data.get(o.dataId).values,v=e.data.get(a.dataId).values,b=e.data.get(r.dataId).values,w=Ce(r.shape),k=Ce(y.shape);for(let N=0;N<f;N++){const S=4*N,_=x[S],A=x[S+1],z=x[S+2],U=x[S+3],G=v[N];if(G>=c)continue;const H=m>1?(z-_)*(d-1)/(m-1):0,W=g>1?(U-A)*(h-1)/(g-1):0;for(let B=0;B<m;B++){const K=m>1?_*(d-1)+B*H:.5*(_+z)*(d-1);if(K<0||K>d-1)for(let j=0;j<g;j++)for(let X=0;X<p;X++)y.values[X+j*k[2]+B*k[1]+N*k[0]]=u;else if("bilinear"===l){const j=Math.floor(K),X=Math.ceil(K),Y=K-j;for(let Q=0;Q<g;Q++){const ne=g>1?A*(h-1)+Q*W:.5*(A+U)*(h-1);if(ne<0||ne>h-1){for(let oe=0;oe<p;oe++)y.values[oe+Q*k[2]+B*k[1]+N*k[0]]=u;continue}const se=Math.floor(ne),re=Math.ceil(ne),le=ne-se;for(let oe=0;oe<p;oe++){let fe=oe+se*w[2]+j*w[1]+G*w[0];const xe=b[fe];fe=oe+re*w[2]+j*w[1]+G*w[0];const be=b[fe];fe=oe+se*w[2]+X*w[1]+G*w[0];const _e=b[fe];fe=oe+re*w[2]+X*w[1]+G*w[0];const Oe=b[fe],je=xe+(be-xe)*le;fe=oe+Q*k[2]+B*k[1]+N*k[0],y.values[fe]=je+(_e+(Oe-_e)*le-je)*Y}}}else for(let j=0;j<g;++j){const X=g>1?A*(h-1)+j*W:.5*(A+U)*(h-1);if(X<0||X>h-1){for(let ne=0;ne<p;ne++)y.values[ne+j*k[2]+B*k[1]+N*k[0]]=u;continue}const Y=Math.round(X),Q=Math.round(K);for(let ne=0;ne<p;ne++)y.values[ne+j*k[2]+B*k[1]+N*k[0]]=b[ne+Y*w[2]+Q*w[1]+G*w[0]]}}}return e.makeTensorInfo(y.shape,y.dtype,y.values)}},ZE={kernelName:Ja,backendName:"cpu",kernelFunc:function XE(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;ce(r,"cumsum");const l=xt([o],r.shape.length);let u=r;null!=l&&(u=Sn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=Nt(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const d=ln(u.dtype,"int32"),h=Ht(V(u.shape),d),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=i?(y,x)=>y+f-x-1:(y,x)=>y+x;for(let y=0;y<p.length;y+=f)for(let x=0;x<f;x++){const v=m(y,x);if(0===x)h[v]=a?0:p[v];else{const b=m(y,x-1);h[v]=a?p[b]+h[b]:p[v]+h[b]}}const g=e.makeTensorInfo(u.shape,d,h);if(null!=l){const x=Sn({inputs:{x:g},backend:e,attrs:{perm:Sr(l)}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(u),x}return g}},JE={kernelName:Rp,backendName:"cpu",kernelFunc:function YE(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a,binaryOutput:i}=s;if(1===r.shape.length){const c=Yh(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,c)}if(2===r.shape.length){const c=zy(e.bufferSync(r),e.bufferSync(o),a,i);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},eD={kernelName:Pu,backendName:"cpu",kernelFunc:function QE(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:o,dataFormat:a}=s;C("NHWC"===a,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${a}`),C(o>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${o}`);const i=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],d=l*o,h=u*o,p=c/(o*o),f=e.data.get(r.dataId).values,m=new Float32Array(i*d*h*p);let g=0;for(let y=0;y<i;++y)for(let x=0;x<d;++x){const v=Math.floor(x/o),b=x%o;for(let w=0;w<h;++w){const k=Math.floor(w/o),S=(b*o+w%o)*p;for(let _=0;_<p;++_)m[g++]=f[_+S+c*(k+u*(v+l*y))]}}return e.makeTensorInfo([i,d,h,p],r.dtype,m)}};function Gy(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l,dimRoundingMode:u}=s;ce([r,o],"depthwiseConv2DNative");const c=Ce(r.shape),d=Ce(o.shape);let h=l;null==h&&(h=[1,1]),C(mt(a,h),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${h}'`);const p=Dt(r.shape,o.shape,a,h,i,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:x}=p,v=x.left,b=x.top,w=p.outChannels/p.inChannels,k=new jt(p.outShape,r.dtype),N=e.data.get(r.dataId).values,S=e.data.get(o.dataId).values,_=k.values;for(let A=0;A<p.batchSize;++A){const z=A*c[0],U=A*k.strides[0];for(let G=0;G<p.outHeight;++G){const H=U+G*k.strides[1],W=G*p.strideHeight-v;for(let B=0;B<f;++B){const K=W+B*g;if(K<0||K>=p.inHeight)continue;const j=B*d[0],X=z+K*c[1];for(let Y=0;Y<p.outWidth;++Y){const Q=H+Y*k.strides[2],ne=Y*p.strideWidth-b;for(let se=0;se<m;++se){const re=ne+se*y;if(re<0||re>=p.inWidth)continue;const oe=X+re*p.inChannels;let fe=Q,xe=j+se*d[1];for(let be=0;be<p.inChannels;++be){const _e=N[oe+be];for(let Oe=0;Oe<w;++Oe)_[fe+Oe]+=_e*S[xe+Oe];fe+=w,xe+=w}}}}}}return e.makeTensorInfo(k.shape,k.dtype,k.values)}const tD={kernelName:Qa,backendName:"cpu",kernelFunc:Gy},sD={kernelName:Lu,backendName:"cpu",kernelFunc:function nD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s;ce([r,o],"depthwiseConv2dNativeBackpropFilter");const d=Dt(r.shape,c,a,i,l,u,!0),{strideHeight:h,strideWidth:p,filterHeight:f,filterWidth:m}=d,g=new jt(d.filterShape,"float32"),y=d.padInfo.left,x=d.padInfo.top,v=d.outChannels/d.inChannels,b=e.data.get(r.dataId).values,w=new jt(r.shape,r.dtype,b),k=e.data.get(o.dataId).values,N=new jt(o.shape,o.dtype,k);for(let S=0;S<f;++S){const _=Math.max(0,Math.ceil((x-S)/h)),A=Math.min(d.outHeight,(d.inHeight+x-S)/h);for(let z=0;z<m;++z){const U=Math.max(0,Math.ceil((y-z)/p)),G=Math.min(d.outWidth,(d.inWidth+y-z)/p);for(let H=0;H<d.outChannels;++H){const W=Math.trunc(H/v),B=H%v;let K=0;for(let j=0;j<d.batchSize;++j)for(let X=_;X<A;++X){const Y=S+X*h-x;for(let Q=U;Q<G;++Q)K+=w.get(j,Y,z+Q*p-y,W)*N.get(j,X,Q,H)}g.set(K,S,z,W,B)}}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}},oD={kernelName:Mu,backendName:"cpu",kernelFunc:function rD(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s;ce([r,o],"depthwiseConv2DNativeBackpropInput");const d=Ce(r.shape),h=Ce(o.shape),p=Dt(c,o.shape,a,i,l,u,!0),f=new jt(p.inShape,"float32"),m=f.values,[g,y,x]=f.strides,v=e.data.get(r.dataId).values,[b,w,k]=d,N=e.data.get(o.dataId).values,[S,_,A]=h,{batchSize:z,filterHeight:U,filterWidth:G,inChannels:H,inHeight:W,inWidth:B,outChannels:K,outHeight:j,outWidth:X,strideHeight:Y,strideWidth:Q}=p,ne=U-1-p.padInfo.top,se=G-1-p.padInfo.left,re=K/H;for(let le=0;le<z;++le)for(let oe=0;oe<H;++oe)for(let fe=0;fe<W;++fe){const xe=fe-ne,be=Math.max(0,Math.ceil(xe/Y)),_e=Math.min(j,(U+xe)/Y);for(let Oe=0;Oe<B;++Oe){const je=Oe-se,pt=Math.max(0,Math.ceil(je/Q)),rt=Math.min(X,(G+je)/Q);let nt=0;for(let st=be;st<_e;++st){const ot=st*Y-xe;for(let vt=pt;vt<rt;++vt){const Bt=b*le+w*st+k*vt,ts=S*(U-1-ot)+_*(G-1-(vt*Q-je))+A*oe;for(let pn=0;pn<re;++pn)nt+=v[Bt+(oe*re+pn)]*N[ts+pn]}}m[g*le+y*fe+x*Oe+oe]=nt}}return e.makeTensorInfo(f.shape,f.dtype,f.values)}},iD={kernelName:"Diag",backendName:"cpu",kernelFunc:function aD(n){const{inputs:t,backend:e}=n,{x:s}=t,r=V(s.shape),o=e.data.get(s.dataId).values,a=Ae([r,r],s.dtype),i=a.values;for(let u=0;u<o.length;u++)i[u*r+u]=o[u];const l=[...s.shape,...s.shape];return e.makeTensorInfo(l,a.dtype,a.values)}},lD={kernelName:ei,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r}=n,{strides:o,pad:a,dilations:i}=e,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,d=l.data.get(r.dataId).values,h=r.shape.length,{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:x,padInfo:v,strideHeight:b,strideWidth:w,filterHeight:k,filterWidth:N,dilationHeight:S,dilationWidth:_,outShape:A}=oa(s.shape,r.shape,o,a,"NHWC",i),z=V(A),U=A.length,G=dr(s.dtype,z);for(let W=0;W<p;++W)for(let B=0;B<y;++B){const K=B*b-v.top;for(let j=0;j<x;++j){const X=j*w-v.left;for(let Y=0;Y<g;++Y){let Q=Number.MIN_SAFE_INTEGER;for(let se=0;se<k;++se){const re=K+se*S;if(re>=0&&re<f)for(let le=0;le<N;++le){const oe=X+le*_;if(oe>=0&&oe<m){const fe=Wn([W,re,oe,Y],c,Ce(s.shape)),xe=Wn([se,le,Y],h,Ce(r.shape)),be=u[fe]+d[xe];be>Q&&(Q=be)}}}G[Wn([W,B,j,Y],U,Ce(A))]=Q}}}return{dataId:l.write(Vs(G,s.dtype),A,s.dtype),shape:A,dtype:s.dtype}}},uD={kernelName:Vu,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:o}=n,{strides:a,pad:i,dilations:l}=e,u=t,c=Dn(s.shape,u.data.get(s.dataId).values),d=Dn(r.shape,u.data.get(r.dataId).values),{batchSize:h,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:x,strideHeight:v,strideWidth:b,filterHeight:w,filterWidth:k,dilationHeight:N,dilationWidth:S,outShape:_}=oa(s.shape,r.shape,a,i,"NHWC",l);C(o.rank===_.length,()=>`Error in ${Vu}, dy must have the same rank as output ${_.length}, but got ${o.rank}`);const A=Dn(_,u.data.get(o.dataId).values),z=Ip(r.shape,r.dtype);for(let G=0;G<h;++G)for(let H=0;H<g;++H){const W=H*v-x.top;for(let B=0;B<y;++B){const K=B*b-x.left;for(let j=0;j<m;++j){let X=Number.MIN_SAFE_INTEGER,Y=0,Q=0;for(let ne=0;ne<w;++ne){const se=W+ne*N;if(se>=0&&se<p)for(let re=0;re<k;++re){const le=K+re*S;if(le>=0&&le<f){const oe=c[G][se][le][j]+d[ne][re][j];oe>X&&(X=oe,Y=ne,Q=re)}}}z[Y][Q][j]+=A[G][H][B][j]}}}return{dataId:u.write(Vs(z,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},cD={kernelName:zu,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:o}=n,{strides:a,pad:i,dilations:l}=e,u=t,c=Dn(s.shape,u.data.get(s.dataId).values),d=Dn(r.shape,u.data.get(r.dataId).values),{batchSize:h,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:x,strideHeight:v,strideWidth:b,filterHeight:w,filterWidth:k,dilationHeight:N,dilationWidth:S,outShape:_}=oa(s.shape,r.shape,a,i,"NHWC",l);C(o.rank===_.length,()=>`Error in ${zu}, dy must have the same rank as output ${_.length}, but got ${o.rank}`);const A=Dn(_,u.data.get(o.dataId).values),z=Ip(s.shape,s.dtype);for(let G=0;G<h;++G)for(let H=0;H<g;++H){const W=H*v-x.top;for(let B=0;B<y;++B){const K=B*b-x.left;for(let j=0;j<m;++j){let X=Number.MIN_SAFE_INTEGER,Y=W<0?0:W,Q=K<0?0:K;for(let ne=0;ne<w;++ne){const se=W+ne*N;if(se>=0&&se<p)for(let re=0;re<k;++re){const le=K+re*S;if(le>=0&&le<f){const oe=c[G][se][le][j]+d[ne][re][j];oe>X&&(X=oe,Y=se,Q=le)}}}z[G][Y][Q][j]+=A[G][H][B][j]}}}return{dataId:u.write(Vs(z,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},hD={kernelName:Bu,backendName:"cpu",kernelFunc:function dD(n){const{inputs:t,backend:e}=n,{dy:s,y:r}=t;ce([s,r],"eluGrad");const o=new Float32Array(V(r.shape)),a=e.data.get(r.dataId).values,i=e.data.get(s.dataId).values;for(let l=0;l<a.length;++l){const u=a[l];o[l]=u>=1?i[l]:i[l]*(u+1)}return e.makeTensorInfo(r.shape,"float32",o)}},pD=Ct((n,t)=>n===t?1:0),Uy=Ot(ti,pD,null,"bool"),fD={kernelName:ti,backendName:"cpu",kernelFunc:Uy},mD=Dd,gD=Ad,yD=Rd,xD=Od,bD=Fd,wD=Pd,vD=He(wo,n=>{const t=Math.sign(n),e=Math.abs(n),s=1/(1+mD*e);return t*(1-((((wD*s+bD)*s+xD)*s+yD)*s+gD)*s*Math.exp(-e*e))}),ND={kernelName:wo,backendName:"cpu",kernelFunc:vD},Hy=Vr(n=>Math.exp(n)),jy=zr(vo,Hy),CD={kernelName:vo,backendName:"cpu",kernelFunc:jy};function Ql(n){const{inputs:t,backend:e,attrs:s}=n,{input:r}=t,{dim:o}=s,a=r.shape.length,i=r.shape.slice();let l=o;return o<0&&(C(-(a+1)<=o,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),l=a+o+1),i.splice(l,0,1),ut({inputs:{x:r},backend:e,attrs:{shape:i}})}const kD={kernelName:ni,backendName:"cpu",kernelFunc:Ql},qy=Vr(n=>Math.expm1(n)),ID=zr(No,qy),SD={kernelName:No,backendName:"cpu",kernelFunc:ID},Jh=Ct((n,t)=>n*t),TD=Kh((n,t,e,s)=>({real:n*e-t*s,imag:n*s+t*e})),Qh=Ot(Oo,Jh,TD),_D={kernelName:Oo,backendName:"cpu",kernelFunc:Qh},$D=Ct((n,t)=>n/t),ep=Ot(xo,$D),tp={kernelName:xo,backendName:"cpu",kernelFunc:ep},Ky=Ct((n,t)=>n-t),ED=Kh((n,t,e,s)=>({real:n-e,imag:t-s})),np=Ot(Xo,Ky,ED),DD={kernelName:Xo,backendName:"cpu",kernelFunc:np};function Xy(n,t,e){const s=n.shape,r=s[0],o=s[1],a=e.data.get(n.dataId),i=a.complexTensorInfos.real,l=a.complexTensorInfos.imag,u=[r,o],c=V(u),d=Ut("float32",c),h=Ut("float32",c);for(let g=0;g<r;g++){const y=ar({inputs:{x:i},backend:e,attrs:{begin:[g,0],size:[1,o]}}),x=ar({inputs:{x:l},backend:e,attrs:{begin:[g,0],size:[1,o]}}),v=rn({inputs:{real:y,imag:x},backend:e}),{real:b,imag:w}=AD(v,t,e),k=cs(b,w);for(let N=0;N<o;N++){const S=Ld(k,N);d[g*o+N]=S.real,h[g*o+N]=S.imag}e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(v)}const p=e.makeTensorInfo(u,"float32",d),f=e.makeTensorInfo(u,"float32",h),m=rn({inputs:{real:p,imag:f},backend:e});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),m}function AD(n,t,e){const s=V(n.shape),r=e.data.get(n.dataId),o=e.data.get(r.complexTensorInfos.real.dataId).values,a=e.data.get(r.complexTensorInfos.imag.dataId).values;if(function RD(n){return 0==(n&n-1)}(s)){const i=sp(o,a,s,t,e),l=[n.shape[0],n.shape[1]];if(t){const u=e.makeTensorInfo(l,"float32",i.real),c=e.makeTensorInfo(l,"float32",i.imag),d=e.makeTensorInfo([],"float32",gs(s,"float32")),h=Qn({inputs:{x:d},backend:e}),p=tp.kernelFunc({inputs:{a:u,b:d},backend:e}),f=tp.kernelFunc({inputs:{a:c,b:h},backend:e}),m=e.data.get(p.dataId).values,g=e.data.get(f.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),{real:m,imag:g}}return i}{const l=function OD(n,t,e){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let o=0,a=0;for(let i=0;i<t;i++){const l=cm(r*i,t,e),u=Ld(n,i);o+=u.real*l.real-u.imag*l.imag,a+=u.real*l.imag+u.imag*l.real}e&&(o/=t,a/=t),lm(s,o,a,r)}return s}(cs(o,a),s,t);return om(l)}}function sp(n,t,e,s,r){if(1===e)return{real:n,imag:t};const o=cs(n,t),a=e/2,i=am(o),l=i.real,u=i.imag,c=[l.length],d=r.makeTensorInfo(c,"float32",l),h=r.makeTensorInfo(c,"float32",u),p=rn({inputs:{real:d,imag:h},backend:r}),f=im(o),m=f.real,g=f.imag,y=[m.length],x=r.makeTensorInfo(y,"float32",m),v=r.makeTensorInfo(y,"float32",g),b=rn({inputs:{real:x,imag:v},backend:r}),w=sp(l,u,a,s,r),k=w.real,N=w.imag,S=[k.length],_=r.makeTensorInfo(S,"float32",k),A=r.makeTensorInfo(S,"float32",N),z=rn({inputs:{real:_,imag:A},backend:r}),U=sp(m,g,a,s,r),G=U.real,H=U.imag,W=[G.length],B=r.makeTensorInfo(W,"float32",G),K=r.makeTensorInfo(W,"float32",H),j=rn({inputs:{real:B,imag:K},backend:r}),X=um(e,s),Y=[X.real.length],Q=r.makeTensorInfo(Y,"float32",X.real),ne=r.makeTensorInfo(Y,"float32",X.imag),se=rn({inputs:{real:Q,imag:ne},backend:r}),re=Qh({inputs:{a:se,b:j},backend:r}),le=Ea({inputs:{a:z,b:re},backend:r}),oe=np({inputs:{a:z,b:re},backend:r}),fe=or({inputs:{input:le},backend:r}),xe=or({inputs:{input:oe},backend:r}),be=Br({inputs:{input:le},backend:r}),_e=Br({inputs:{input:oe},backend:r}),Oe=Wr({inputs:[fe,xe],backend:r,attrs:{axis:0}}),je=Wr({inputs:[be,_e],backend:r,attrs:{axis:0}}),pt=r.data.get(Oe.dataId).values,rt=r.data.get(je.dataId).values;return r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(v),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(A),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(K),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(Q),r.disposeIntermediateTensorInfo(ne),r.disposeIntermediateTensorInfo(se),r.disposeIntermediateTensorInfo(re),r.disposeIntermediateTensorInfo(le),r.disposeIntermediateTensorInfo(oe),r.disposeIntermediateTensorInfo(fe),r.disposeIntermediateTensorInfo(be),r.disposeIntermediateTensorInfo(xe),r.disposeIntermediateTensorInfo(_e),r.disposeIntermediateTensorInfo(Oe),r.disposeIntermediateTensorInfo(je),{real:pt,imag:rt}}const PD={kernelName:"FFT",backendName:"cpu",kernelFunc:function FD(n){const{inputs:t,backend:e}=n,{input:s}=t,r=V(s.shape),o=s.shape[s.shape.length-1],i=ut({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),l=Xy(i,!1,e),u=ut({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}};function rp(n){const{backend:t,attrs:e}=n,{shape:s,value:r,dtype:o}=e,a=o||no(r),i=dr(a,V(s));return function MD(n,t,e){n.fill(t)}(i,r),t.makeTensorInfo(s,a,i)}const LD={kernelName:Gu,backendName:"cpu",kernelFunc:rp},zD={kernelName:Uu,backendName:"cpu",kernelFunc:({inputs:n,backend:e})=>{const{image:s}=n,r=e,o=Ut(s.dtype,V(s.shape)),[a,i,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let h=0;h<a;h++){const p=h*l*i*u;for(let f=0;f<i;f++){const m=f*(l*u);for(let g=0;g<l;g++){const y=g*u;for(let x=0;x<u;x++){const w=Math.round(l-[a,f,g,x][2]),k=p+m+y+x;let N=c[k];w>=0&&w<l&&(N=c[p+m+w*u+x]),o[k]=N}}}}return{dataId:r.write(o,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Zy=Vr(n=>Math.floor(n)),VD=zr(Co,Zy),BD={kernelName:Co,backendName:"cpu",kernelFunc:VD},WD=Ct((n,t)=>Math.floor(n/t)),GD=Ot(ko,WD,null,"int32"),UD={kernelName:ko,backendName:"cpu",kernelFunc:GD},jD={kernelName:Wi,backendName:"cpu",kernelFunc:function HD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:d,dimRoundingMode:h,activation:p,leakyreluAlpha:f}=s;let m=Wy({inputs:{x:r,filter:o},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:d,dimRoundingMode:h}});if(a){const g=m;m=Ea({inputs:{a:m,b:a},backend:e}),e.disposeIntermediateTensorInfo(g)}if(p){const g=m;m=qh(e,m,p,i,f),e.disposeIntermediateTensorInfo(g)}return m}},KD={kernelName:Gi,backendName:"cpu",kernelFunc:function qD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:d,dimRoundingMode:h,activation:p,leakyreluAlpha:f}=s;let m=Gy({inputs:{x:r,filter:o},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:d,dimRoundingMode:h}});if(a){const g=m;m=Ea({inputs:{a:m,b:a},backend:e}),e.disposeIntermediateTensorInfo(g)}if(p){const g=m;m=qh(e,m,p,i,f),e.disposeIntermediateTensorInfo(g)}return m}},ZD={kernelName:Fp,backendName:"cpu",kernelFunc:function XD(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,o=V(s.shape),a=r.shape,i=a[a.length-1],[l,u,c,d]=Ed(s,r);if(0===u)return e.makeTensorInfo(l,s.dtype,[]);const h=Ae([u,c],s.dtype),p=e.data.get(r.dataId).values,f=e.data.get(s.dataId).values;for(let m=0;m<u;m++){const g=[];let y=0;for(let x=0;x<i;x++){const v=p[m*i+x];y+=v*d[x],g.push(v)}if(y<0||y>=o/c)throw new Error(`Invalid indices: ${g} does not index into ${s.shape}`);for(let x=0;x<c;x++)h.values[m*c+x]=f[y*c+x]}return e.makeTensorInfo(l,h.dtype,h.values)}};function Yy(n,t,e){const s=Ae(e,n.dtype);for(let r=0;r<s.size;++r){const a=s.indexToLoc(r).slice(),u=t.locToIndex([a[0],a[2]]);a[2]=t.values[u];const c=n.locToIndex(a);s.values[r]=n.values[c]}return s}const JD={kernelName:ri,backendName:"cpu",kernelFunc:function YD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:o}=t,{axis:a,batchDims:i}=s;ce([r,o],"gatherV2");let l=i;null==i&&(l=0);const u=V(o.shape),d=zd(r,o,Te(a,r.shape)[0],l),h=ut({inputs:{x:r},backend:e,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),p=ut({inputs:{x:o},backend:e,attrs:{shape:[d.batchSize,u/d.batchSize]}}),f=[d.batchSize,d.outerSize,u/d.batchSize,d.sliceSize],m=e.bufferSync(p),y=Yy(e.bufferSync(h),m,f);return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(p),e.makeTensorInfo(d.outputShape,y.dtype,y.values)}},Jy=Ct((n,t)=>n>t?1:0),QD=Ot(oi,Jy,null,"bool"),eA={kernelName:oi,backendName:"cpu",kernelFunc:QD},tA=Ct((n,t)=>n>=t?1:0),nA=Ot(Io,tA,null,"bool"),sA={kernelName:Io,backendName:"cpu",kernelFunc:nA},oA={kernelName:Hu,backendName:"cpu",kernelFunc:function rA(n){const{inputs:t,backend:e}=n,{input:s}=t,r=V(s.shape),o=s.shape[s.shape.length-1],i=ut({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),l=Xy(i,!0,e),u=ut({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}},aA=He(So,n=>Number.isFinite(n)?1:0,"bool"),iA={kernelName:So,backendName:"cpu",kernelFunc:aA},lA=He(To,n=>Math.abs(n)===1/0?1:0,"bool"),uA={kernelName:To,backendName:"cpu",kernelFunc:lA},cA=He(_o,n=>Number.isNaN(n)?1:0,"bool"),dA={kernelName:_o,backendName:"cpu",kernelFunc:cA},Qy=Ct((n,t)=>n<t?1:0),hA=Ot(li,Qy,null,"bool"),pA={kernelName:li,backendName:"cpu",kernelFunc:hA},fA=Ct((n,t)=>n<=t?1:0),mA=Ot(ui,fA,null,"bool"),gA={kernelName:ui,backendName:"cpu",kernelFunc:mA};function ex(n,t,e){const s=(t-n)/(e-1),r=Ht(e,"float32");r[0]=n;for(let o=1;o<r.length;o++)r[o]=r[o-1]+s;return r}const xA={kernelName:Pp,backendName:"cpu",kernelFunc:function yA(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:o}=e,a=ex(s,r,o);return t.makeTensorInfo([a.length],"float32",a)}},tx=Vr(n=>Math.log(n)),bA=zr($o,tx),wA={kernelName:$o,backendName:"cpu",kernelFunc:bA},vA=He(Eo,n=>Math.log1p(n)),NA={kernelName:Eo,backendName:"cpu",kernelFunc:vA},CA=Ct((n,t)=>n&&t),kA=Ot(ci,CA,null,"bool"),IA={kernelName:ci,backendName:"cpu",kernelFunc:kA},SA=He(di,n=>n?0:1,"bool"),TA={kernelName:di,backendName:"cpu",kernelFunc:SA},_A=Ct((n,t)=>n||t),$A=Ot(hi,_A,null,"bool"),EA={kernelName:hi,backendName:"cpu",kernelFunc:$A},AA={kernelName:pi,backendName:"cpu",kernelFunc:function DA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:o,bias:a,alpha:i,beta:l}=s;ce(r,"LRN");const u=r.shape[3],c=u-1,d=e.data.get(r.dataId).values,h=V(r.shape),p=new Float32Array(h);function f(m){const g=m%u;let y=m-g+Math.max(0,g-o);const x=m-g+Math.min(g+o,c);let v=0;for(;y<=x;y++){const b=d[y];v+=b*b}return v}for(let m=0;m<h;m++){const g=f(m),y=d[m]*Math.pow(a+i*g,-l);p[m]=y}return e.makeTensorInfo(r.shape,r.dtype,p)}},OA={kernelName:qu,backendName:"cpu",kernelFunc:function RA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,y:o,dy:a}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s;ce(a,"LRNGrad");const d=V(a.shape),h=a.shape[3],p=e.data.get(a.dataId).values,f=e.data.get(r.dataId).values,m=e.data.get(o.dataId).values,g=new Float32Array(d),y=d;for(let x=0;x<y;x++){const v=x%h,b=x-v+Math.max(0,v-i),w=x-v+Math.min(h,v+i+1);let k=0;for(let N=b;N<w;N++)k+=Math.pow(f[N],2);k=u*k+l;for(let N=b;N<w;N++){let S=-2*u*c*f[N]*m[x]/k;x===N&&(S+=Math.pow(k,-c)),S*=p[x],g[N]+=S}}return e.makeTensorInfo(a.shape,r.dtype,g)}};function nx(n,t,e,s){const r=Ut(s,V(e));for(let o=0;o<r.length;++o){const a=o*t;let i=n[a];for(let l=0;l<t;++l){const u=n[a+l];u>i&&(i=u)}r[o]=i}return r}function sx(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:o,keepDims:a}=s,i=e;let l=r.shape;const u=l.length,c=Te(o,l);let d=c;const h=xt(d,u);let p=i.data.get(r.dataId).values;if(null!=h){const b=new Array(u);for(let w=0;w<b.length;w++)b[w]=l[h[w]];p=Xh(p,l,r.dtype,h,b),d=Nt(d.length,u),l=b}ce(r,"max"),Mt("max",d,u);const[f,m]=At(l,d),y=nx(p,V(m),f,r.dtype),x=i.write(y,f,r.dtype);let v=f;return a&&(v=yt(f,c)),{dataId:x,shape:v,dtype:r.dtype}}const FA={kernelName:fi,backendName:"cpu",kernelFunc:sx},rx=Ct((n,t)=>Math.max(n,t)),PA=Ot(Do,rx),LA={kernelName:Do,backendName:"cpu",kernelFunc:PA},zA={kernelName:mi,backendName:"cpu",kernelFunc:function MA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;ce(r,"maxPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(mt(a,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=yn(r.shape,o,a,1,i,l);let d;if(1===c.filterWidth&&1===c.filterHeight&&Se(c.inShape,c.outShape))d=Qn({inputs:{x:r},backend:e});else{const h=e.data.get(r.dataId).values,p=Ce(r.shape),f=Zh(h,0,r.dtype,p,c,"max");d=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return d}},BA={kernelName:gi,backendName:"cpu",kernelFunc:function VA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u,dilations:c}=s;ce(r,"maxPool3d");let d=c;null==d&&(d=[1,1,1]);const h=rs(r.shape,o,a,d,i,l,u),f=Ly(e.data.get(r.dataId).values,0,r.dtype,Ce(r.shape),h,"max");return e.makeTensorInfo(f.shape,"float32",f.values)}},GA={kernelName:Xu,backendName:"cpu",kernelFunc:function WA(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,{filterSize:a,strides:i,pad:l,dilations:u,dimRoundingMode:c}=s;ce([r,o],"maxPool3DGrad");const d=rs(o.shape,a,i,u,l,c),p=function uE(n,t){const e=Ae(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,o=t.strideWidth,a=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,d=t.effectiveFilterWidth,h=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const x=y*s-h;let v=x;for(;v<0;)v+=a;const b=Math.min(t.inDepth,u+x);for(let w=0;w<t.outHeight;++w){const k=w*r-p;let N=k;for(;N<0;)N+=i;const S=Math.min(t.inHeight,c+k);for(let _=0;_<t.outWidth;++_){const A=_*o-f;let z=A;for(;z<0;)z+=l;const U=Math.min(t.inWidth,d+A);let G=Number.NEGATIVE_INFINITY,H=-1;for(let W=v;W<b;W+=a){const B=W-x;for(let K=N;K<S;K+=i){const j=K-k;for(let X=z;X<U;X+=l){const Y=X-A,Q=n.get(m,W,K,X,g);Q>=G&&(G=Q,H=B*c*d+j*c+Y)}}}e.set(H,m,y,w,_,g)}}}return e}(e.bufferSync(o),d),f=d.strideDepth,m=d.strideHeight,g=d.strideWidth,y=d.dilationDepth,x=d.dilationHeight,v=d.dilationWidth,b=d.effectiveFilterDepth,w=d.effectiveFilterHeight,k=d.effectiveFilterWidth,N=b-1-d.padInfo.front,S=k-1-d.padInfo.left,_=w-1-d.padInfo.top,A=Ae(o.shape,"float32"),z=e.bufferSync(r);for(let U=0;U<d.batchSize;++U)for(let G=0;G<d.inChannels;++G)for(let H=0;H<d.inDepth;++H)for(let W=0;W<d.inHeight;++W)for(let B=0;B<d.inWidth;++B){const K=H-N,j=W-_,X=B-S;let Y=0;for(let Q=0;Q<b;Q+=y){const ne=(K+Q)/f;if(!(ne<0||ne>=d.outDepth||Math.floor(ne)!==ne))for(let se=0;se<w;se+=x){const re=(j+se)/m;if(!(re<0||re>=d.outHeight||Math.floor(re)!==re))for(let le=0;le<k;le+=v){const oe=(X+le)/g;if(oe<0||oe>=d.outWidth||Math.floor(oe)!==oe)continue;const be=b*w*k-1-p.get(U,ne,re,oe,G)===Q*w*k+se*k+le?1:0;0!==be&&(Y+=z.get(U,ne,re,oe,G)*be)}}}A.set(Y,U,H,W,B,G)}return e.makeTensorInfo(A.shape,A.dtype,A.values)}},HA={kernelName:Ku,backendName:"cpu",kernelFunc:function UA(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o,output:a}=t,i=o;ce([o,a],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:d}=s,h=yn(i.shape,l,u,1,c,d),p=e.data.get(i.dataId).values,f=Ae(h.outShape,i.dtype,Py(p,i.shape,i.dtype,h).values),m=h.strideHeight,g=h.strideWidth,y=h.dilationHeight,x=h.dilationWidth,v=h.effectiveFilterHeight,b=h.effectiveFilterWidth,w=b-1-h.padInfo.left,k=v-1-h.padInfo.top,N=Ae(i.shape,"float32"),S=e.data.get(r.dataId).values,_=Ae(r.shape,"float32",S);for(let A=0;A<h.batchSize;++A)for(let z=0;z<h.inChannels;++z)for(let U=0;U<h.inHeight;++U)for(let G=0;G<h.inWidth;++G){const H=U-k,W=G-w;let B=0;for(let K=0;K<v;K+=y){const j=(H+K)/m;if(!(j<0||j>=h.outHeight||Math.floor(j)!==j))for(let X=0;X<b;X+=x){const Y=(W+X)/g;if(Y<0||Y>=h.outWidth||Math.floor(Y)!==Y)continue;const se=v*b-1-f.get(A,j,Y,z)===K*b+X?1:0;0!==se&&(B+=_.get(A,j,Y,z)*se)}}N.set(B,A,U,G,z)}return e.makeTensorInfo(N.shape,N.dtype,N.values)}},qA={kernelName:Lp,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:o,pad:a,includeBatchInIndex:i}=t,l=e;ce(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=yn(s.shape,r,o,[1,1],a),[d,h]=function jA(n,t,e,s,r){const a=Zh(n,0,e,Ce(t),r,"max"),i=Py(n,t,e,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,i,c),p=l.write(d,c.outShape,s.dtype),f=l.write(h,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};function eu(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;let i;ce(r,"sum"),i="bool"===r.dtype?Ds({inputs:{x:r},backend:e,attrs:{dtype:"int32"}}):Qn({inputs:{x:r},backend:e});const l=i.shape.length,u=Te(o,i.shape),c=xt(u,l);let d=u,h=i;null!=c&&(h=Sn({inputs:{x:i},backend:e,attrs:{perm:c}}),d=Nt(d.length,l)),Mt("sum",d,h.shape.length);const[p,f]=At(h.shape,d);let g=Jl(e,p,ln(h.dtype,"int32"));const y=V(f),x=e.data.get(g.dataId).values,v=e.data.get(h.dataId).values;for(let b=0;b<x.length;++b){const w=b*y;let k=0;for(let N=0;N<y;++N)k+=v[w+N];x[b]=k}if(a){const w=g;g=ut({inputs:{x:g},backend:e,attrs:{shape:yt(g.shape,u)}}),e.disposeIntermediateTensorInfo(w)}return e.disposeIntermediateTensorInfo(i),null!=c&&e.disposeIntermediateTensorInfo(h),g}const KA={kernelName:Ri,backendName:"cpu",kernelFunc:eu},ZA={kernelName:yi,backendName:"cpu",kernelFunc:function XA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=Te(o,r.shape),c=V(At(r.shape,i)[1]),d=[],h=e.makeTensorInfo([],"float32",new Float32Array([c]));d.push(h);const p=Ds({inputs:{x:r},backend:e,attrs:{dtype:"float32"}});d.push(p);const f=ep({inputs:{a:p,b:h},backend:e});d.push(f);const m=eu({inputs:{x:f},backend:e,attrs:{axis:o,keepDims:a}});return d.forEach(g=>e.disposeIntermediateTensorInfo(g)),m}},JA={kernelName:xi,backendName:"cpu",kernelFunc:function YA(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;ce(r,"min");const i=Te(o,r.shape);let l=i;const u=xt(l,r.shape.length);let c=r;null!=u&&(c=Sn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Nt(l.length,r.shape.length)),Mt("min",l,c.shape.length);const[d,h]=At(c.shape,l),p=V(h),f=Ht(V(d),c.dtype),m=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let v=m[x];for(let b=0;b<p;++b){const w=m[x+b];w<v&&(v=w)}f[y]=v}null!=u&&e.disposeIntermediateTensorInfo(c);const g=e.makeTensorInfo(d,c.dtype,f);if(a){const x=ut({inputs:{x:g},backend:e,attrs:{shape:yt(d,i)}});return e.disposeIntermediateTensorInfo(g),x}return g}},ox=Ct((n,t)=>Math.min(n,t)),QA=Ot(Ao,ox),e2={kernelName:Ao,backendName:"cpu",kernelFunc:QA},n2={kernelName:bi,backendName:"cpu",kernelFunc:function t2(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,mode:a}=s;ce(r,"mirrorPad");const i=o.map((v,b)=>v[0]+r.shape[b]+v[1]),l=o.map(v=>v[0]),u=o.map((v,b)=>v[0]+r.shape[b]),c="reflect"===a?0:1,d=e.data.get(r.dataId).values,h=r.shape.length,p=Ce(r.shape),f=V(i),m=i.length,g=Ce(i),y=Ut(r.dtype,f);for(let v=0;v<f;v++){let b=so(v,m,g);for(let k=0;k<m;k++)b[k]<l[k]?b[k]=2*l[k]-b[k]-c:b[k]>=u[k]&&(b[k]=2*(u[k]-1)-b[k]+c);b=b.map((k,N)=>k-l[N]);const w=Wn(b,h,p);y[v]=d[w]}return{dataId:e.write(y,i,r.dtype),shape:i,dtype:r.dtype}}},s2=Ct((n,t)=>{const e=n%t;return n<0&&t<0||n>=0&&t>=0?e:(e+t)%t}),r2=Ot(Ro,s2),o2={kernelName:Ro,backendName:"cpu",kernelFunc:r2};function ax(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:o}=s,a=r.shape.length;let i=o;if(-1===i&&(i=a-1),i!==a-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${a} and dim was ${i}`);const l=Te([i],r.shape),u=sx({inputs:{x:r},backend:e,attrs:{reductionIndices:l,keepDims:!1}}),c=yt(u.shape,l),d=ut({inputs:{x:u},backend:e,attrs:{shape:c}}),h=np({inputs:{a:r,b:d},backend:e}),p=jy({inputs:{x:h},backend:e}),f=eu({inputs:{x:p},backend:e,attrs:{axis:l,keepDims:!1}}),m=ut({inputs:{x:f},backend:e,attrs:{shape:c}}),g=ep({inputs:{a:p,b:m},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(m),g}const a2={kernelName:Pi,backendName:"cpu",kernelFunc:ax},l2={kernelName:Mp,backendName:"cpu",kernelFunc:function i2(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:o,seed:a,normalized:i}=s;ce(r,"multinomial");const l=i?r:ax({inputs:{logits:r},backend:e,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],d=e.data.get(l.dataId).values,h=[u,o],p=Ht(V(h),"int32");for(let f=0;f<u;++f){const m=f*c,g=new Float32Array(c-1);g[0]=d[m];for(let v=1;v<g.length;++v)g[v]=g[v-1]+d[m+v];const y=Yc.alea(a.toString()),x=f*o;for(let v=0;v<o;++v){const b=y();p[x+v]=g.length;for(let w=0;w<g.length;w++)if(b<g[w]){p[x+v]=w;break}}}return i||e.disposeIntermediateTensorInfo(l),e.makeTensorInfo(h,"int32",p)}};function ix(n,t,e){const s=gs(-1,e);return Jh([],t,s,n,e)}const c2={kernelName:wi,backendName:"cpu",kernelFunc:function u2(n){const{inputs:t,backend:e}=n,{x:s}=t;ce(s,"neg");const r=e.data.get(s.dataId).values,[o,a]=ix(r,s.shape,s.dtype);return e.makeTensorInfo(a,s.dtype,o)}},d2=cd,p2={kernelName:Zu,backendName:"cpu",kernelFunc:function h2(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l}=s;ce(r,"NonMaxSuppression");const u=e.data.get(r.dataId).values,c=e.data.get(o.dataId).values,{selectedIndices:d}=d2(u,c,a,i,l);return e.makeTensorInfo([d.length],"int32",new Int32Array(d))}},f2=dd,g2={kernelName:Yu,backendName:"cpu",kernelFunc:function m2(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s;ce(r,"NonMaxSuppressionPadded");const c=e.data.get(r.dataId).values,d=e.data.get(o.dataId).values,{selectedIndices:h,validOutputs:p}=f2(c,d,a,i,l,u);return[e.makeTensorInfo([h.length],"int32",new Int32Array(h)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},y2=hd,b2={kernelName:Ju,backendName:"cpu",kernelFunc:function x2(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s;ce(r,"NonMaxSuppressionWithScore");const c=e.data.get(r.dataId).values,d=e.data.get(o.dataId).values,h=a,p=i,f=l,m=u,{selectedIndices:g,selectedScores:y}=y2(c,d,h,p,f,m);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},lx=Ct((n,t)=>n!==t?1:0),w2=Ot(vi,lx,null,"bool"),v2={kernelName:vi,backendName:"cpu",kernelFunc:w2},C2={kernelName:Ci,backendName:"cpu",kernelFunc:function N2(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{depth:o,onValue:a,offValue:i}=s;ce(r,"oneHot");const l=V(r.shape),u=new Float32Array(l*o);u.fill(i);const c=e.data.get(r.dataId).values;for(let d=0;d<l;++d)c[d]>=0&&c[d]<o&&(u[d*o+c[d]]=a);return e.makeTensorInfo([...r.shape,o],"int32",u)}};function tu(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const r=or({inputs:{input:s},backend:e}),o=tu({inputs:{x:r},backend:e}),a=Br({inputs:{input:s},backend:e}),i=tu({inputs:{x:a},backend:e}),l=rn({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return rp({backend:e,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const k2={kernelName:Vi,backendName:"cpu",kernelFunc:tu},I2={kernelName:Ni,backendName:"cpu",kernelFunc:function ux(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const r=or({inputs:{input:s},backend:e}),o=ux({inputs:{x:r},backend:e}),a=Br({inputs:{input:s},backend:e}),i=tu({inputs:{x:a},backend:e}),l=rn({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return rp({backend:e,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function cx(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return Ql({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const o=t[0].shape,a=t[0].dtype;t.forEach(c=>{Me(o,c.shape,"All tensors passed to stack must have matching shapes"),C(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=Wr({inputs:t.map(c=>{const d=Ql({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(d),d}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}const S2={kernelName:ki,backendName:"cpu",kernelFunc:cx},dx={kernelName:Ii,backendName:"cpu",kernelFunc:function T2(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,constantValue:a}=s;ce(r,"pad");const i=o.map((x,v)=>x[0]+r.shape[v]+x[1]),l=o.map(x=>x[0]),u=e.data.get(r.dataId).values,c=V(r.shape),d=r.shape.length,h=Ce(r.shape),p=V(i),f=i.length,m=Ce(i),g=Ut(r.dtype,p);0!==a&&g.fill(a);for(let x=0;x<c;x++)g[Wn(so(x,d,h).map((k,N)=>k+l[N]),f,m)]=u[x];return{dataId:e.write(g,i,r.dtype),shape:i,dtype:r.dtype}}},_2=Ct((n,t)=>Math.pow(n,t)),$2=Ot(Fo,_2),E2={kernelName:Fo,backendName:"cpu",kernelFunc:$2};function hx(n,t,e,s){const[r,o]=At(n,s),a=ln(t,"int32"),i=Ht(V(r),a),l=V(o);for(let u=0;u<i.length;++u){const c=u*l;let d=1;for(let h=0;h<l;++h)d*=e[c+h];i[u]=d}return{outVals:i,outShape:r,outDtype:a}}const A2={kernelName:Qu,backendName:"cpu",kernelFunc:function D2(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;ce(r,"prod");const i=r.shape.length,l=Te(o,r.shape),u=xt(l,i);let c=l,d=r;const h=[];null!=u&&(d=Sn({inputs:{x:r},backend:e,attrs:{perm:u}}),h.push(d),c=Nt(c.length,i));const p=e.data.get(d.dataId).values,{outVals:f,outShape:m,outDtype:g}=hx(d.shape,d.dtype,p,c);let y=m;return a&&(y=yt(m,l)),h.forEach(x=>e.disposeIntermediateTensorInfo(x)),e.makeTensorInfo(y,g,f)}};function px(n,t,e,s){if(n===t||n<t&&e<0||t<n&&e>1)return Ht(0,s);const l=Ht(Math.abs(Math.ceil((t-n)/e)),s);t<n&&1===e&&(e=-1),l[0]=n;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}const O2={kernelName:ec,backendName:"cpu",kernelFunc:function R2(n){const{backend:t,attrs:e}=n,{start:s,stop:r,dtype:o,step:a}=e,i=px(s,r,a,o);return t.makeTensorInfo([i.length],o,i)}},F2=He(Po,n=>1/n),P2={kernelName:Po,backendName:"cpu",kernelFunc:F2},M2={kernelName:$i,backendName:"cpu",kernelFunc:function L2(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s;ce(r,"resizeBilinear");const l=Ce(r.shape),[u,c]=i,[d,h,p,f]=r.shape,m=e.data.get(r.dataId).values,g=new Float32Array(V([d,u,c,f])),y=[o&&u>1?h-1:h,o&&c>1?p-1:p],x=[o&&u>1?u-1:u,o&&c>1?c-1:c];let v=0;const b=y[0]/x[0],w=y[1]/x[1];for(let k=0;k<d;k++)for(let N=0;N<u;N++){let S;S=a?b*(N+.5)-.5:b*N;const _=Math.max(0,Math.floor(S)),A=S-_,z=Math.min(h-1,Math.ceil(S)),U=k*l[0]+_*l[1],G=k*l[0]+z*l[1];for(let H=0;H<c;H++){let W;W=a?w*(H+.5)-.5:w*H;const B=Math.max(0,Math.floor(W)),K=W-B,j=Math.min(p-1,Math.ceil(W)),X=U+B*l[2],Y=G+B*l[2],Q=U+j*l[2],ne=G+j*l[2];for(let se=0;se<f;se++){const re=m[X+se],le=m[Y+se],xe=re+(m[Q+se]-re)*K;g[v++]=xe+(le+(m[ne+se]-le)*K-xe)*A}}}return e.makeTensorInfo([d,u,c,f],"float32",g)}},V2={kernelName:sc,backendName:"cpu",kernelFunc:function z2(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s;ce([o,r],"resizeBilinearGrad");const i=Ce(r.shape),[l,u,c,d]=r.shape,[,h,p]=o.shape,f=new Float32Array(l*u*c*d),m=[a&&h>1?u-1:u,a&&p>1?c-1:c],g=[a&&h>1?h-1:h,a&&p>1?p-1:p],y=m[0]/g[0],x=m[1]/g[1],v=e.data.get(o.dataId).values;let b=0;for(let w=0;w<l;w++){const k=w*i[0];for(let N=0;N<h;N++){const S=N*y,_=Math.floor(S),A=Math.min(Math.ceil(S),u-1),z=k+_*i[1],U=k+A*i[1],G=S-_,H=1-G;for(let W=0;W<p;W++){const B=W*x,K=Math.floor(B),j=Math.min(Math.ceil(B),c-1),X=B-K,Y=1-X,Q=z+K*i[2],ne=z+j*i[2],se=U+K*i[2],re=U+j*i[2],le=H*Y,oe=H*X,fe=G*Y,xe=G*X;for(let be=0;be<d;be++){const _e=v[b++];f[Q+be]+=_e*le,f[ne+be]+=_e*oe,f[se+be]+=_e*fe,f[re+be]+=_e*xe}}}}return e.makeTensorInfo([l,c,u,d],"float32",f)}},W2={kernelName:_i,backendName:"cpu",kernelFunc:function B2(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s;ce(r,"resizeNearestNeighbor");const l=Ce(r.shape),[u,c]=i,[d,h,p,f]=r.shape,m=e.data.get(r.dataId).values,g=new Float32Array(d*u*c*f),y=[o&&u>1?h-1:h,o&&c>1?p-1:p],x=[o&&u>1?u-1:u,o&&c>1?c-1:c],v=y[0]/x[0],b=y[1]/x[1];let w=0;for(let k=0;k<d;k++){const N=k*l[0];for(let S=0;S<u;S++){const _=a?v*(S+.5):v*S;let A=Math.min(h-1,o?Math.round(_):Math.floor(_));a&&(A=Math.max(0,A));const z=N+A*l[1];for(let U=0;U<c;U++){const G=a?b*(U+.5):b*U;let H=Math.min(p-1,o?Math.round(G):Math.floor(G));a&&(H=Math.max(0,H));const W=z+H*l[2];for(let B=0;B<f;B++)g[w++]=m[W+B]}}}return e.makeTensorInfo([d,u,c,f],r.dtype,g)}},U2={kernelName:nc,backendName:"cpu",kernelFunc:function G2(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s;ce([o,r],"resizeNearestNeighborGrad");const i=Ce(r.shape),l=Ce(o.shape),[u,c,d,h]=r.shape,[,p,f]=o.shape,m=new Float32Array(u*c*d*h),g=e.data.get(o.dataId).values,y=[a&&p>1?c-1:c,a&&f>1?d-1:d],x=[a&&p>1?p-1:p,a&&f>1?f-1:f],v=y[0]/x[0],b=y[1]/x[1],w=1/v,k=1/b,N=2*Math.ceil(w)+2,S=2*Math.ceil(k)+2;for(let _=0;_<u;_++){const A=_*i[0];for(let z=0;z<c;z++){const U=A+z*i[1],G=Math.floor(z*w),H=Math.floor(G-N/2);for(let W=0;W<d;W++){const B=U+W*i[2],K=Math.floor(W*k),j=Math.floor(K-S/2);for(let X=0;X<h;X++){let Y=0;for(let Q=0;Q<N;Q++){const ne=Q+H;if(ne<0||ne>=p)continue;const se=A+ne*l[1],re=ne*v;if(z===Math.min(c-1,a?Math.round(re):Math.floor(re)))for(let oe=0;oe<S;oe++){const fe=oe+j;if(fe<0||fe>=f)continue;const xe=se+fe*l[2],be=fe*b;W===Math.min(d-1,a?Math.round(be):Math.floor(be))&&(Y+=g[xe+X])}}m[B+X]=Y}}}}return e.makeTensorInfo(r.shape,r.dtype,m)}},j2={kernelName:Ei,backendName:"cpu",kernelFunc:function H2(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:o}=s;ce(r,"reverse");const a=r.shape.length,i=Te(o,r.shape);if(0===a)return Qn({inputs:{x:r},backend:e});const l=new jt(r.shape,r.dtype),u=e.bufferSync(r);for(let c=0;c<l.size;c++){const d=l.indexToLoc(c),h=d.slice();i.forEach(p=>h[p]=r.shape[p]-1-h[p]),l.set(u.get(...h),...d)}return e.makeTensorInfo(l.shape,l.dtype,l.values)}},q2={kernelName:lc,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:o,center:a}=t,i=e,l=Ut(s.dtype,V(s.shape)),[u,c,d,h]=s.shape,[p,f]=Td(a,c,d),g=Math.sin(r),y=Math.cos(r),x=i.data.get(s.dataId).values;for(let b=0;b<u;b++){const w=b*d*c*h;for(let k=0;k<c;k++){const N=k*(d*h);for(let S=0;S<d;S++){const _=S*h;for(let A=0;A<h;A++){const z=[u,k,S,A],U=z[2],G=z[1];let H=(U-p)*y-(G-f)*g,W=(U-p)*g+(G-f)*y;H=Math.round(H+p),W=Math.round(W+f);let B=o;"number"!=typeof o&&(B=3===A?255:o[A]),H>=0&&H<d&&W>=0&&W<c&&(B=x[w+W*(d*h)+H*h+A]),l[w+N+_+A]=B}}}}return{dataId:i.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},K2=He(zo,n=>{const t=Math.floor(n);return n-t<.5?Math.floor(n):n-t>.5?Math.ceil(n):t%2==0?t:t+1}),X2={kernelName:zo,backendName:"cpu",kernelFunc:K2},fx=Vr(n=>1/Math.sqrt(n)),Z2=zr(Vo,fx),Y2={kernelName:Vo,backendName:"cpu",kernelFunc:Z2};function mx(n,t,e,s,r,o,a,i,l,u){const c=[s/r,r],d=n.values,h=t.values;if(0===s)return Ae(e,t.dtype);const p=Ae(c,t.dtype);p.values.fill(l);for(let f=0;f<o;f++){const m=[];let g=0;for(let y=0;y<a;y++){const x=d[f*a+y];m.push(x),g+=x*i[y]}if(g<0||g>=s/r)throw new Error(`Invalid indices: ${m} does not index into ${e}`);for(let y=0;y<r;y++)u?p.values[g*r+y]+=h[f*r+y]:p.values[g*r+y]=0===t.rank?h[0]:h[f*r+y]}return p}const Q2={kernelName:zp,backendName:"cpu",kernelFunc:function J2(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:o}=t,{shape:a}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:d}=fa(0,r,a),m=mx(e.bufferSync(r),e.bufferSync(o),a,d,u,l,i,c,0,!0);return e.makeTensorInfo(a,m.dtype,m.values)}},tR={kernelName:Di,backendName:"cpu",kernelFunc:function eR(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:o}=t;ce([s,r,o],"select");const a=s.shape.length,i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,c=ln(r.dtype,o.dtype),d=Ht(V(r.shape),c);let h=0;const p=0===a||a>1||1===r.shape.length?1:V(r.shape.slice(1));for(let f=0;f<i.length;f++)for(let m=0;m<p;m++)d[h++]=1===i[f]?l[f]:u[f];return e.makeTensorInfo(r.shape,c,d)}},nR=Nl,sR=Cl,rR=He(Bo,n=>n>=0?sR*n:nR*(Math.exp(n)-1)),oR={kernelName:Bo,backendName:"cpu",kernelFunc:rR},aR=He(Ho,n=>1/(1+Math.exp(-n))),iR={kernelName:Ho,backendName:"cpu",kernelFunc:aR},lR=He(Uo,n=>n<0?-1:n>0?1:0),uR={kernelName:Uo,backendName:"cpu",kernelFunc:lR},cR=He(Wo,n=>Math.sin(n)),dR={kernelName:Wo,backendName:"cpu",kernelFunc:cR},hR=He(Go,n=>Math.sinh(n)),pR={kernelName:Go,backendName:"cpu",kernelFunc:hR},gx=Math.log(1.1920928955078125e-7)+2,fR=He(jo,n=>{const t=n>-gx,e=n<gx,s=Math.exp(n);let r;return r=e?s:t?n:Math.log(1+s),r}),mR={kernelName:jo,backendName:"cpu",kernelFunc:fR},yR={kernelName:Oi,backendName:"cpu",kernelFunc:function gR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,paddings:a}=s;ce([r],"spaceToBatchND");const i=V(o),l=[[0,0]];l.push(...a);for(let k=1+o.length;k<r.shape.length;++k)l.push([0,0]);const u=dx.kernelFunc({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),c=da(u.shape,o,i,!1),d=ha(c.length,o.length,!1),h=pa(u.shape,o,i,!1),m=ut({inputs:{x:u},backend:e,attrs:{shape:c}}),x=Sn({inputs:{x:m},backend:e,attrs:{perm:d}}),w=ut({inputs:{x},backend:e,attrs:{shape:h}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(x),w}},bR={kernelName:Vp,backendName:"cpu",kernelFunc:function xR(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:o,defaultValue:a}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:d,outputSize:h}=fa(0,r,i),y=mx(e.bufferSync(r),e.bufferSync(o),i,h,c,u,l,d,e.data.get(a.dataId).values[0],!1);return e.makeTensorInfo(i,y.dtype,y.values)}},vR={kernelName:Fi,backendName:"cpu",kernelFunc:function wR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:o,axis:a}=s,i=Te(a,r.shape)[0],l=Md(r,o,i),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map(d=>{const h=[...c];h[i]=d;const p=ar({inputs:{x:r},backend:e,attrs:{begin:u,size:h}});return u[i]+=d,p})}},NR=He(qo,n=>Math.sqrt(n)),CR={kernelName:qo,backendName:"cpu",kernelFunc:NR},kR={kernelName:rc,backendName:"cpu",kernelFunc:({inputs:n,backend:t})=>{const{x:e}=n,s=t;ce(e,"square");const r=s.data.get(e.dataId).values,o=new Float32Array(r.length);for(let i=0;i<r.length;++i){const l=r[i];o[i]=l*l}return{dataId:s.write(o,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}},yx=Ct((n,t)=>{const e=n-t;return e*e}),IR=Ot(Ko,yx),SR={kernelName:Ko,backendName:"cpu",kernelFunc:IR},TR=He(Qo,(n,t)=>{const e=t;return isNaN(n)?NaN:n>0?1:e.alpha}),_R={kernelName:Qo,backendName:"cpu",kernelFunc:TR};function xx(n,t,e,s){const r=Ae(n,t.dtype);for(let o=0;o<r.size;o++){const a=r.indexToLoc(o),i=new Array(a.length);for(let l=0;l<i.length;l++)i[l]=a[l]*e[l]+s[l];r.set(t.get(...i),...a)}return r}const ER={kernelName:oc,backendName:"cpu",kernelFunc:function $R(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,end:a,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:h}=s;ce(r,"stridedSlice");const{nonStrided:p,$begin:f,$strides:m,size:g,newShape:y,outShape:x}=Fc(r.shape,o,a,i,l,u,c,d,h),v=ut({inputs:{x:r},backend:e,attrs:{shape:y}});let b;if(p){const k=ar({inputs:{x:v},backend:e,attrs:{begin:f,size:g}});b=ut({inputs:{x:k},backend:e,attrs:{shape:x}}),e.disposeIntermediateTensorInfo(k)}else if(x.some(k=>0===k))b=e.makeTensorInfo(x,r.dtype,[]);else{const N=xx(x,e.bufferSync(v),m,f);b=e.makeTensorInfo(N.shape,N.dtype,N.values)}const w=ut({inputs:{x:b},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(v),e.disposeIntermediateTensorInfo(b),w}},DR=He(Zo,n=>Math.tan(n)),AR={kernelName:Zo,backendName:"cpu",kernelFunc:DR},RR=He(Yo,n=>Math.tanh(n));function bx(n,t){const e=new Array(n.rank);for(let r=0;r<e.length;r++)e[r]=n.shape[r]*t[r];const s=Ae(e,n.dtype);for(let r=0;r<s.values.length;++r){const o=s.indexToLoc(r),a=new Array(n.rank);for(let l=0;l<a.length;l++)a[l]=o[l]%n.shape[l];const i=n.locToIndex(a);s.values[r]=n.values[i]}return s}function wx(n,t,e,s,r){const o=t[t.length-1],[a,i]=[n.length/o,o],l=Ut(e,a*s),u=Ut("int32",a*s);for(let d=0;d<a;d++){const h=d*i,p=n.subarray(h,h+i),f=[];for(let x=0;x<p.length;x++)f.push({value:p[x],index:x});f.sort((x,v)=>v.value-x.value);const m=d*s,g=l.subarray(m,m+s),y=u.subarray(m,m+s);for(let x=0;x<s;x++)g[x]=f[x].value,y[x]=f[x].index}const c=t.slice();return c[c.length-1]=s,[Ae(c,e,l),Ae(c,"int32",u)]}function vx(n,t,e,s){const r=Te(t,e)[0],o=[1,e[0],1];for(let f=0;f<r;f++)o[0]*=e[f];o[1]=e[r];for(let f=r+1;f<e.length;f++)o[2]*=e[f];const a={},i=new Int32Array(e[r]),l=new jt(o,s,n),u=[],c=1===o[0]&&1===o[2];for(let f=0;f<e[r];f++){let m;if(c)m=n[f].toString();else{const g=[];for(let y=0;y<o[0];y++)for(let x=0;x<o[2];x++)g.push(l.get(y,f,x));m=g.join(",")}if(void 0!==a[m])i[f]=a[m];else{const g=Object.keys(a).length;a[m]=g,i[f]=g,u.push(f)}}const d=o.slice();d[1]=Object.keys(a).length;const h=new jt(d,s);u.forEach((f,m)=>{for(let g=0;g<o[0];g++)for(let y=0;y<o[2];y++)h.set(l.get(g,f,y),g,m,y)});const p=e.slice();return p[r]=d[1],{outputValues:h.values,outputShape:p,indices:i}}const HR=[F$,P$,M$,V$,D$,W$,H$,q$,X$,Y$,Q$,tE,sE,aE,lE,dE,pE,mE,yE,R$,bE,NE,kE,$$,SE,_E,T$,$E,DE,OE,PE,AE,VE,WE,ME,UE,jE,KE,ZE,JE,eD,tD,sD,oD,iD,lD,cD,uD,tp,w$,hD,fD,ND,CD,kD,SD,PD,LD,zD,BD,UD,jD,KD,ZD,JD,eA,sA,v$,oA,EE,iA,uA,dA,N$,pA,gA,xA,wA,NA,IA,TA,EA,AA,OA,LA,zA,BA,GA,HA,qA,FA,ZA,JA,e2,n2,o2,l2,_D,c2,p2,g2,b2,v2,C2,I2,S2,dx,E2,k$,A2,O2,_$,P2,I$,S$,A$,M2,V2,W2,U2,j2,q2,X2,Y2,Q2,tR,oR,iR,uR,dR,pR,wE,a2,mR,yR,bR,vR,CR,kR,SR,_R,ER,DD,KA,AR,{kernelName:Yo,backendName:"cpu",kernelFunc:RR},{kernelName:Jo,backendName:"cpu",kernelFunc:function FR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:o}=s;ce(r,"tile");const a=bx(e.bufferSync(r),o);return e.makeTensorInfo(a.shape,a.dtype,a.values)}},{kernelName:ac,backendName:"cpu",kernelFunc:function LR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:o}=s;ce(r,"topk");const i=e.data.get(r.dataId).values,[l,u]=wx(i,r.shape,r.dtype,o);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}},G$,{kernelName:ic,backendName:"cpu",kernelFunc:function zR(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:o}=t;ce(o,"unique");const a=s.data.get(o.dataId).values,{outputValues:i,outputShape:l,indices:u}=vx(a,r,o.shape,o.dtype);return[s.makeTensorInfo(l,o.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Mi,backendName:"cpu",kernelFunc:function BR(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:o}=s;o<0&&(o+=r.shape.length);const a=r.shape.length,i=r.shape[o],l=new Array(a-1);let u=0;for(let p=0;p<a;p++)p!==o&&(l[u++]=r.shape[p]);const c=new Array(a).fill(0),d=r.shape.slice();d[o]=1;const h=new Array(i);for(let p=0;p<h.length;p++){c[o]=p;const f=ar({inputs:{x:r},backend:e,attrs:{begin:c,size:d}});h[p]=ut({inputs:{x:f},backend:e,attrs:{shape:l}}),e.disposeIntermediateTensorInfo(f)}return h}},{kernelName:zi,backendName:"cpu",kernelFunc:function GR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:o}=t,{numSegments:a}=s;ce(r,"unsortedSegmentSum");const u=[],c=[],d=r.shape.length-o.shape.length;let h=o;for(let f=0;f<d;++f){const m=Ql({inputs:{input:h},backend:e,attrs:{dim:f+1}});h=m,c.push(m)}for(let f=0;f<a;++f){const m=gs(f,"int32"),g=e.makeTensorInfo([],"int32",m),y=Uy({inputs:{a:g,b:h},backend:e}),x=Ds({inputs:{x:y},backend:e,attrs:{dtype:"float32"}}),v=Qh({inputs:{a:x,b:r},backend:e}),b=eu({inputs:{x:v},backend:e,attrs:{axis:0,keepDims:!1}});u.push(b),c.push(g),c.push(y),c.push(x),c.push(v),c.push(b)}const p=cx({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},k2];for(const n of HR)cc(n);const As={},op={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function es(n){if(!(n in As)){const e=function KR(n){if(1!==n&&2!==n)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function qR(n){if(typeof OffscreenCanvas<"u"&&2===n)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(n);return t.addEventListener("webglcontextlost",e=>{e.preventDefault(),delete As[n]},!1),1===n?t.getContext("webgl",op)||t.getContext("experimental-webgl",op):t.getContext("webgl2",op)}(n);if(null===e)return console.log("Could not get context for WebGL version",n),null;As[n]=e}const t=As[n];return t.isContextLost()?(delete As[n],es(n)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),As[n])}var Gr=(()=>{return(n=Gr||(Gr={}))[n.DENSE=0]="DENSE",n[n.SHARED_BATCH=1]="SHARED_BATCH",Gr;var n})(),on=(()=>{return(n=on||(on={}))[n.RENDER=0]="RENDER",n[n.UPLOAD=1]="UPLOAD",n[n.PIXELS=2]="PIXELS",n[n.DOWNLOAD=3]="DOWNLOAD",on;var n})(),Ft=(()=>{return(n=Ft||(Ft={}))[n.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",n[n.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",n[n.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",n[n.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",n[n.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16",Ft;var n})();function Da(n,t){return[t,n]}function Aa(n){const t=V(n);return Kt(Math.ceil(t/4))}function Ur(n,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(n/2))]}function ap(n,t){const e=n;let s,r,o,a,i,l,u,c,d,h;return 2===q().getNumber("WEBGL_VERSION")?(s=e.R32F,r=e.R16F,o=e.RGBA16F,a=e.RGBA32F,i=e.RED,u=4,c=1,d=e.HALF_FLOAT,h=e.FLOAT):(s=n.RGBA,r=n.RGBA,o=n.RGBA,a=e.RGBA,i=n.RGBA,u=4,c=4,d=null!=t?t.HALF_FLOAT_OES:null,h=n.FLOAT),l=n.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:a,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:d,textureTypeFloat:h}}function de(n,t){const e=t();return q().getBool("DEBUG")&&function YR(n){const t=n.getError();if(t!==n.NO_ERROR)throw new Error("WebGL Error: "+function tO(n,t){switch(t){case n.NO_ERROR:return"NO_ERROR";case n.INVALID_ENUM:return"INVALID_ENUM";case n.INVALID_VALUE:return"INVALID_VALUE";case n.INVALID_OPERATION:return"INVALID_OPERATION";case n.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case n.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case n.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(n,t))}(n),e}function nu(n,t){return ps(n,()=>n.getExtension(t),'Extension "'+t+'" not supported on this browser.')}const rO=/ERROR: [0-9]+:([0-9]+):/g;function ip(n,t){if(de(n,()=>n.validateProgram(t)),!1===n.getProgramParameter(t,n.VALIDATE_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Nx(n,t,e,s,r,o,a){const i=n.getAttribLocation(t,e);return-1!==i&&(de(n,()=>n.bindBuffer(n.ARRAY_BUFFER,s)),de(n,()=>n.vertexAttribPointer(i,r,n.FLOAT,!1,o,a)),de(n,()=>n.enableVertexAttribArray(i)),!0)}function gO(n,t,e,s){de(n,()=>function pO(n,t,e){(function kx(n,t){const e=n.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+n.TEXTURE0;if(s<n.TEXTURE0||s>e)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${e}].`)})(n,e),de(n,()=>n.activeTexture(n.TEXTURE0+e)),de(n,()=>n.bindTexture(n.TEXTURE_2D,t))}(n,t,s)),de(n,()=>n.uniform1i(e,s))}function lp(n,t,e){de(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,e)),de(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t,0))}function Cx(n,t){de(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,t)),de(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,null,0))}function su(n){const t=n.checkFramebufferStatus(n.FRAMEBUFFER);if(t!==n.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function yO(n,t){switch(t){case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case n.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(n,t))}function ps(n,t,e){const s=de(n,()=>t());if(null==s)throw new Error(e);return s}function Hr(n,t=2){return V(n.slice(0,n.length-t))}function jr(n){if(0===n.length)throw Error("Cannot get rows and columns of an empty shape array.");return[n.length>1?n[n.length-2]:1,n[n.length-1]]}function up(n){let t=[1,1,1];return 0===n.length||1===n.length&&1===n[0]||(t=[Hr(n),...jr(n)]),t}function ru(n){return n%2==0}function ou(n,t){if(Se(n=n.slice(-2),t=t.slice(-2))||!n.length||!t.length||0===n[0]||0===n[1]||0===t[0]||0===t[1])return!0;if(n.length!==t.length){const e=n.slice(-1)[0],s=t.slice(-1)[0];if(e===s||ru(e)&&ru(s)&&(1===n[0]||1===t[0]))return!0}return n[1]===t[1]&&ru(n[0])&&ru(t[0])}let au,iu;function Tn(n,t){return null!=n.getExtension(t)}function Ix(n){try{if(null!=es(n))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function cp(n){const t=ap(n),e=n.createTexture();n.bindTexture(n.TEXTURE_2D,e),n.texImage2D(n.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const o=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,o),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,e,0);const a=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(e),n.deleteFramebuffer(o),a}function Ra(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&C("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const ke=q();function Yt(){let n,t,e,s,r,o,a,i,l,u;return 2===q().getNumber("WEBGL_VERSION")?(n="#version 300 es",t="in",e="out",s="in",r="texture",o="outputColor",a="out vec4 outputColor;",i="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(n="",t="attribute",e="varying",s="varying",r="texture2D",o="gl_FragColor",a="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:n,attribute:t,varyingVs:e,varyingFs:s,texture2D:r,output:o,defineOutput:a,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function ir(n,t,e="index"){const s=Ce(t);return s.map((r,o)=>`int ${n[o]} = ${e} / ${r}; ${o===s.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * ${r}`:`index -= ${n[o]} * ${r}`};`).join("")}function dp(n){const t=Ce(n).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}ke.registerFlag("HAS_WEBGL",()=>ke.getNumber("WEBGL_VERSION")>0),ke.registerFlag("WEBGL_VERSION",()=>Ix(2)?2:Ix(1)?1:0),ke.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),ke.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===ke.get("WEBGL_VERSION")),ke.registerFlag("WEBGL_CPU_FORWARD",()=>!0),ke.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),ke.registerFlag("WEBGL_PACK",()=>ke.getBool("HAS_WEBGL")),ke.registerFlag("WEBGL_PACK_NORMALIZATION",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_PACK_CLIP",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),ke.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_PACK_REDUCE",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_LAZILY_UNPACK",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_CONV_IM2COL",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function bO(n){if(null==au){const t=es(n);au=t.getParameter(t.MAX_TEXTURE_SIZE)}return au}(ke.getNumber("WEBGL_VERSION"))),ke.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function wO(n){if(null==iu){const t=es(n);iu=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,iu)}(ke.getNumber("WEBGL_VERSION"))),ke.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const n=ke.getNumber("WEBGL_VERSION");return 0===n?0:function vO(n){if(0===n)return 0;let t;const e=es(n);return t=Tn(e,"EXT_disjoint_timer_query_webgl2")&&2===n?2:Tn(e,"EXT_disjoint_timer_query")?1:0,t}(n)}),ke.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>ke.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!function v0(){if(function w0(){return typeof navigator<"u"&&null!=navigator}()){const n=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(n)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(n.substr(0,4))}return!1}()),ke.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function NO(n){if(0===n)return!1;const t=es(n);if(1===n){if(!Tn(t,"OES_texture_float"))return!1}else if(!Tn(t,"EXT_color_buffer_float"))return!1;return cp(t)}(ke.getNumber("WEBGL_VERSION"))),ke.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!ke.getBool("WEBGL_FORCE_F16_TEXTURES")&&ke.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),ke.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function CO(n){if(0===n)return!1;const t=es(n);if(1!==n){if(Tn(t,"EXT_color_buffer_float"))return cp(t);const s="EXT_color_buffer_half_float";if(Tn(t,s)){const r=t.getExtension(s);return function kO(n,t){const e=ap(n,t),s=n.createTexture();n.bindTexture(n.TEXTURE_2D,s),n.texImage2D(n.TEXTURE_2D,0,e.internalFormatHalfFloat,1,1,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);const a=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,a),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,s,0);const i=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(s),n.deleteFramebuffer(a),i}(t,r)}return!1}return!(!Tn(t,"OES_texture_float")||!Tn(t,"WEBGL_color_buffer_float"))&&cp(t)}(ke.getNumber("WEBGL_VERSION"))),ke.registerFlag("WEBGL_FENCE_API_ENABLED",()=>function IO(n){return 2===n&&null!=es(n).fenceSync}(ke.getNumber("WEBGL_VERSION"))),ke.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>ke.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),ke.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,n=>{if(n<0&&-1!==n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`)});const Sx="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class SO{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Gr.DENSE;const e=Aa(t),s=Yt();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${ir(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${s.output} = result;\n      }\n    `}}class TO{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Gr.DENSE;const e=Aa(t),s=Yt();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${ir(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${s.output} = result;\n      }\n    `}}class _O{constructor(t){this.variableNames=["A"],this.outTexUsage=on.DOWNLOAD;const e=Yt();this.outputShape=t,this.userCode=`\n      ${Sx}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class $O{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=on.DOWNLOAD;const e=Yt();this.outputShape=t,this.userCode=`\n      ${Sx}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class EO{constructor(t,e,s=!1){this.variableNames=["A"];const r=Yt(),[o,a]=e;this.outputShape=t;let i="result";s&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${dp(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${o}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class DO{constructor(t,e,s=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=Yt(),[o,a]=e;this.outputShape=t;let i="",l="result";s&&(l="floor(result * 255. + 0.5)");for(let u=0;u<=1;u++)for(let c=0;c<=1;c++){const d=2*u+c;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${c} < ${t[2]}) {\n            localCoords[2] += ${c};\n            if(localCoords[1] + ${u} < ${t[1]}) {\n              localCoords[1] += ${u};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${o}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${d}] = values[0];\n              } else if(offset == 1) {\n                result[${d}] = values[1];\n              } else if(offset == 2) {\n                result[${d}] = values[2];\n              } else {\n                result[${d}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${dp(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${l};\n      }\n    `}}function Oa(n,t,e,s,r,o){!function dO(n,t){const e=q().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n<=0||t<=0)throw new Error(`Requested texture size [${n}x${t}] is invalid.`);if(n>e||t>e)throw new Error(`Requested texture size [${n}x${t}] greater than WebGL maximum on this browser / GPU [${e}x${e}].`)}(t,e);const a=function cO(n){return ps(n,()=>n.createTexture(),"Unable to create WebGLTexture.")}(n),i=n.TEXTURE_2D;return de(n,()=>n.bindTexture(i,a)),de(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE)),de(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE)),de(n,()=>n.texParameteri(i,n.TEXTURE_MIN_FILTER,n.NEAREST)),de(n,()=>n.texParameteri(i,n.TEXTURE_MAG_FILTER,n.NEAREST)),de(n,()=>n.texImage2D(i,0,s,t,e,0,r,o,null)),de(n,()=>n.bindTexture(n.TEXTURE_2D,null)),a}function Tx(n){return n.internalFormatFloat}function _x(n){return n.internalFormatHalfFloat}function $x(n){return n.downloadTextureFormat}function Ex(n){return n.internalFormatPackedFloat}function Dx(n){return n.internalFormatPackedHalfFloat}class KO{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=q().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function jR(n,t){As[n]=t}(e,t)):this.gl=es(e);let s="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===q().getNumber("WEBGL_VERSION")){const a="OES_texture_half_float";if(this.textureFloatExtension=nu(this.gl,"OES_texture_float"),Tn(this.gl,a))this.textureHalfFloatExtension=nu(this.gl,a);else if(q().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(s),Tn(this.gl,r))this.colorBufferHalfFloatExtension=nu(this.gl,r);else if(q().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(s="EXT_color_buffer_float",Tn(this.gl,s))this.colorBufferFloatExtension=this.gl.getExtension(s);else{if(!Tn(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function RO(n){return function lO(n,t){const e=ps(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return de(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),de(n,()=>n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function OO(n){return function uO(n,t){const e=ps(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return de(n,()=>n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e)),de(n,()=>n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function hO(n){return ps(n,()=>n.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=ap(this.gl,this.textureHalfFloatExtension)}get debug(){return q().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;de(t,()=>t.finish()),de(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),de(t,()=>t.deleteFramebuffer(this.framebuffer)),de(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),de(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),de(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function FO(n,t,e,s){const[r,o]=Da(t,e);return Oa(n,r,o,Tx(s),s.textureFormatFloat,n.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function PO(n,t,e,s){const[r,o]=Da(t,e);return Oa(n,r,o,_x(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function LO(n,t,e,s){const[r,o]=Da(t,e);return Oa(n,r,o,$x(s),n.RGBA,n.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function WO(n,t,e){de(n,()=>n.bindTexture(n.TEXTURE_2D,t)),e.data instanceof Uint8Array?de(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,e.width,e.height,0,n.RGBA,n.UNSIGNED_BYTE,e.data)):de(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,e)),de(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,s,r){this.throwIfDisposed(),function BO(n,t,e,s,r,o){let a,i,l;de(n,()=>n.bindTexture(n.TEXTURE_2D,t)),r instanceof Uint8Array?(a=new Uint8Array(e*s*4),i=n.UNSIGNED_BYTE,l=n.RGBA):(a=new Float32Array(e*s*4),i=n.FLOAT,l=o.internalFormatPackedFloat),a.set(r),de(n,()=>n.texImage2D(n.TEXTURE_2D,0,l,e,s,0,n.RGBA,i,a)),de(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e,s,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function zO(n,t,e,s){const[r,o]=Ur(t,e);return Oa(n,r,o,Dx(s),n.RGBA,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function MO(n,t,e,s){const[r,o]=Ur(t,e);return Oa(n,r,o,Ex(s),n.RGBA,n.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(Cx(this.gl,this.framebuffer),this.outputTexture=null),de(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function HO(n,t,e,s){const[r,o]=Da(t,e),i=new Uint8Array(function XR(n,t){return n*t}(t*e,4));return de(n,()=>n.readPixels(0,0,r,o,s.downloadTextureFormat,n.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,e,s,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,s,r,o,a){return function jO(n,t,e,s,r,o,a,i){const l=n,u=new Float32Array(function ZR(n,t){const[e,s]=Ur(n,t);return e*s*4}(o,a));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,t,0,0,0,o,a)}downloadFloat32MatrixFromBuffer(t,e){return function UO(n,t,e){const s=n,r=new Float32Array(e);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,t,e)}createBufferFromTexture(t,e,s){this.bindTextureToFrameBuffer(t);const r=function GO(n,t,e,s){const r=n.createBuffer();de(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,r));const i=16*t*e;return de(n,()=>n.bufferData(n.PIXEL_PACK_BUFFER,i,n.STREAM_READ)),de(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,0)),de(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,null)),r}(this.gl,e,s);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,s;if(q().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,o=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),s=()=>{const a=r.clientWaitSync(o,0,0);return a===r.ALREADY_SIGNALED||a===r.CONDITION_SATISFIED},e=o}else q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),s=()=>this.isQueryAvailable(e,q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):s=()=>!0;return{query:e,isFencePassed:s}}downloadMatrixFromPackedTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function qO(n,t,e){const s=new Float32Array(t*e*4);return de(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,s)),s}(this.gl,e,s))}createProgram(t){this.throwIfDisposed();const e=this.gl,s=function sO(n,t){const e=ps(n,()=>n.createShader(n.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(de(n,()=>n.shaderSource(e,t)),de(n,()=>n.compileShader(e)),!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw function oO(n,t){const e=rO.exec(t);if(null==e)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(n);const s=+e[1],r=n.split("\n"),o=r.length.toString().length+2,a=r.map((d,h)=>Gt((h+1).toString(),o)+d);let i=0;for(let d=0;d<a.length;d++)i=Math.max(a[d].length,i);const l=a.slice(0,s-1),u=a.slice(s-1,s),c=a.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${Gt(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,n.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}(e,t),r=function AO(n){const t=Yt();return function nO(n,t){const e=ps(n,()=>n.createShader(n.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(de(n,()=>n.shaderSource(e,t)),de(n,()=>n.compileShader(e)),!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw console.log(n.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}(n,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(e),o=function aO(n){return ps(n,()=>n.createProgram(),"Unable to create WebGLProgram.")}(e);return de(e,()=>e.attachShader(o,r)),de(e,()=>e.attachShader(o,s)),function iO(n,t){if(de(n,()=>n.linkProgram(t)),!1===n.getProgramParameter(t,n.LINK_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(e,o),this.debug&&ip(e,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=function VO(n,t,e){return de(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),Nx(n,t,"clipSpacePos",e,3,20,0)&&Nx(n,t,"uv",e,2,20,12)}(e,this.program,this.vertexBuffer)),o}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&de(this.gl,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&ip(this.gl,this.program),de(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,s=!0){return this.throwIfDisposed(),s?function fO(n,t,e){return ps(n,()=>n.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}(this.gl,t,e):function mO(n,t,e){return n.getUniformLocation(t,e)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),de(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,s){this.throwIfDisposed(),this.throwIfNoProgram(),gO(this.gl,t,e,s)}setOutputMatrixTexture(t,e,s){this.setOutputMatrixTextureDriver(t,s,e)}setOutputPackedMatrixTexture(t,e,s){this.throwIfDisposed();const[r,o]=Ur(e,s);this.setOutputMatrixTextureDriver(t,r,o)}setOutputMatrixWriteRegion(t,e,s,r){this.setOutputMatrixWriteRegionDriver(s,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,s,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&ip(this.gl,this.program),su(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),de(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),de(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=nu(this.gl,2===q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.createQuery();return s.beginQuery(r.TIME_ELAPSED_EXT,o),o}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,s=this.getQueryTimerExtensionWebGL2();return void e.endQuery(s.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}waitForQueryAndGetTime(t){var e=this;return(0,M.Z)(function*(){return yield En(()=>e.disposed||e.isQueryAvailable(t,q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),e.getQueryTime(t,q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))})()}getQueryTime(t,e){if(0===e)return null;if(2===e){const s=this.gl;return s.getQueryParameter(t,s.QUERY_RESULT)/1e6}{const s=this.getQueryTimerExtensionWebGL1();return s.getQueryObjectEXT(t,s.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.getQueryParameter(t,s.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}{const s=this.getQueryTimerExtensionWebGL1(),r=s.getQueryObjectEXT(t,s.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(s.GPU_DISJOINT_EXT)),r&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function XO(n){let t=0;for(;t<n.length&&n[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:s}=this.itemsToPoll[e];s()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),!(this.itemsToPoll.length>1)&&En(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),lp(this.gl,t,this.framebuffer),this.debug&&su(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(lp(this.gl,this.outputTexture,this.framebuffer),this.debug&&su(this.gl)):Cx(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const s=e();return this.unbindTextureToFrameBuffer(),s}setOutputMatrixTextureDriver(t,e,s){this.throwIfDisposed();const r=this.gl;lp(r,t,this.framebuffer),this.debug&&su(r),this.outputTexture=t,de(r,()=>r.viewport(0,0,e,s)),de(r,()=>r.scissor(0,0,e,s))}setOutputMatrixWriteRegionDriver(t,e,s,r){this.throwIfDisposed(),de(this.gl,()=>this.gl.scissor(t,e,s,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:Ax}=Ie;function ZO(n,t,e,s){const r=[];n.forEach(f=>{const m=V(f.shapeInfo.logicalShape);f.shapeInfo.isUniform?r.push(`uniform float ${f.name}${m>1?`[${m}]`:""};`):(r.push(`uniform sampler2D ${f.name};`),r.push(`uniform int offset${f.name};`))});const o=r.join("\n"),a=n.map(f=>function YO(n,t,e=!1){let s="";return s+=e?Rx(n):qr(n),n.shapeInfo.logicalShape.length<=t.logicalShape.length&&(s+=e?function EF(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",o=n.shapeInfo.logicalShape.length,a=t.logicalShape.length,i=Ax(n.shapeInfo.logicalShape,t.logicalShape),l=Ye(a),u=a-o;let c;const d=["x","y","z","w","u","v"];c=0===o?"":a<2&&i.length>=1?"coords = 0;":i.map(x=>`coords.${d[x+u]} = 0;`).join("\n");let h="";h=a<2&&o>0?"coords":n.shapeInfo.logicalShape.map((x,v)=>`coords.${d[v+u]}`).join(", ");let p="return outputValue;";const m=1===V(n.shapeInfo.logicalShape),y=1===V(t.logicalShape);if(1!==o||m||y){if(m&&!y)p=1===a?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const x=o-2,v=o-1;i.indexOf(x)>-1&&i.indexOf(v)>-1?p="return vec4(outputValue.x);":i.indexOf(x)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(v)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${h});\n      ${p}\n    }\n  `}(n,t):function DF(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",i=n.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!n.shapeInfo.isUniform&&i===l&&null==n.shapeInfo.flatOffset&&Se(n.shapeInfo.texShape,t.texShape))return`\n      float ${r}() {\n        return sampleTexture(${e}, resultUV);\n      }\n    `;const u=Ye(l),c=Ax(n.shapeInfo.logicalShape,t.logicalShape),d=l-i;let h;const p=["x","y","z","w","u","v"];h=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map(m=>`coords.${p[m+d]} = 0;`).join("\n");let f="";return f=l<2&&i>0?"coords":n.shapeInfo.logicalShape.map((m,g)=>`coords.${p[g+d]}`).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${h}\n      return get${s}(${f});\n    }\n  `}(n,t)),s}(f,t,s)).join("\n"),i=t.texShape,l=Yt(),u=function eF(n){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${n.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,d,h=function sF(n){return`${n.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${n.varyingFs} vec2 resultUV;\n    ${n.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${n.defineSpecialNaN}\n    ${n.defineSpecialInf}\n    ${n.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${rF}\n    ${oF}\n    ${aF}\n  `}(l);return t.isPacked?(c=function JO(n,t){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function lF(n,t){const e=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===e[0]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${e[1]}.0);\n      }\n    `:1===e[1]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${e[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return 2 * (resTexRC.x * ${e[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function gF(n,t){const e=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(Se(n,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;const s=Math.ceil(n[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(n,t);case 3:return function cF(n,t){const e=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(n[2]/2),r=s*Math.ceil(n[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(n,t);default:return function hF(n,t){const e=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(n[n.length-1]/2),r=s*Math.ceil(n[n.length-2]/2);let o=r,a="",i="b, r, c";for(let l=2;l<n.length-1;l++)o*=n[n.length-l-1],a=`\n      int b${l} = index / ${o};\n      index -= b${l} * ${o};\n    `+a,i=`b${l}, `+i;return`\n    ivec${n.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${a}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${n.length}(${i});\n    }\n  `}(n,t)}}(t.logicalShape,i),d=function nF(n){return`\n    void setOutput(vec4 val) {\n      ${n.output} = val;\n    }\n  `}(l)):(c=function QO(n,t){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function uF(n,t){return 1===t[0]?`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t);case 2:return function yF(n,t){return Se(n,t)?`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===n[1]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===n[0]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${n[1]};\n      int c = index - r * ${n[1]};\n      return ivec2(r, c);\n    }\n  `}(n,t);case 3:return function dF(n,t){const e=ir(["r","c","d"],n);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${e}\n      return ivec3(r, c, d);\n    }\n  `}(n,t);case 4:return function pF(n,t){const e=ir(["r","c","d","d2"],n);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${e}\n      return ivec4(r, c, d, d2);\n    }\n  `}(n,t);case 5:return function fF(n,t){const e=ir(["r","c","d","d2","d3"],n);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(n,t);case 6:return function mF(n,t){const e=ir(["r","c","d","d2","d3","d4"],n);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(n,t);default:throw new Error(`${n.length}-D output sampling is not yet supported`)}}(t.logicalShape,i),d=function tF(n){return`\n    void setOutput(float val) {\n      ${n.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),s&&(h+=iF),[h,u,d,o,c,a,e].join("\n")}function qr(n){const t=n.shapeInfo.logicalShape;switch(t.length){case 0:return function bF(n){const t=n.name,e="get"+t.charAt(0).toUpperCase()+t.slice(1);if(n.shapeInfo.isUniform)return`float ${e}() {return ${t};}`;const[s,r]=n.shapeInfo.texShape;if(1===s&&1===r)return`\n      float ${e}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[o,a]=n.shapeInfo.texShape;return`\n    float ${e}() {\n      vec2 uv = uvFromFlat(${o}, ${a}, ${lr(t)});\n      return sampleTexture(${t}, uv);\n    }\n  `}(n);case 1:return function vF(n){const t=n.name,e="get"+t.charAt(0).toUpperCase()+t.slice(1);if(n.shapeInfo.isUniform)return`\n      float ${e}(int index) {\n        ${Kr(n)}\n      }\n    `;const s=n.shapeInfo.texShape,r=s[0],o=s[1];if(1===o&&1===r)return`\n      float ${e}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const a=lr(t);return 1===o?`\n      float ${e}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${r}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `:1===r?`\n      float ${e}(int index) {\n        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `:`\n    float ${e}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${o}, index + ${a});\n      return sampleTexture(${t}, uv);\n    }\n  `}(n);case 2:return function CF(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=n.shapeInfo.texShape;if(null!=r&&Se(t,r))return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${r[1]}.0, ${r[0]}.0);\n      return sampleTexture(${e}, uv);\n    }\n  `;const{newShape:o,keptDims:a}=zs(t);if(o.length<t.length){const h=["row","col"];return`\n      ${qr(Xr(n,o))}\n      float ${s}(int row, int col) {\n        return ${s}(${Zr(h,a)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${Kr(n)}\n      }\n    `;const l=r[0],u=r[1],c=lr(e);return 1===u?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${e}, uv);\n    }\n  `:1===l?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${e}, uv);\n    }\n  `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${e}, uv);\n  }\n`}(n);case 3:return function IF(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t[1]*t[2],o=t[2],{newShape:a,keptDims:i}=zs(t);if(a.length<t.length){const m=["row","col","depth"];return`\n        ${qr(Xr(n,a))}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${Zr(m,i)});\n        }\n      `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${o}, 1)));\n        ${Kr(n)}\n      }\n    `;const u=n.shapeInfo.texShape,c=u[0],d=u[1],h=n.shapeInfo.flatOffset;if(d===r&&null==h)return`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${c}.0);\n          return sampleTexture(${e}, uv);\n        }\n      `;if(d===o&&null==h)return`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${c}.0);\n      return sampleTexture(${e}, uv);\n    }\n  `;return`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${o} + depth + ${lr(e)};\n        vec2 uv = uvFromFlat(${c}, ${d}, index);\n        return sampleTexture(${e}, uv);\n      }\n  `}(n);case 4:return function TF(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t[3],o=t[2]*r,a=t[1]*o,{newShape:i,keptDims:l}=zs(t);if(i.length<t.length){const m=["row","col","depth","depth2"];return`\n      ${qr(Xr(n,i))}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${Zr(m,l)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${a}, ${o}, ${r}, 1)));\n        ${Kr(n)}\n      }\n    `;const u=n.shapeInfo.flatOffset,c=n.shapeInfo.texShape,d=c[0],h=c[1];if(h===a&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${h}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(h===r&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${h}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${a} + col * ${o} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${h}, index + ${lr(e)});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);case 5:return function _F(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t[4],o=t[3]*r,a=t[2]*o,i=t[1]*a,{newShape:l,keptDims:u}=zs(t);if(l.length<t.length){const g=["row","col","depth","depth2","depth3"];return`\n      ${qr(Xr(n,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${Zr(g,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${a}, ${o}, ${r})) +\n          depth3;\n        ${Kr(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,h=d[0],p=d[1];if(p===i&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${a}, ${o}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(p===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} + depth * ${o} +\n          depth2 * ${r} + depth3 + ${lr(e)};\n      vec2 uv = uvFromFlat(${h}, ${p}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);case 6:return function $F(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:r,keptDims:o}=zs(t);if(r.length<t.length){const y=["row","col","depth","depth2","depth3","depth4"];return`\n      ${qr(Xr(n,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${Zr(y,o)});\n      }\n    `}const a=t[5],i=t[4]*a,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${a}, 1)));\n        ${Kr(n)}\n      }\n    `;const d=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,p=h[0],f=h[1];if(f===c&&null==d)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${a})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(f===a&&null==d)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${a} + depth4 + ${lr(e)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function Rx(n){switch(n.shapeInfo.logicalShape.length){case 0:return function xF(n){const t=n.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${Yt().texture2D}(${t}, halfCR);\n    }\n  `}(n);case 1:return function wF(n){const t=n.name,e="get"+t.charAt(0).toUpperCase()+t.slice(1),s=n.shapeInfo.texShape,r=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],o=Yt();return`\n    vec4 ${e}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${r[0]}, ${r[1]}, index);\n      return ${o.texture2D}(${t}, uv);\n    }\n  `}(n);case 2:return function NF(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=n.shapeInfo.texShape,o=r[0],a=r[1],i=Yt();if(null!=r&&Se(t,r))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${o}.0);\n\n        return ${i.texture2D}(${e}, uv);\n      }\n    `;const l=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(t[1]/2)}, ${l[0]}, ${l[1]}, row, col);\n      return ${i.texture2D}(${e}, uv);\n    }\n  `}(n);case 3:return function kF(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=n.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===t[0]){const h=[1,2],f=["b","row","col"];return`\n        ${Rx(Xr(n,t.slice(1)))}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${Zr(f,h)});\n        }\n      `}const a=o[0],i=o[1],l=Math.ceil(t[2]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${a}, ${i}, ${l*Math.ceil(t[1]/2)}, ${l}, b, row, col);\n      return ${Yt().texture2D}(${e}, uv);\n    }\n  `}(n);default:return function SF(n){const t=n.shapeInfo.logicalShape,e=t.length,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape,a=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],i=a[0],l=a[1],u=Math.ceil(t[e-1]/2);let c=u*Math.ceil(t[e-2]/2),d="int b, int row, int col",h=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let f=2;f<e-1;f++)d=`int b${f}, `+d,c*=t[e-f-1],h=`b${f} * ${c} + `+h;return`\n    vec4 ${r}(${d}) {\n      int index = ${h};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${i});\n      return ${Yt().texture2D}(${s}, uv);\n    }\n  `}(n)}}const rF="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",oF="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",aF="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",iF="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function lr(n){return`offset${n}`}function Kr(n){const t=n.name,e=V(n.shapeInfo.logicalShape);return e<2?`return ${t};`:`\n    for (int i = 0; i < ${e}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function Ye(n){if(n<=1)return"int";if(2===n)return"ivec2";if(3===n)return"ivec3";if(4===n)return"ivec4";if(5===n)return"ivec5";if(6===n)return"ivec6";throw Error(`GPU for rank ${n} is not yet supported`)}function Xr(n,t){const e=JSON.parse(JSON.stringify(n));return e.shapeInfo.logicalShape=t,e}function Zr(n,t){return t.map(e=>n[e]).join(", ")}function Fx(n,t){if(n.length!==t.length)throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);n.forEach((e,s)=>{const r=e.logicalShape,o=t[s],a=o.shape;if(!Se(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&o.isUniform)return;const i=e.texShape,l=o.isUniform?null:o.texData.texShape;if(!Se(i,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${l} must match`)})}const{addImpl:FF,bincountImpl:Px,bincountReduceImpl:PF,ceilImpl:LF,concatImpl:MF,expImpl:zF,expm1Impl:VF,floorImpl:BF,gatherV2Impl:WF,greaterImpl:GF,lessImpl:UF,linSpaceImpl:HF,logImpl:jF,maxImpl:qF,maximumImpl:KF,minimumImpl:XF,multiplyImpl:ZF,negImpl:YF,prodImpl:JF,rangeImpl:QF,rsqrtImpl:eP,simpleAbsImpl:Lx,sliceImpl:tP,stridedSliceImpl:nP,subImpl:sP,tileImpl:rP,topKImpl:oP,transposeImpl:hp,uniqueImpl:aP}=Wt;function Mx(n,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${n}.${e}`)}function Jt(n,t){return 1===t?[n]:Mx(n,t)}class lP{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const s=Jt("rc",e),r=Ye(e),o=function cP(n,t,e){if(1===n)return`rc > ${t[0]}`;let s="";for(let r=n-2;r<n;r++)s+=`${e[r]} >= ${t[r]}`,r<n-1&&(s+="||");return s}(e,t,s),a=function dP(n,t,e,s){if(1===n)return"";const r=s.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${e};\n  `}(e,t[t.length-1],t[t.length-2],s),i=function hP(n,t){const e=n.length,s=function uP(n,t){const e=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let o=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let a=2;a<n;a++)o=`${t[t.length-1-a]},`+o;e.push(o)}return e}(e,t);return 1===e?`getA(rc),\n            rc + 1 >= ${n[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(t,s);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${o}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class zx{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let s="";for(let r=0;r<4;r++){let o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),s+=`\n        ${o}\n        ${r>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${r}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${r>0?"}":""}\n      `}this.userCode=`\n      ${function pP(n){return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${ir(["r","c","d"],n)}\n      return ivec3(r, c, d);\n    }\n  `}(e)}\n      ${dp(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${s}\n\n        setOutput(result);\n      }\n    `}}class fP{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,s){const r=Bx(e,s),o=Wx(t,r,s);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const a=Vx(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const l=this.freeTextures[o].shift();return this.usedTextures[o].push(l),l}let i;return r===Ft.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===Ft.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===Ft.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===Ft.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===Ft.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[o].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,s,r){if(null==this.freeTextures)return;const o=Bx(s,r),a=Wx(e,o,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=Vx(e,o,this.gpgpu.gl,this.gpgpu.textureConfig,r),l=q().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=i):(this.freeTextures[a].push(t),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[a],c=u.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});for(const t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Vx(n,t,e,s,r){const o=function gP(n,t){switch(n){case Ft.PACKED_2X2_FLOAT32:return Ex(t);case Ft.PACKED_2X2_FLOAT16:return Dx(t);case Ft.UNPACKED_FLOAT32:return Tx(t);case Ft.UNPACKED_FLOAT16:return _x(t);case Ft.PACKED_4X1_UNSIGNED_BYTE:return $x(t);default:throw new Error(`Unknown physical texture type ${n}`)}}(t,s);let a;if(r){const[l,u]=Ur(n[0],n[1]);a=l*u}else{const[l,u]=Da(n[0],n[1]);a=l*u}const i=function mP(n,t){if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===n.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(e,o);return a*i}function Bx(n,t){if(n===on.UPLOAD)return Ft.PACKED_2X2_FLOAT32;if(n===on.RENDER||null==n)return function yP(n){return q().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?n?Ft.PACKED_2X2_FLOAT32:Ft.UNPACKED_FLOAT32:n?Ft.PACKED_2X2_FLOAT16:Ft.UNPACKED_FLOAT16}(t);if(n===on.DOWNLOAD||n===on.PIXELS)return Ft.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${n}`)}function Wx(n,t,e){return`${n[0]}_${n[1]}_${t}_${e}`}class Rs{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Gx="return abs(x);",uu="return x;";class Yr{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class SP{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,s=Jt("rc",e),r=Ye(e),o=function iP(n,t){if(1===n)return"rc";let e="";for(let s=0;s<n;s++)e+=t[s],s<n-1&&(e+=",");return e}(e,s),a=s.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const TP=fm,cu={};class OP extends ie{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!q().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const e=es(q().getNumber("WEBGL_VERSION"));this.binaryCache=function EP(n){return n in cu||(cu[n]={}),cu[n]}(q().getNumber("WEBGL_VERSION")),this.gpgpu=new KO(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;this.textureManager=new fP(this.gpgpu),this.numMBBeforeWarning=function RP(){return null==q().global.screen?1024:q().global.screen.height*q().global.screen.width*window.devicePixelRatio*600/1024/1024}(),this.texData=new ee(this,Cr())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,s){if((q().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||q().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===s&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:e,dtype:s,values:t,usage:on.UPLOAD,refCount:1,complexParentRefCount:0}),r}incRef(t){this.texData.get(t).refCount++}decRef(t){this.texData.has(t)&&this.texData.get(t).refCount--}decComplexRef(t){if(this.texData.has(t)){const e=this.texData.get(t);e.complexParentRefCount>0&&e.refCount--}}move(t,e,s,r){if(q().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:s,dtype:r,values:e,usage:on.UPLOAD,refCount:1,complexParentRefCount:0})}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.texData.has(e)){const s=this.texData.get(e);s.refCount--,s.refCount<1&&this.disposeData(e)}}readSync(t){const e=this.texData.get(t),{values:s,dtype:r,complexTensorInfos:o,slice:a,shape:i,isPacked:l}=e;if(null!=a){let h;h=l?new Yr(i,uu):new Rs(i,uu);const p=this.runWebGLProgram(h,[{dataId:t,shape:i,dtype:r}],r),f=this.readSync(p.dataId);return this.disposeIntermediateTensorInfo(p),f}if(null!=s)return this.convertAndCacheOnCPU(t);if("string"===r)return s;const u=null!=this.activeTimers;let c,d;return u&&(c=mn()),d="complex64"===r?cs(this.readSync(o.real.dataId),this.readSync(o.imag.dataId)):this.getValuesFromTexture(t),u&&(this.downloadWaitMs+=mn()-c),this.convertAndCacheOnCPU(t,d)}read(t){var e=this;return(0,M.Z)(function*(){if(e.pendingRead.has(t)){const m=e.pendingRead.get(t);return new Promise(g=>m.push(g))}const s=e.texData.get(t),{values:r,shape:o,slice:a,dtype:i,complexTensorInfos:l,isPacked:u}=s;if(null!=a){let m;m=u?new Yr(o,uu):new Rs(o,uu);const g=e.runWebGLProgram(m,[{dataId:t,shape:o,dtype:i}],i),y=e.read(g.dataId);return e.disposeIntermediateTensorInfo(g),y}if(null!=r)return e.convertAndCacheOnCPU(t);if(!q().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===q().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let d,h,c=null;if("complex64"!==i&&q().get("WEBGL_BUFFER_SUPPORTED")){d=e.decode(t);const m=e.texData.get(d.dataId);c=e.gpgpu.createBufferFromTexture(m.texture,...Aa(o))}if(e.pendingRead.set(t,[]),"complex64"!==i&&(yield e.gpgpu.createAndWaitForFence()),"complex64"===i){const m=yield Promise.all([e.read(l.real.dataId),e.read(l.imag.dataId)]);h=cs(m[0],m[1])}else if(null==c)h=e.getValuesFromTexture(t);else{const m=V(o);h=e.gpgpu.downloadFloat32MatrixFromBuffer(c,m)}null!=d&&e.disposeIntermediateTensorInfo(d);const p=e.convertAndCacheOnCPU(t,h),f=e.pendingRead.get(t);return e.pendingRead.delete(t),f.forEach(m=>m(p)),e.pendingDisposal.has(t)&&(e.pendingDisposal.delete(t),e.disposeData(t),e.pendingDeletes--),p})()}bufferSync(t){const e=this.readSync(t.dataId);let s=e;if("string"===t.dtype)try{s=e.map(r=>fr(r))}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Ae(t.shape,t.dtype,s)}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const s=t[e];if(n=s,!(q().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===n||5.96e-8<Math.abs(n)&&Math.abs(n)<65504))throw q().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${s} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${s} cannot be represented on this device.`)}var n}getValuesFromTexture(t){const{shape:e,dtype:s,isPacked:r}=this.texData.get(t),o=V(e);if(q().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const h=this.decode(t),p=this.texData.get(h.dataId),f=this.gpgpu.downloadMatrixFromPackedTexture(p.texture,...Aa(e)).subarray(0,o);return this.disposeIntermediateTensorInfo(h),f}const a=q().getBool("WEBGL_PACK")&&!0===r,i=a?up(e):e,l=a?new $O(i):new _O(i),u=this.runWebGLProgram(l,[{shape:i,dtype:s,dataId:t}],"float32"),c=this.texData.get(u.dataId),d=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,o);return this.disposeIntermediateTensorInfo(u),d}time(t){var e=this;return(0,M.Z)(function*(){const s=e.activeTimers,r=[];let o=!1;null==e.programTimersStack?(e.programTimersStack=r,o=!0):e.activeTimers.push(r),e.activeTimers=r,t();const a=Ve(e.activeTimers.map(u=>u.query)).filter(u=>null!=u),i=Ve(e.activeTimers.map(u=>u.name)).filter(u=>null!=u);e.activeTimers=s,o&&(e.programTimersStack=null);const l={uploadWaitMs:e.uploadWaitMs,downloadWaitMs:e.downloadWaitMs,kernelMs:null,wallMs:null};if(q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const u=yield Promise.all(a);l.kernelMs=function Qt(n){let t=0;for(let e=0;e<n.length;e++)t+=n[e];return t}(u),l.getExtraProfileInfo=()=>u.map((c,d)=>({name:i[d],ms:c})).map(c=>`${c.name}: ${c.ms}`).join(", ")}else l.kernelMs={error:"WebGL query timers are not supported in this environment."};return e.uploadWaitMs=0,e.downloadWaitMs=0,l})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:mn(),endMs:null}}endTimer(t){return q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=mn(),t)}getQueryTime(t){var e=this;return(0,M.Z)(function*(){return q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?e.gpgpu.waitForQueryAndGetTime(t):t.endMs-t.startMs})()}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;if(this.texData.get(t).complexParentRefCount>0)return void this.texData.get(t).refCount--;this.releaseGPUData(t);const{complexTensorInfos:e}=this.texData.get(t);null!=e&&(this.texData.get(e.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(e.real),this.texData.get(e.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(e.imag)),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:s,texShape:r,usage:o,isPacked:a,slice:i}=this.texData.get(t),l=i&&i.origDataId||t,u=this.dataRefCount.get(l);u>1?this.dataRefCount.set(l,u-1):(this.dataRefCount.delete(l),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,s),this.textureManager.releaseTexture(e,r,o,a)));const c=this.texData.get(t);c.texture=null,c.texShape=null,c.isPacked=!1,c.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return q().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Cr().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){const s=this.getCPUBackend();return!q().getBool("IS_TEST")&&!this.warnedAboutCPUBackend&&null==s&&(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=s&&t.every(r=>null==this.texData.get(r.dataId).texture&&V(r.shape)<e)}getGPGPUContext(){return this.gpgpu}where(t){Dr("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return TP(t.shape,e)}packedUnaryOp(t,e,s){const r=new Yr(t.shape,e);return this.compileAndRun(r,[t],s)}abs(t){if(this.shouldExecuteOnCPU([t])&&"complex64"!==t.dtype){const s=Lx(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,s)}if(q().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Gx,t.dtype);const e=new Rs(t.shape,Gx);return this.compileAndRun(e,[t])}makeTensorInfo(t,e,s){let r;if("string"===e&&null!=s&&s.length>0&&to(s[0])){const o=s.map(a=>ra(a));r=this.write(o,t,e)}else r=this.write(s,t,e);return this.texData.get(r).usage=null,{dataId:r,shape:t,dtype:e}}makeOutput(t,e,s){const{dataId:r}=this.makeTensorInfo(t,e,s);return Cr().makeTensorFromDataId(r,t,e,this)}unpackTensor(t){const e=new SP(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new lP(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const s=[Hr(t.shape),...jr(t.shape)],r={dtype:t.dtype,shape:s,dataId:t.dataId},o=[Hr(e),...jr(e)],a=new zx(o,s),l=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:l.dataId,shape:e,dtype:l.dtype}}decode(t){const e=this.texData.get(t),{isPacked:s,shape:r,dtype:o}=e,a=up(r);let i;return i=s?new TO(a):new SO(a),{dtype:o,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:o,dataId:t}],o,null,!0).dataId}}runWebGLProgram(t,e,s,r,o=!1){const a=this.makeTensorInfo(t.outputShape,s),i=this.texData.get(a.dataId);if(t.packedOutput&&(i.isPacked=!0),t.outPackingScheme===Gr.DENSE){const m=Aa(t.outputShape);i.texShape=m.map(g=>2*g)}if(null!=t.outTexUsage&&(i.usage=t.outTexUsage),0===V(a.shape))return i.values=Ut(a.dtype,0),a;const l=[],u=e.map(m=>{if("complex64"===m.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let g=this.texData.get(m.dataId);if(null==g.texture){if(!t.packedInputs&&V(m.shape)<=q().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:m.shape,texData:null,isUniform:!0,uniformValues:g.values};t.packedInputs&&(g.isPacked=!0,g.shape=m.shape)}else if(!!g.isPacked!=!!t.packedInputs)m=g.isPacked?this.unpackTensor(m):this.packTensor(m),l.push(m),g=this.texData.get(m.dataId);else if(g.isPacked&&!ou(g.shape,m.shape)){const y=m,x=m.shape;m.shape=g.shape,m=this.packedReshape(m,x),l.push(m),g=this.texData.get(m.dataId),y.shape=x}return this.uploadToGPU(m.dataId),{shape:m.shape,texData:g,isUniform:!1}});this.uploadToGPU(a.dataId);const c={shape:a.shape,texData:i,isUniform:!1},d=function OF(n,t,e){let s="";t.concat(e).forEach(a=>{s+=`${a.shape}_${a.isUniform?"uniform":a.texData.texShape}_${null!=a.texData&&null!=a.texData.slice&&a.texData.slice.flatOffset>0}`});let o=n.constructor.name;return o+="_"+s+"_"+n.userCode,o}(t,u,c),h=this.getAndSaveBinary(d,()=>function AF(n,t,e,s){const r=t.userCode,o=e.map((p,f)=>{const m={logicalShape:p.shape,texShape:p.isUniform?null:p.texData.texShape,isUniform:p.isUniform,isPacked:!p.isUniform&&p.texData.isPacked,flatOffset:null};return null!=p.texData&&null!=p.texData.slice&&p.texData.slice.flatOffset>0&&(m.flatOffset=p.texData.slice.flatOffset),{name:t.variableNames[f],shapeInfo:m}}),a=o.map(p=>p.shapeInfo),i={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=ZO(o,i,r,t.packedInputs),u=n.createProgram(l);let c=null;const d=n.getUniformLocation(u,"NAN",!1);1===q().getNumber("WEBGL_VERSION")&&(c=n.getUniformLocation(u,"INFINITY",!1));const h={};for(let p=0;p<t.variableNames.length;p++){const f=t.variableNames[p],m=!1;h[f]=n.getUniformLocation(u,f,m),h[`offset${f}`]=n.getUniformLocation(u,`offset${f}`,m)}return{program:t,source:l,webGLProgram:u,uniformLocations:h,inShapeInfos:a,outShapeInfo:i,infLoc:c,nanLoc:d}}(this.gpgpu,t,u,c)),p=null!=this.activeTimers;let f;if(p&&(f=this.startTimer()),function RF(n,t,e,s,r){Fx(t.inShapeInfos,e),Fx([t.outShapeInfo],[s]);const o=s.texData.texture,a=s.texData.texShape;s.texData.isPacked?n.setOutputPackedMatrixTexture(o,a[0],a[1]):n.setOutputMatrixTexture(o,a[0],a[1]),n.setProgram(t.webGLProgram),1===q().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&n.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&n.gl.uniform1f(t.nanLoc,NaN),e.forEach((i,l)=>{const u=t.program.variableNames[l],c=t.uniformLocations[u],d=t.uniformLocations[`offset${u}`];if(null!=c){if(i.isUniform){if(V(i.shape)<2)n.gl.uniform1f(c,i.uniformValues[0]);else{let h=i.uniformValues;h instanceof Float32Array||(h=new Float32Array(h)),n.gl.uniform1fv(c,h)}return}null!=i.texData.slice&&null!=d&&n.gl.uniform1i(d,i.texData.slice.flatOffset),n.setInputMatrixTexture(i.texData.texture,c,l)}}),r?.(n,t.webGLProgram),n.executeProgram()}(this.gpgpu,h,u,c,r),l.forEach(m=>this.disposeIntermediateTensorInfo(m)),p&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!q().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===o){const m=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),m}return a}compileAndRun(t,e,s,r,o=!1){const a=this.runWebGLProgram(t,e,s=s||e[0].dtype,r,o);return Cr().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(q().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),null!=this.canvas&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=F(()=>{if(!q().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=q().getBool("DEBUG");q().set("DEBUG",!1);const e=this.abs(Ne(1e-8)).dataSync()[0];if(q().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:s,dtype:r,values:o,texture:a,usage:i,isPacked:l}=e;if(null!=a)return;const u=null!=this.activeTimers;let c;u&&(c=mn());let d=e.texShape;if(null==d&&(d=function xO(n,t=!1){let e=q().getNumber("WEBGL_MAX_TEXTURE_SIZE");t&&(e*=2,1===(n=n.map((r,o)=>o>=n.length-2?ye(n[o]):n[o])).length&&(n=[2,n[0]])),2!==n.length&&(n=zs(n).newShape);let s=V(n);if(n.length<=1&&s<=e)return[1,s];if(2===n.length&&n[0]<=e&&n[1]<=e)return n;if(3===n.length&&n[0]*n[1]<=e&&n[2]<=e)return[n[0]*n[1],n[2]];if(3===n.length&&n[0]<=e&&n[1]*n[2]<=e)return[n[0],n[1]*n[2]];if(4===n.length&&n[0]*n[1]*n[2]<=e&&n[3]<=e)return[n[0]*n[1]*n[2],n[3]];if(4===n.length&&n[0]<=e&&n[1]*n[2]*n[3]<=e)return[n[0],n[1]*n[2]*n[3]];if(t){const r=Hr(n);let o=2,a=2;return n.length&&([o,a]=jr(n)),s=r*(o/2)*(a/2),Kt(s).map(i=>2*i)}return Kt(s)}(s,l),e.texShape=d),null!=o){const h=up(s);let p,f=d[1],m=d[0];const g=o instanceof Uint8Array;l?([f,m]=Ur(d[0],d[1]),p=new DO(h,[m,f],g)):p=new EO(h,[m,f],g);const y=this.makeTensorInfo([m,f],r);this.texData.get(y.dataId).usage=g?on.PIXELS:on.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(y.dataId),f,m,o);const v=this.runWebGLProgram(p,[y],r,null,!0),b=this.texData.get(v.dataId);e.texture=b.texture,e.texShape=b.texShape,e.isPacked=b.isPacked,e.usage=b.usage,this.disposeIntermediateTensorInfo(y),this.texData.delete(v.dataId),e.values=null,u&&(this.uploadWaitMs+=mn()-c)}else{const h=this.acquireTexture(d,i,r,l);e.texture=h}}convertAndCacheOnCPU(t,e){const s=this.texData.get(t),{dtype:r}=s;return this.releaseGPUData(t),null!=e&&(s.values=function FP(n,t){if("float32"===t||"complex64"===t)return n;if("int32"===t||"bool"===t){const e="int32"===t?new Int32Array(n.length):new Uint8Array(n.length);for(let s=0;s<e.length;++s)e[s]=Math.round(n[s]);return e}throw new Error(`Unknown dtype ${t}`)}(e,r)),s.values}acquireTexture(t,e,s,r){if(this.numBytesInGPU+=this.computeBytes(t,s),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const o=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${o} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*Np(e)}}Xp()&&Tf("webgl",()=>new OP,2);class Jr{constructor(t,e,s){this.variableNames=["A","B"],this.outputShape=Re(e,s),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class Fa{constructor(t,e,s,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Re(e,s);const o=this.outputShape.length;let a="";if(r)if(0===o||1===V(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${Ye(o)} coords = getOutputCoords();\n        `,1===o)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const l=Jt("coords",o);a+=`\n            bool nextRowOutOfBounds =\n              (${l[o-2]} + 1) >= ${this.outputShape[o-2]};\n            bool nextColOutOfBounds =\n              (${l[o-1]} + 1) >= ${this.outputShape[o-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function an(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const MP={kernelName:ai,backendName:"webgl",kernelFunc:an};function Os(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,o=e.makeTensorInfo(s.shape,"complex64"),a=e.texData.get(o.dataId),i=an({inputs:{x:s},backend:e});e.texData.get(i.dataId).complexParentRefCount++;const u=an({inputs:{x:r},backend:e});return e.texData.get(u.dataId).complexParentRefCount++,a.complexTensorInfos={real:i,imag:u},o}const zP={kernelName:Du,backendName:"webgl",kernelFunc:Os},Hx="return (a < 0.) ? b * a : a;",jx="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",BP={kernelName:ii,backendName:"webgl",kernelFunc:function VP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:o}=s,a=e.makeTensorInfo([],"float32",gs(o,"float32")),i=q().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fa(jx,r.shape,a.shape):new Jr(Hx,r.shape,a.shape),l=e.runWebGLProgram(i,[r,a],r.dtype);return e.disposeIntermediateTensorInfo(a),l}},qx="return (a < 0.) ? b * a : a;",Kx="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",GP={kernelName:Si,backendName:"webgl",kernelFunc:function WP(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t,o=q().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fa(Kx,s.shape,r.shape):new Jr(qx,s.shape,r.shape);return e.runWebGLProgram(o,[s,r],s.dtype)}};function Le({opSnippet:n,packedOpSnippet:t,cpuKernelImpl:e,dtype:s}){return({inputs:r,backend:o})=>{const{x:a}=r,i=o,l=s||a.dtype;if(i.shouldExecuteOnCPU([a])&&null!=e){const d=i.texData.get(a.dataId),h=e(d.values,l);return i.makeTensorInfo(a.shape,l,h)}let c;return c=q().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Yr(a.shape,t):new Rs(a.shape,n),i.runWebGLProgram(c,[a],l)}}function Vt({opSnippet:n,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:o}){return({inputs:a,backend:i})=>{const{a:l,b:u}=a,c=i;if(s&&"complex64"===l.dtype){const f=c.texData.get(l.dataId),m=c.texData.get(u.dataId),[g,y]=[[f.complexTensorInfos.real,m.complexTensorInfos.real],[f.complexTensorInfos.imag,m.complexTensorInfos.imag]].map(v=>{const[b,w]=v,k={dataId:b.dataId,dtype:b.dtype,shape:l.shape},N={dataId:w.dataId,dtype:w.dtype,shape:u.shape},S=new Jr(n,l.shape,u.shape);return c.runWebGLProgram(S,[k,N],ln(b.dtype,w.dtype))}),x=Os({inputs:{real:g,imag:y},backend:c});return c.disposeIntermediateTensorInfo(g),c.disposeIntermediateTensorInfo(y),x}const d=o||ln(l.dtype,u.dtype);if(c.shouldExecuteOnCPU([l,u])&&null!=r){const f=c.texData.get(l.dataId),m=c.texData.get(u.dataId),[g,y]=r(l.shape,u.shape,f.values,m.values,d),x=c.makeTensorInfo(y,d);return c.texData.get(x.dataId).values=g,x}let p;return p=q().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new Fa(t,l.shape,u.shape,e):new Jr(n,l.shape,u.shape),c.runWebGLProgram(p,[l,u],d)}}function hu(n,t=!1){if("linear"===n)return"return x;";if("relu"===n)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===n)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===n)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===n)return t?Kx:qx;if("leakyrelu"===n)return t?jx:Hx;throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`)}class Zx{constructor(t,e,s,r=!1,o=!1,a=!1,i=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=s;const d=Math.ceil((r?t[1]:t[2])/2),h=r?"i * 2, rc.y":"rc.y, i * 2",p=o?"rc.z, i * 2":"i * 2, rc.z",f=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],m=o?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let g="",y="";i&&(g=l?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,y="result = activation(result);");const x=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let v="rc.x",b="rc.x";t[0]<e[0]?v=`int(min(float(rc.x), ${t[0]-1}.))`:e[0]<t[0]&&(b=`int(min(float(rc.x), ${e[0]-1}.))`),this.userCode=`\n      ${g}\n\n      const float sharedDimension = ${d}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${d}; i++) {\n          int batchA = ${v};\n          int batchB = ${b};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${f[0]} * ${m[0]});\n          result += (${f[1]} * ${m[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${x}\n\n        ${y}\n\n        setOutput(result);\n      }\n    `}}class Jx{constructor(t,e,s){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Re(e,s),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const Qx="return a * b;";function eb(n){const{inputs:t,backend:e}=n,{a:s,b:r}=t,o=ln(s.dtype,r.dtype);if("complex64"===s.dtype){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),u=new Jx("return areal * breal - aimag * bimag;",s.shape,r.shape),c=new Jx("return areal * bimag + aimag * breal;",s.shape,r.shape),d=[{dataId:i.complexTensorInfos.real.dataId,dtype:i.complexTensorInfos.real.dtype,shape:s.shape},{dataId:i.complexTensorInfos.imag.dataId,dtype:i.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:r.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:r.shape}],h=e.runWebGLProgram(u,d,"float32"),p=e.runWebGLProgram(c,d,"float32"),f=Os({inputs:{real:h,imag:p},backend:e});return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(p),f}if(e.shouldExecuteOnCPU([s,r])){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),[u,c]=ZF(s.shape,r.shape,i.values,l.values,o),d=e.makeTensorInfo(c,o);return e.texData.get(d.dataId).values=u,d}let a;return a=q().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fa(Qx,s.shape,r.shape):new Jr(Qx,s.shape,r.shape),e.runWebGLProgram(a,[s,r],o)}const jP={kernelName:Oo,backendName:"webgl",kernelFunc:eb};function ue(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:o}=s,a=e,i=V(r.shape),l=Ms(o,i),u=V(l);C(i===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);const c=a.texData.get(r.dataId);return!c.isPacked||ou(r.shape,l)||null!==c.texture&&ou(c.shape,l)?(a.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function qP(n,t,e){const s=[Hr(n.shape),...jr(n.shape)],r={dtype:n.dtype,shape:s,dataId:n.dataId},o=[Hr(t),...jr(t)],a=new zx(o,s),l=e.runWebGLProgram(a,[r],n.dtype,null,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(r,l,a)}const KP={kernelName:Ti,backendName:"webgl",kernelFunc:ue};class tb{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:a}=t;this.outputShape=[r,a];const i=4*Math.floor(s/4),l=s%4;let u="sumValue += dot(values, ones);";if(null!=e){const d=1/e;u=`sumValue += dot(values * ${We(d)?d.toPrecision(2):d}, ones);`}let c="";o%s>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class XP{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:a}=t;this.outputShape=[r,a];let i="0.0",l="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",l="min"):"max"===e&&(i="-1.0 / 1e-20",l="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const c=4*Math.floor(s/4),d=s%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${l}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${f}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===d}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===d}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===d}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}function ur(n,t,e,s){const r=function ZP(n){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const e=t.length?t[t.length-1].outSize:n[1],s=vl(e);t.push({inSize:e,windowSize:s,outSize:Math.ceil(e/s)})}return t}(n.shape);let o=n;for(let a=0;a<r.length;a++){const{inSize:i,windowSize:l,outSize:u}=r[a];let c,d;c="mean"===e?0===a?new tb({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},i):new tb({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u}):new XP({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},e),d=o,o=s.runWebGLProgram(c,[o],t),d.dataId!==n.dataId&&s.disposeIntermediateTensorInfo(d)}return o}class YP{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let a=0;a<s.length;a++)s[a]=t[e[a]];this.outputShape=s,this.rank=s.length;const r=Ye(this.rank),o=function JP(n){const t=n.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let r=0;r<n.length;r++)s[n[r]]=e[r];return s.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class QP{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const s=new Array(t.length);for(let c=0;c<s.length;c++)s[c]=t[e[c]];if(this.outputShape=s,this.rank=s.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Ye(this.rank),o=Mx("rc",this.rank),a=new Array(this.rank);for(let c=0;c<e.length;c++)a[e[c]]=o[c];const i=`vec2(${a.slice(-2).join()})`,l=`++${o[this.rank-1]} < ${s[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${l}) {\n        result[1] = ${u};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${s[this.rank-2]}) {\n        result[2] = ${u};\n        if(${l}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function pu(n,t,e){const s=q().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new QP(n.shape,t):new YP(n.shape,t);return e.runWebGLProgram(s,[n],n.dtype)}function pp(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;return function eL(n,t,e,s){const o=n.shape.length,a=Te(t,n.shape);let i=a;const l=xt(i,o),u=null!=l;let c=n;u&&(c=pu(n,l,s),i=Nt(i.length,o)),Mt("sum",i,o);const[d,h]=At(c.shape,i);let p=d;e&&(p=yt(d,a));const f=V(h),y=ue({inputs:{x:c},attrs:{shape:[V(n.shape)/f,f]},backend:s}),v=ur(y,pc(n.dtype),"sum",s),b=ue({inputs:{x:v},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(y),s.disposeIntermediateTensorInfo(v),u&&s.disposeIntermediateTensorInfo(c),b}(r,o,a,e)}const tL={kernelName:Ri,backendName:"webgl",kernelFunc:pp};function tn(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{perm:o}=s,a=e,l=new Array(r.shape.length);for(let c=0;c<l.length;c++)l[c]=r.shape[o[c]];let u;if(a.shouldExecuteOnCPU([r])){const d=a.texData.get(r.dataId).values,h=hp(d,r.shape,r.dtype,o,l);u=a.makeTensorInfo(l,r.dtype),a.texData.get(u.dataId).values=h}else u=pu(r,o,a);return u}const nL={kernelName:Li,backendName:"webgl",kernelFunc:tn};function fu({a:n,b:t,transposeA:e,transposeB:s,backend:r,bias:o=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:l=null}){const u=n.shape.length,c=t.shape.length,d=e?n.shape[u-2]:n.shape[u-1],h=s?t.shape[c-1]:t.shape[c-2],p=e?n.shape[u-1]:n.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],m=n.shape.slice(0,-2),g=t.shape.slice(0,-2),y=V(m),x=V(g);C(u>=2&&c>=2&&(y===x||1===y||1===x),()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${m}) and (${g}).`);const w=(y>x?n.shape.slice(0,-2):t.shape.slice(0,-2)).concat([p,f]);C(d===h,()=>`Error in matMul: inner shapes (${d}) and (${h}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`);const k=e?[y,d,p]:[y,p,d],N=s?[x,f,h]:[x,h,f],S=ue({inputs:{x:n},backend:r,attrs:{shape:k}}),_=ue({inputs:{x:t},backend:r,attrs:{shape:N}}),A=[S,_],z=Math.max(y,x),U=e?S.shape[1]:S.shape[2],G=null!=o,H=null!=a,W="leakyrelu"===l,B=null!=l?hu(l,!0):null;let j;if((1===p||1===f)&&U>1e3&&!1===(G||H||W||null!=B)){let Y=S,Q=_;e&&(Y=tn({inputs:{x:S},backend:r,attrs:{perm:[0,2,1]}}),A.push(Y)),s&&(Q=tn({inputs:{x:_},backend:r,attrs:{perm:[0,2,1]}}),A.push(Q));const se=1===f;let re=Y;1!==f&&(re=ue({inputs:{x:Y},backend:r,attrs:{shape:[z,U,1]}}),A.push(re));const le=1===f?2:1;let oe=Q;se&&(oe=ue({inputs:{x:Q},backend:r,attrs:{shape:[z,1,U]}}),A.push(oe));const fe=eb({inputs:{a:re,b:oe},backend:r});j=pp({inputs:{x:fe},backend:r,attrs:{axis:le,keepDims:!0}}),A.push(fe)}else{const Y=ln(n.dtype,t.dtype),Q=new Zx(k,N,[z,p,f],e,s,G,B,H,W),ne=[S,_];if(null!=o&&ne.push(o),H&&ne.push(a),W){const se=r.makeTensorInfo([],"float32",gs(i,"float32"));ne.push(se),A.push(se)}j=r.runWebGLProgram(Q,ne,Y)}const X=ue({inputs:{x:j},backend:r,attrs:{shape:w}});A.push(j);for(const Y of A)r.disposeIntermediateTensorInfo(Y);return X}const rL={kernelName:Bi,backendName:"webgl",kernelFunc:function sL(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o,bias:a,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:d}=s;return fu({a:r,b:o,transposeA:l,transposeB:u,backend:e,bias:a,preluActivationWeights:i,leakyreluAlpha:d,activation:c})}},sb="return abs(x);",aL={kernelName:Va,backendName:"webgl",kernelFunc:function oL(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const o=e.texData.get(s.dataId),a=Lx(o.values);return e.makeTensorInfo(s.shape,s.dtype,a)}let r;return r=q().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Yr(s.shape,sb):new Rs(s.shape,sb),e.runWebGLProgram(r,[s],s.dtype)}},lL=Le({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),uL={kernelName:ro,backendName:"webgl",kernelFunc:lL},dL=Le({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),hL={kernelName:oo,backendName:"webgl",kernelFunc:dL},rb="return a + b;",pL=Vt({opSnippet:rb,packedOpSnippet:rb,supportsComplex:!0,cpuKernelImpl:FF}),fL={kernelName:hr,backendName:"webgl",kernelFunc:pL};class mL{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((o,a)=>`T${a}`);const s=[];this.variableNames.forEach(o=>{s.push(`float v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class gL{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((o,a)=>`T${a}`);const s=[];this.variableNames.forEach(o=>{s.push(`vec4 v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const yL={kernelName:Su,backendName:"webgl",kernelFunc:function mu(n){const{inputs:t,backend:e}=n,s=t;if(1===s.length)return an({inputs:{x:s[0]},backend:e});if(s.length>q().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const l=Math.floor(s.length/2),u=mu({inputs:s.slice(0,l),backend:e}),c=mu({inputs:s.slice(l),backend:e});return mu({inputs:[u,c],backend:e})}const r=s.map(l=>l.dtype).reduce((l,u)=>ln(l,u)),o=s.map(l=>l.shape),i=q().getBool("WEBGL_PACK")?new gL(s[0].shape,o):new mL(s[0].shape,o);return e.runWebGLProgram(i,s,r)}},bL={kernelName:"All",backendName:"webgl",kernelFunc:function xL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Te(o,r.shape);let u=l;const c=xt(u,i);let d=r;null!=c&&(d=tn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Nt(u.length,i)),Mt("all",u,i);const[h,p]=At(d.shape,u),m=ue({inputs:{x:d},backend:e,attrs:{shape:[-1,V(p)]}}),g=ur(m,m.dtype,"all",e);let y;return y=ue(a?{inputs:{x:g},backend:e,attrs:{shape:yt(h,l)}}:{inputs:{x:g},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(g),null!=c&&e.disposeIntermediateTensorInfo(d),y}},vL={kernelName:"Any",backendName:"webgl",kernelFunc:function wL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Te(o,r.shape);let u=l;const c=xt(u,i);let d=r;null!=c&&(d=tn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Nt(u.length,i)),Mt("any",u,i);const[h,p]=At(d.shape,u),m=ue({inputs:{x:d},backend:e,attrs:{shape:[-1,V(p)]}}),g=ur(m,m.dtype,"any",e);let y;return y=ue(a?{inputs:{x:g},backend:e,attrs:{shape:yt(h,l)}}:{inputs:{x:g},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(g),null!=c&&e.disposeIntermediateTensorInfo(d),y}};class NL{constructor(t,e,s){this.variableNames=["A"];const{windowSize:r,batchSize:o,outSize:a}=t;s||this.variableNames.push("bestIndicesA"),this.outputShape=[o,a],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${s?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===e?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class CL{constructor(t,e,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,C(t.length>2,()=>`Packed arg${s.charAt(0).toUpperCase()+s.slice(1)} supports only inputs with rank above 2.`);const a=Math.ceil(t[t.length-1]/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,l=i.length,u=Ye(l),c=Jt("coords",l);let d,h;if(1===a){h=l+1;const S=Ye(h);d=`\n        ${S} sourceLocR = ${S}(${c.join()}, 0);\n        ++${c[l-1]};\n        ${S} sourceLocG = ${S}(${c.join()}, 0);\n        ++${c[l-2]};\n        ${S} sourceLocA = ${S}(${c.join()}, 0);\n        --${c[l-1]};\n        ${S} sourceLocB = ${S}(${c.join()}, 0);\n        --${c[l-2]};`}else h=l,d=`\n        ${u} sourceLocR = coords;\n        ++${c[l-1]};\n        ${u} sourceLocG = coords;\n        ++${c[l-2]};\n        ${u} sourceLocA = coords;\n        --${c[l-1]};\n        ${u} sourceLocB = coords;\n        --${c[l-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),f="."+p[h-1],m=p.map(S=>"int "+S),g=Jt("sourceLocR",h-1).concat("inIdx.r"),y=Jt("sourceLocG",h-1).concat("inIdx.g"),x=Jt("sourceLocB",h-1).concat("inIdx.b"),v=Jt("sourceLocA",h-1).concat("inIdx.a"),b="max"===s?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${v.join()})));`,k=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${v.join()}) : 0.)`,N=r?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${N}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[l-1]} < ${i[l-1]-1};\n        bool hasNextRow = ${c[l-2]} < ${i[l-2]-1};\n        ${d}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${b}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function ob(n,t,e,s=null){let r=t.shape[0],o=t.shape[1];null!=s&&(r=s.shape[0],o=s.shape[1]);const a=vl(o),i={windowSize:a,inSize:o,batchSize:r,outSize:Math.ceil(o/a)},l=new NL(i,e,null==s),u=[t];null!=s&&u.push(s);const c=n.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const d=ob(n,t,e,c);return n.disposeIntermediateTensorInfo(c),d}function ab(n,t,e,s=null){const r=null!=s?s.shape:t.shape,a=vl(r[r.length-1]),i=new CL(r,a,e,null==s),u=n.runWebGLProgram(i,null==s?[t]:[t,s],"int32");if(u.shape.length===t.shape.length){const c=ab(n,t,e,u);return n.disposeIntermediateTensorInfo(u),c}return u}function ib(n,t,e,s){const r=[e];if(Mt("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!q().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const o=[],[a,i]=At(t.shape,r),l=V(i),u=ue({inputs:{x:t},backend:n,attrs:{shape:[-1,l]}});o.push(u);const c=ob(n,u,s);o.push(c);const d=ue({inputs:{x:c},backend:n,attrs:{shape:a}});return o.forEach(h=>n.disposeIntermediateTensorInfo(h)),d}return ab(n,t,s)}const IL={kernelName:Ba,backendName:"webgl",kernelFunc:function kL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;let a=Te(o,r.shape);const i=xt(a,r.shape.length);let l=r;const u=[];null!=i&&(l=tn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Nt(a.length,l.shape.length)),Mt("argMax",[a[0]],l.shape.length);const c=ib(e,l,a[0],"max");return u.forEach(d=>e.disposeIntermediateTensorInfo(d)),c}},TL={kernelName:Wa,backendName:"webgl",kernelFunc:function SL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;let a=Te(o,r.shape);const i=xt(a,r.shape.length);let l=r;const u=[];null!=i&&(l=tn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Nt(a.length,l.shape.length)),Mt("argMin",[a[0]],l.shape.length);const c=ib(e,l,a[0],"min");return u.forEach(d=>e.disposeIntermediateTensorInfo(d)),c}},$L=Le({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),EL={kernelName:ao,backendName:"webgl",kernelFunc:$L},AL=Le({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),RL={kernelName:lo,backendName:"webgl",kernelFunc:AL},FL=Le({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),PL={kernelName:uo,backendName:"webgl",kernelFunc:FL},zL=Vt({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),VL={kernelName:ho,backendName:"webgl",kernelFunc:zL},WL=Le({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),GL={kernelName:co,backendName:"webgl",kernelFunc:WL};class Pa{constructor(t,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,d=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.top,f=t.padInfo.left;this.outputShape=t.outShape;const m="avg"===e;let x="0.0";if(m||(x="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${l});\n        const ivec2 pads = ivec2(${p}, ${f});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${d};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?o?`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`:`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let b=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(b="avgValue / count");const w=4*Math.floor(a/4),k=a%4,N=`\n      if (${m}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${p}, ${f});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${d};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${w}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${N}\n          }\n\n          int xC = xCCorner + ${w};\n          if (${1===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${N}\n          } else if (${2===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${N}\n          } else if (${3===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${N}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class fp{constructor(t,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,l=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,d=t.dilationHeight,h=t.dilationWidth,p=t.effectiveFilterDepth,f=t.effectiveFilterHeight,m=t.effectiveFilterWidth,g=t.padInfo.front,y=t.padInfo.top,x=t.padInfo.left;this.outputShape=t.outShape;const v="avg"===e;let b="0.0";if(v||(b="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${l}, ${u});\n        const ivec3 pads = ivec3(${g}, ${y}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${f};\n                wR += ${d}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${m};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?o?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${f} * ${m} +\n                      wR * ${m} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let k=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(k="avgValue / count");const N=4*Math.floor(a/4),S=a%4,_=`\n      if (${v}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${l}, ${u});\n      const ivec3 pads = ivec3(${g}, ${y}, ${x});\n      const float initializationValue = ${b};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${b});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${f};\n            wR += ${d}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${N}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${_}\n            }\n\n            int xC = xCCorner + ${N};\n            if (${1===S}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${_}\n            } else if (${2===S}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${_}\n            } else if (${3===S}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${_}\n            }\n          }\n          setOutput(${k});\n        }\n      }\n    `}}const HL={kernelName:Ga,backendName:"webgl",kernelFunc:function UL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Ra(r,"avgPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(mt(a,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=yn(r.shape,o,a,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&Se(c.inShape,c.outShape))return an({inputs:{x:r},backend:e});const d=new Pa(c,"avg",!1);return e.runWebGLProgram(d,[r],"float32")}},qL={kernelName:Ua,backendName:"webgl",kernelFunc:function jL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s,d=rs(r.shape,o,a,[1,1,1],i,l,u),h=new fp(d,"avg",!1);return e.runWebGLProgram(h,[r],"float32")}};class KL{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const l=t.effectiveFilterHeight,u=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${l-1-t.padInfo.top}, ${u-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${l};\n            wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${t.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class XL{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const d=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${d-1-t.padInfo.front}, ${h-1-t.padInfo.top}, ${p-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterDepth*t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const YL={kernelName:Eu,backendName:"webgl",kernelFunc:function ZL(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,h=rs(a.shape,i,l,[1,1,1],u,c),p=new XL(h);return e.runWebGLProgram(p,[r],a.dtype)}},QL={kernelName:$u,backendName:"webgl",kernelFunc:function JL(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o;Ra([r,o],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=yn(a.shape,i,l,1,u),d=new KL(c);return e.runWebGLProgram(d,[r],a.dtype)}},tM={kernelName:Ha,backendName:"webgl",kernelFunc:function eM(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o}=t,{transposeA:a,transposeB:i}=s;return fu({a:r,b:o,transposeA:a,transposeB:i,backend:e})}};class nM{constructor(t,e,s,r,o,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Re(t,e),Re(t,s);let i="0.0";null!=r&&(Re(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="1.0";null!=o&&(Re(t,o),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${l};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class sM{constructor(t,e,s,r,o,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Re(t,e),Re(t,s);let i="vec4(0.0)";null!=r&&(Re(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="vec4(1.0)";null!=o&&(Re(t,o),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${l};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const rM={kernelName:si,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,mean:r,variance:o,offset:a,scale:i}=n;C(r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),C(null==a||r.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),C(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=e;null==l&&(l=.001);const u=[s,r,o];let c=null;null!=a&&(c=a.shape,u.push(a));let d=null;null!=i&&(d=i.shape,u.push(i));const h=q().getBool("WEBGL_PACK_NORMALIZATION")?new sM(s.shape,r.shape,o.shape,c,d,l):new nM(s.shape,r.shape,o.shape,c,d,l);return t.runWebGLProgram(h,u,u[0].dtype)}};class oM{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=Ye(this.rank),s=`uniform int start[${this.rank}];`,r=function aM(n){if(1===n)return"sourceLoc";if(n<=6)return mp.slice(0,n).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${n} is not yet supported`)}(this.rank);let o;o=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((i,l)=>`sourceLoc.${mp[l]} = start[${l}] + coords.${mp[l]};`).join("\n")}\n      `,this.userCode=`\n      ${s}\n      void main() {\n        ${o}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,s)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(s,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const mp=["x","y","z","w","u","v"];class iM{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=Ye(this.rank),s=Jt("coords",this.rank),r=Jt("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${o})`,i=`\n      result.x = ${a};\n      if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,l=1===this.rank?"":`\n      --${s[this.rank-1]};\n      if (++${s[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((c,d)=>`start[${d}]`).join()});`:t.map((c,d)=>`${r[d]} = ${s[d]} + start[${d}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${l}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,s)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(s,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}function La(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,size:a}=s,[i,l]=sl(r,o,a);if(Ac(r,i,l),0===V(l))return e.makeTensorInfo(l,r.dtype,[]);if(e.shouldExecuteOnCPU([r])||"string"===r.dtype){const d=e.texData.get(r.dataId),h=tP(d.values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,h)}const{isPacked:u}=e.texData.get(r.dataId),c=Rc(r.shape,i,l);if(u||!c){const d=q().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new iM(l):new oM(l),h=d.getCustomSetupFunc(i);return e.runWebGLProgram(d,[r],r.dtype,h)}return e.uploadToGPU(r.dataId),function lM(n,t,e,s){const r=s.texData.get(n.dataId),o=s.makeTensorInfo(e,n.dtype),a=s.texData.get(o.dataId);Object.assign(a,r),a.complexParentRefCount=0,a.refCount=1,a.shape=e,a.dtype=n.dtype;let i=Oc(t,Ce(n.shape));r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||n.dataId};const l=s.dataRefCount.get(a.slice.origDataId)||1;return s.dataRefCount.set(a.slice.origDataId,l+1),o}(r,i,l,e)}const uM={kernelName:Ai,backendName:"webgl",kernelFunc:La},cM={kernelName:ja,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,crops:a}=s;C(r.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const i=o.reduce((x,v)=>x*v),l=da(r.shape,o,i),u=ha(l.length,o.length),c=pa(r.shape,o,i),d=_d(a,o.length),h=$d(c,a,o.length),p=[],f=ue({inputs:{x:r},backend:e,attrs:{shape:l}}),m=tn({inputs:{x:f},backend:e,attrs:{perm:u}}),g=ue({inputs:{x:m},backend:e,attrs:{shape:c}}),y=La({inputs:{x:g},backend:e,attrs:{begin:d,size:h}});return p.push(f),p.push(m),p.push(g),p.forEach(x=>e.disposeIntermediateTensorInfo(x)),y}},hM={kernelName:Ap,backendName:"webgl",kernelFunc:function dM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a}=s,i=e.readSync(r.dataId),l=e.readSync(o.dataId),u=Px(i,l,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,u)}},lb=Vt({opSnippet:"return float(a != b);",dtype:"bool"}),pM={kernelName:vi,backendName:"webgl",kernelFunc:lb};function Ma(n){const{inputs:t,backend:e}=n,{input:s}=t;return an({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.real},backend:e})}const fM={kernelName:tc,backendName:"webgl",kernelFunc:Ma},yM={kernelName:po,backendName:"webgl",kernelFunc:function gp(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return an({inputs:{x:r},backend:e});const a=It(r.shape),i=gp({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),l=Os({inputs:{real:i,imag:a},backend:e});return a.dispose(),e.disposeIntermediateTensorInfo(i),l}if("complex64"===r.dtype){const a=Ma({inputs:{input:r},backend:e}),i=gp({inputs:{x:a},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(a),i}if(!vu(r.dtype,o)){const a=an({inputs:{x:r},backend:e});return{dataId:a.dataId,shape:a.shape,dtype:o}}if("int32"===o)return function gM(n,t){const e=new Rs(n.shape,"return float(int(x));"),s=t.runWebGLProgram(e,[n],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,e);if("bool"===o){const a=e.makeTensorInfo([],"bool",Ut("bool",1)),l=lb({inputs:{a:r,b:a},backend:e});return e.disposeIntermediateTensorInfo(a),l}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`)}},ub="return ceil(x);",xM=Le({opSnippet:ub,packedOpSnippet:ub,cpuKernelImpl:LF}),bM={kernelName:fo,backendName:"webgl",kernelFunc:xM};class wM{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(s,r)=>{null==this.minLoc&&(this.minLoc=s.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=s.getUniformLocationNoThrow(r,"maxVal")),s.gl.uniform1f(this.minLoc,t),s.gl.uniform1f(this.maxLoc,e)}}}class vM{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(s,r)=>{null==this.minLoc&&(this.minLoc=s.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=s.getUniformLocationNoThrow(r,"maxVal")),s.gl.uniform1f(this.minLoc,t),s.gl.uniform1f(this.maxLoc,e)}}}const CM={kernelName:mo,backendName:"webgl",kernelFunc:function NM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{clipValueMin:o,clipValueMax:a}=s;let i;i=q().getBool("WEBGL_PACK_CLIP")?new vM(r.shape):new wM(r.shape);const l=i.getCustomSetupFunc(o,a);return e.runWebGLProgram(i,[r],r.dtype,l)}};class kM{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function cb(n,t){return{dataId:t.dataId,dtype:t.dtype,shape:n.shape}}const SM={kernelName:qa,backendName:"webgl",kernelFunc:function IM(n){const{inputs:t,backend:e}=n,{x:s}=t,r=e.texData.get(s.dataId),o=new kM(s.shape),a=[cb(s,r.complexTensorInfos.real),cb(s,r.complexTensorInfos.imag)];return e.runWebGLProgram(o,a,a[0].dtype)}};class TM{constructor(t){this.outputShape=[],this.outputShape=us(t,1),this.variableNames=t.map((a,i)=>`T${i}`);const e=new Array(t.length-1);e[0]=t[0][1];for(let a=1;a<e.length;a++)e[a]=e[a-1]+t[a][1];const s=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let a=1;a<e.length;a++)s.push(`else if (yC < ${e[a]}) setOutput(getT${a}(yR, yC-${e[a-1]}));`);s.push(`else setOutput(getT${e.length}(yR, yC-${e[e.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${s.join("\n        ")}\n      }\n    `}}class _M{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=us(t,e);const s=this.outputShape,r=s.length,o=Ye(r),a=Jt("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((m,g)=>`T${g}`);const l=new Array(t.length-1);l[0]=t[0][e];for(let m=1;m<l.length;m++)l[m]=l[m-1]+t[m][e];const u=i[e],c=i.slice(-2),d=i.join();let h=`if (${u} < ${l[0]}) {\n        return getChannel(\n            getT0(${d}), vec2(${c.join()}));\n        }`;for(let m=1;m<l.length;m++){const g=l[m-1];h+=`\n        if (${u} < ${l[m]}  && ${u} >= ${l[m-1]}) {\n          return getChannel(\n            getT${m}(${gu(i,u,g)}),\n            vec2(${gu(c,u,g)}));\n        }`}const f=l[l.length-1];h+=`\n        return getChannel(\n          getT${l.length}(${gu(i,u,f)}),\n          vec2(${gu(c,u,f)}));`,this.userCode=`\n      float getValue(${i.map(m=>"int "+m)}) {\n        ${h}\n      }\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${s[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${s[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${s[r-2]} &&\n            ${a[r-1]} < ${s[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function gu(n,t,e){const s=n.indexOf(t);return n.map((o,a)=>a===s?`${o} - ${e}`:o).join()}function yu(n){const{inputs:t,backend:e}=n,{input:s}=t;return an({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.imag},backend:e})}const $M={kernelName:ju,backendName:"webgl",kernelFunc:yu};function Qr(n,t,e){const s=n[0].dtype;if("complex64"===s){const u=n.map(f=>Ma({inputs:{input:f},backend:e})),c=n.map(f=>yu({inputs:{input:f},backend:e})),d=Qr(u,t,e),h=Qr(c,t,e),p=Os({inputs:{real:d,imag:h},backend:e});return u.forEach(f=>e.disposeIntermediateTensorInfo(f)),c.forEach(f=>e.disposeIntermediateTensorInfo(f)),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(h),p}if("string"===s){const{tensors2D:u,outShape:c}=db(n,t,e),d=u.map(g=>({vals:e.readSync(g.dataId),shape:g.shape})),p=MF(d,c,s,1===u[0].shape[0]),f=us(n.map(g=>g.shape),t),m=e.makeTensorInfo(f,s,p);return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),m}if(n.length>q().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const u=Math.floor(n.length/2),c=Qr(n.slice(0,u),t,e),d=Qr(n.slice(u),t,e),h=Qr([c,d],t,e);return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(d),h}if(q().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&n[0].shape.length>1){const u=new _M(n.map(c=>c.shape),t);return e.runWebGLProgram(u,n,s)}const{tensors2D:r,outShape:o}=db(n,t,e),a=new TM(r.map(u=>u.shape)),i=e.runWebGLProgram(a,r,s);r.forEach(u=>e.disposeIntermediateTensorInfo(u));const l=ue({inputs:{x:i},attrs:{shape:o},backend:e});return e.disposeIntermediateTensorInfo(i),l}function db(n,t,e){const s=us(n.map(o=>o.shape),t);return{tensors2D:n.map(o=>ue({inputs:{x:o},attrs:{shape:[-1,V(o.shape.slice(t))]},backend:e})),outShape:s}}function hb(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,o=Te(r,t[0].shape)[0],a=us(t.map(u=>u.shape),o);if(0===V(a))return e.makeTensorInfo(a,t[0].dtype,[]);const i=t.filter(u=>V(u.shape)>0);return 1===i.length?an({inputs:{x:i[0]},backend:e}):(Id(i.map(u=>u.shape),o),Qr(i,o,e))}const EM={kernelName:Ka,backendName:"webgl",kernelFunc:hb};class pb{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const a=t.padInfo.top,i=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,d=t.dilationWidth,h=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),m=t.inChannels%4,g="channelsLast"===t.dataFormat,y=g?1:2,x=g?2:3,v=g?3:1;let b="",w="";s&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,w="result = activation(result);");const k=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${v}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${y}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${d};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${f}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${g}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===m}) {\n\n              if (${g}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${f}) *\n                    getW(wR, wC, ${f}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${f}, xR, xC) *\n                    getW(wR, wC, ${f}, d2);\n              }\n\n            } else if (${2===m}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2)\n              );\n\n              if (${g}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===m}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2),\n                getW(wR, wC, ${f} + 2, d2)\n              );\n\n              if (${g}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1),\n                  getX(batch, xR, xC, ${f} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC),\n                  getX(batch, ${f} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class DM{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,s=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,d=t.filterDepth,h=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),m=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${s}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${d}; wF++) {\n          int xF = xFCorner + wF * ${l};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${f}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===m}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${f}) *\n                  getW(wF, wR, wC, ${f}, d2);\n              } else if (${2===m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1),\n                  getX(batch, xF, xR, xC, ${f} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2),\n                  getW(wF, wR, wC, ${f} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class AM{constructor(t,e,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:r,inChannels:o,strideWidth:a,strideHeight:i,padInfo:l,outWidth:u,dilationWidth:c,dilationHeight:d,dataFormat:h}=s,{left:p,top:f}=l,m=o*r,g=Yt(),y="channelsLast"===h,x=y?0:1,v=y?1:2;let b="";for(let w=0;w<=1;w++)for(let k=0;k<=1;k++)b+=`\n          blockIndex = rc.y + ${k};\n          pos = rc.x + ${w};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${i} - ${f};\n            d0 = offsetY + ${d} * (pos / ${m});\n\n            if(d0 < ${e[x]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${c} * (int(mod(float(pos), ${m}.) / ${o}.));\n\n              if(d1 < ${e[v]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${o}.));\n\n                if (${y}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*w+k}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*w+k}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${b}\n\n        ${g.output} = result;\n      }\n    `}}function fb({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:i=null}){const l=n.shape,u=s.texData.get(n.dataId),p="channelsLast"===e.dataFormat;let g;const y=[],v=l[2]%2!=0&&!!u.isPacked;if((1!=l[0]*l[1]*l[2]&&1!==e.outChannels||!(e.inChannels>1e3))&&q().getBool("WEBGL_LAZILY_UNPACK")&&q().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&v){const w={dataId:n.dataId,shape:[1,p?l[0]*l[1]*(l[2]+1):l[0]*l[2]*(l[3]+1),e.inChannels],dtype:n.dtype},k=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,C(ou(u.shape,w.shape),()=>`packed reshape ${u.shape} to ${w.shape} isn't free`);const N=ue({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}});y.push(N);const S=fu({a:w,b:N,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:i,preluActivationWeights:o,leakyreluAlpha:a}),_=s.texData.get(S.dataId);C(_.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=k,_.shape=e.outShape,g=an({inputs:{x:S},backend:s}),g.shape=e.outShape,y.push(S)}else{const w=ue({inputs:{x:n},backend:s,attrs:{shape:[1,p?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],e.inChannels]}}),k=ue({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}}),N=fu({a:w,b:k,transposeA:!1,transposeB:!1,backend:s,bias:r,activation:i,preluActivationWeights:o,leakyreluAlpha:a});g=ue({inputs:{x:N},backend:s,attrs:{shape:e.outShape}}),y.push(w),y.push(k),y.push(N)}for(const b of y)s.disposeIntermediateTensorInfo(b);return g}function mb({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:d,outHeight:h,dataFormat:p}=e,f="channelsLast"===p,m=l*u*c,g=h*d,y=[m,g],b=[],w=ue({inputs:{x:n},backend:s,attrs:{shape:n.shape.slice(1)}}),k=ue({inputs:{x:t},backend:s,attrs:{shape:[1,m,V(t.shape)/m]}});b.push(w),b.push(k);const N=new AM(y,w.shape,e),S=s.runWebGLProgram(N,[w],"float32"),_=ue({inputs:{x:S},backend:s,attrs:{shape:[1,y[0],y[1]]}});b.push(S),b.push(_);const A=null!=r,z=null!=o,U="leakyrelu"===i,G=i?hu(i,!0):null,H=new Zx(_.shape,k.shape,[1,g,e.outChannels],!0,!1,A,G,z,U),W=[_,k];if(r&&W.push(r),z&&W.push(o),U){const X=s.makeTensorInfo([],"float32",gs(a,"float32"));W.push(X),b.push(X)}const B=s.runWebGLProgram(H,W,"float32"),j=ue({inputs:{x:B},backend:s,attrs:{shape:f?[1,h,d,e.outChannels]:[1,e.outChannels,h,d]}});b.push(B);for(const X of b)s.disposeIntermediateTensorInfo(X);return j}const OM={kernelName:Xa,backendName:"webgl",kernelFunc:function RM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s,d=os(l),h=Dt(r.shape,o.shape,a,u,i,c,!1,d);let p;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if(q().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])p=mb({x:r,filter:o,convInfo:h,backend:e});else{const m=new pb(h);p=e.runWebGLProgram(m,[r,o],"float32")}else p=fb({x:r,filter:o,convInfo:h,backend:e});const f=ue({inputs:{x:p},backend:e,attrs:{shape:h.outShape}});return e.disposeIntermediateTensorInfo(p),f}};class FM{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${"channelsLast"===t.dataFormat}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class PM{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,a="channelsLast"===t.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${a?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${a?1:2}], coords[${a?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class LM{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${t.strideDepth} - ${t.padInfo.front};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class MM{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,s=t.filterHeight,r=t.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${e-1-t.padInfo.front}, ${s-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${t.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${s}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${s} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const VM={kernelName:Au,backendName:"webgl",kernelFunc:function zM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,d=os(l),h=Dt(r.shape,c,a,1,i,u,!1,d),p=new FM(h);return e.runWebGLProgram(p,[r,o],"float32")}},WM={kernelName:Za,backendName:"webgl",kernelFunc:function BM(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{inputShape:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s,d=os(u),h=Dt(a,o.shape,i,1,l,c,!1,d),p=new PM(h);return e.runWebGLProgram(p,[r,o],"float32")}},UM={kernelName:Ya,backendName:"webgl",kernelFunc:function GM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s,u=bs(r.shape,o.shape,a,l,i),c=new DM(u);return e.runWebGLProgram(c,[r,o],"float32")}},jM={kernelName:Ru,backendName:"webgl",kernelFunc:function HM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,filterShape:l}=s,u=bs(r.shape,l,a,1,i),c=new LM(u);return e.runWebGLProgram(c,[r,o],"float32")}},KM={kernelName:Ou,backendName:"webgl",kernelFunc:function qM(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{pad:a,strides:i,inputShape:l}=s,u=bs(l,o.shape,i,1,a),c=new MM(u);return e.runWebGLProgram(c,[r,o],"float32")}},ZM=Le({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),YM={kernelName:go,backendName:"webgl",kernelFunc:ZM},JM=Le({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),QM={kernelName:yo,backendName:"webgl",kernelFunc:JM};class ez{constructor(t,e,s,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,l,u]=t,[c]=e,[d,h]=s;this.outputShape=[c,d,h,u];const p="bilinear"===r?1:0,[f,m]=[i-1+".0",l-1+".0"],[g,y,x]=d>1?[""+(i-1)/(d-1),"(y2-y1) * height_ratio",`y1*${f} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${f}`],[v,b,w]=h>1?[""+(l-1)/(h-1),"(x2-x1) * width_ratio",`x1*${m} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${m}`];this.userCode=`\n      const float height_ratio = float(${g});\n      const float width_ratio = float(${v});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${y};\n        float width_scale = ${b};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${f} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${m} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const tz={kernelName:Fu,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:o,boxInd:a}=t,{cropSize:i,method:l,extrapolationValue:u}=s,c=new ez(r.shape,o.shape,i,l,u);return e.runWebGLProgram(c,[r,o,a],"float32")}};class gb{constructor(t,e,s){this.variableNames=["x"],this.outputShape=t;const r=t.length,o=e?"0.0":`getX(${yb(r,"coords")})`,a=t[t.length-1];let i="",l="";e?(i=s?"end != "+(a-1):"end != 0",l=s?"end + 1":"end - 1"):(i=s?`end + pow2 < ${a}`:"end >= pow2",l=s?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${Ye(r)} coords = getOutputCoords();\n        int end = ${xb(r,"coords")};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${l};\n          ${xb(r,"coords")} = idx;\n          val += getX(${yb(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(t){return(e,s)=>{null==this.index&&(this.index=e.getUniformLocation(s,"index")),e.gl.uniform1f(this.index,t)}}}function yb(n,t){if(1===n)return`${t}`;if(2===n)return`${t}.x, ${t}.y`;if(3===n)return`${t}.x, ${t}.y, ${t}.z`;if(4===n)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${n} is not yet supported`)}function xb(n,t){if(1===n)return`${t}`;if(2===n)return`${t}.y`;if(3===n)return`${t}.z`;if(4===n)return`${t}.w`;throw Error(`Cumulative sum for rank ${n} is not yet supported`)}const sz={kernelName:Ja,backendName:"webgl",kernelFunc:function nz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s,l=r.shape.length,u=xt([o],l);let c=r;null!=u&&(c=tn({inputs:{x:r},backend:e,attrs:{perm:u}}));const d=Nt(1,l)[0];if(d!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${r.shape.length-1} but got axis=${o}`);const h=c.shape[d];let p=an({inputs:{x:c},backend:e});for(let f=0;f<=Math.ceil(Math.log2(h))-1;f++){const m=new gb(c.shape,!1,i),g=m.getCustomSetupFunc(f),y=p;p=e.runWebGLProgram(m,[p],p.dtype,g),e.disposeIntermediateTensorInfo(y)}if(a){const f=new gb(c.shape,a,i),m=p;p=e.runWebGLProgram(f,[p],p.dtype),e.disposeIntermediateTensorInfo(m)}if(null!=u){const m=tn({inputs:{x:p},backend:e,attrs:{perm:Sr(u)}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(c),m}return p}},oz={kernelName:Rp,backendName:"webgl",kernelFunc:function rz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a,binaryOutput:i}=s;if(1===r.shape.length){const l=e.readSync(r.dataId),u=e.readSync(o.dataId),c=Px(l,u,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,c)}if(2===r.shape.length){const l=e.bufferSync(r),u=e.bufferSync(o),c=PF(l,u,a,i);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class az{constructor(t,e,s){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=s,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const lz={kernelName:Pu,backendName:"webgl",kernelFunc:function iz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:o,dataFormat:a}=s;C(o>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${o}`);const i=r.shape[0],d=("NHWC"===a?r.shape[1]:r.shape[2])*o,h=("NHWC"===a?r.shape[2]:r.shape[3])*o,p=("NHWC"===a?r.shape[3]:r.shape[1])/(o*o),m=new az("NHWC"===a?[i,d,h,p]:[i,p,d,h],o,a);return e.runWebGLProgram(m,[r],r.dtype)}};class bb{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const a=t.inHeight,i=t.inWidth,l=t.padInfo.top,u=t.padInfo.left,c=t.strideHeight,d=t.strideWidth,h=t.dilationHeight,p=t.dilationWidth,f=t.filterHeight,m=t.filterWidth,g=t.outChannels/t.inChannels;let y="",x="";s&&(y=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,x="result = activation(result);");const v=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${c}, ${d});\n      const ivec2 pads = ivec2(${l}, ${u});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${g};\n        int q = d2 - d1 * ${g};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${f}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${a}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${m}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${x}\n        setOutput(result);\n      }\n    `}}class wb{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const a=t.inHeight,i=t.inWidth,l=t.padInfo.top,u=t.padInfo.left,c=t.strideHeight,d=t.strideWidth,h=t.dilationHeight,p=t.dilationWidth,f=t.filterHeight,m=t.filterWidth,g=m;let y="int xR; int xC; int xCOffset;";for(let w=0;w<f;w++)for(let k=0;k<m;k++)y+=`\n          vec4 xTexelR${w}C${2*k} = vec4(0.);\n          vec4 wR${w}C${k} = vec4(0.);\n          vec4 xR${w}C${k} = vec4(0.);`;for(let w=0;w<f;w++)for(let k=0;k<g;k++){const N=2*k;if(y+=`\n          xR = xRCorner + ${w*h};\n          xC = xCCorner + ${N*p};\n        `,1===d){if(N<m&&(y+=u%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${w}C${N} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    xTexelR${w}C${N}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${w}C${N} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${w}C${N} = vec4(previous.zw, xTexelR${w}C${N}.xy);\n                } else {\n                  xR${w}C${N} = vec4(0, 0, xTexelR${w}C${N}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${a} && xC >= 0 && xC < ${i}) {\n                  xTexelR${w}C${N} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${w}C${N} = vec4(0.);\n                }\n\n                xR${w}C${N} = xTexelR${w}C${N};\n              `,N+1<m)){const S=u%2==0?ye(p):p;p%2==0&&u%2==1||p%2!=0&&u%2!=1?(y+=`\n                  xCOffset = xC + ${u%2} + ${S};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${w}C${N+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,p>1&&(y+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${a} &&\n                      xCOffset >= 0 && xCOffset < ${i}) {\n                      xTexelR${w}C${N} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${w}C${N} = vec4(0.);\n                    }\n                  `),y+=`\n                  xR${w}C${N+1} = vec4(\n                    xTexelR${w}C${N}.zw, xTexelR${w}C${N+2}.xy);\n                `):y+=`\n                  xCOffset = xC + ${S};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${w}C${N+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${w}C${N+1} = xTexelR${w}C${N+2};\n                `}}else N<m&&(y+=`\n              if(xR >= 0 && xR < ${a}) {\n            `,u%2==1?(y+=`\n                xCOffset = xC + 1 - ${d};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${w}C${N} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${w}C${N} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${i}) {\n                  xTexelR${w}C${N+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${w}C${N+2} = vec4(0.);\n                }\n\n                xR${w}C${N} = vec4(\n                  xTexelR${w}C${N}.zw, xTexelR${w}C${N+2}.zw);\n              `,N+1<m&&(y+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${d};\n                  if(xCOffset >= 0 && xCOffset < ${i}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${w}C${N+1} = vec4(xTexelR${w}C${N+2}.xy, final.xy);\n                `)):(y+=`\n                if(xC >= 0 && xC < ${i}) {\n                  xTexelR${w}C${N} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${w}C${N} = vec4(0.);\n                }\n\n                xCOffset = xC + ${d};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${w}C${N+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${w}C${N+2} = vec4(0.);\n                }\n\n                xR${w}C${N} = vec4(\n                  xTexelR${w}C${N}.xy, xTexelR${w}C${N+2}.xy);\n              `,N+1<m&&(y+=`\n                  xR${w}C${N+1} = vec4(\n                    xTexelR${w}C${N}.zw, xTexelR${w}C${N+2}.zw);\n                `)),y+="}");N<m&&(y+=`\n            vec4 wTexelR${w}C${N} = getW(${w}, ${N}, d1, q);\n            wR${w}C${N} = vec4(wTexelR${w}C${N}.xz, wTexelR${w}C${N}.xz);\n          `,N+1<m&&(y+=`\n              vec4 wTexelR${w}C${N+1} = getW(${w}, ${N+1}, d1, q);\n              wR${w}C${N+1} =\n                vec4(wTexelR${w}C${N+1}.xz, wTexelR${w}C${N+1}.xz);`))}for(let w=0;w<f;w++)for(let k=0;k<m;k++)y+=`dotProd += xR${w}C${k} * wR${w}C${k};`;let x="",v="";s&&(x=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,v="result = activation(result);");const b=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${c}, ${d});\n      const ivec2 pads = ivec2(${l}, ${u});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${y}\n\n        vec4 result = dotProd;\n        ${b}\n        ${v}\n        setOutput(result);\n      }\n    `}}const cz={kernelName:Qa,backendName:"webgl",kernelFunc:function uz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),C(mt(a,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);const d=Dt(r.shape,o.shape,a,c,i,u,!0);let h;return h=q().getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels==1?new wb(d):new bb(d),e.runWebGLProgram(h,[r,o],"float32")}};class dz{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${t.outChannels/t.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class hz{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,l=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${l}; dm++) {\n              int d2 = d1 * ${l} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const fz={kernelName:Lu,backendName:"webgl",kernelFunc:function pz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s,d=Dt(r.shape,c,a,i,l,u,!0),h=new dz(d);return e.runWebGLProgram(h,[r,o],"float32")}},gz={kernelName:Mu,backendName:"webgl",kernelFunc:function mz(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s,d=Dt(c,o.shape,a,i,l,u,!0),h=new hz(d);return e.runWebGLProgram(h,[r,o],"float32")}};class yz{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const bz={kernelName:"Diag",backendName:"webgl",kernelFunc:function xz(n){const{inputs:t,backend:e}=n,{x:s}=t,r=[...s.shape,...s.shape],o=V(s.shape),a=ue({inputs:{x:s},backend:e,attrs:{shape:[o]}}),i=new yz(o),l=e.runWebGLProgram(i,[a],a.dtype),u=ue({inputs:{x:l},backend:e,attrs:{shape:r}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}};class wz{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const{inHeight:e,inWidth:s,padInfo:r,strideHeight:o,strideWidth:a,filterHeight:i,filterWidth:l,dilationHeight:u,dilationWidth:c}=t,{top:d,left:h}=r;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${a});\n      const ivec2 pads = ivec2(${d}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${e}) {\n            for (int w = 0; w < ${l}; w++) {\n              int wIn = wBeg + w * ${c};\n\n              if (wIn >= 0 && wIn < ${s}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const Nz={kernelName:ei,backendName:"webgl",kernelFunc:function vz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s,u=oa(r.shape,o.shape,a,i,"NHWC",l);let c;const d=new wz(u);c=e.runWebGLProgram(d,[r,o],"float32");const h=ue({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),h}},Cz=Le({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),kz={kernelName:bo,backendName:"webgl",kernelFunc:Cz},Tz={kernelName:Bu,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e}=n,{dy:s,y:r}=t,o=q().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fa("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new Jr("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return e.runWebGLProgram(o,[s,r],s.dtype)}},_z=Vt({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"}),$z={kernelName:ti,backendName:"webgl",kernelFunc:_z},Dz=Le({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Dd};\n  float a1 = ${Ad};\n  float a2 = ${Rd};\n  float a3 = ${Od};\n  float a4 = ${Fd};\n  float a5 = ${Pd};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),Az={kernelName:wo,backendName:"webgl",kernelFunc:Dz},vb="return exp(x);",Nb=Le({opSnippet:vb,packedOpSnippet:vb,cpuKernelImpl:zF}),Rz={kernelName:vo,backendName:"webgl",kernelFunc:Nb};function yp(n){const{inputs:t,attrs:e,backend:s}=n,{dim:r}=e,{input:o}=t,a=o.shape.length,i=o.shape.slice();let l=r;return r<0&&(C(-(a+1)<=r,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),l=a+r+1),i.splice(l,0,1),ue({inputs:{x:o},backend:s,attrs:{shape:i}})}const Oz={kernelName:ni,backendName:"webgl",kernelFunc:yp},Cb="return exp(x) - 1.0;",Fz=Le({opSnippet:Cb,packedOpSnippet:Cb,cpuKernelImpl:VF}),Pz={kernelName:No,backendName:"webgl",kernelFunc:Fz};class kb{constructor(t,e,s){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const o=s?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=s?`${r}.0`:"1.0";let i;if("real"===t)i="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${o};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function Ib(n,t,e){const s=e.texData.get(n.dataId),r=V(n.shape),o=n.shape[n.shape.length-1],i=ue({inputs:{x:n},backend:e,attrs:{shape:[r/o,o]}}),l=i.shape,u=new kb("real",l,t),c=new kb("imag",l,t),d=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:l},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:l}],h=e.runWebGLProgram(u,d,"float32"),p=e.runWebGLProgram(c,d,"float32"),f=Os({inputs:{real:h,imag:p},backend:e});e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(p);const m=ue({inputs:{x:f},backend:e,attrs:{shape:n.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(f),m}const Mz={kernelName:"FFT",backendName:"webgl",kernelFunc:function Lz(n){const{inputs:t,backend:e}=n,{input:s}=t;return Ib(s,!1,e)}};class zz{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,s)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(s,"value")),e.gl.uniform1f(this.valueLoc,t)}}}function xp(n){const{backend:t,attrs:e}=n,{shape:s,value:r}=e;let{dtype:o}=e;if(o=o||no(r),"string"===o){const a=dr(o,V(s));return a.fill(r),t.makeTensorInfo(s,o,a)}{const a=new zz(s,r),i=a.getCustomSetupFunc(r);return t.runWebGLProgram(a,[],o,i)}}const Vz={kernelName:Gu,backendName:"webgl",kernelFunc:xp};class Bz{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Wz={kernelName:Uu,backendName:"webgl",kernelFunc:({inputs:n,backend:t})=>{const{image:e}=n,s=t,r=new Bz(e.shape);return s.runWebGLProgram(r,[e],e.dtype)}},Sb="return floor(x);",Gz=Le({opSnippet:Sb,packedOpSnippet:Sb,cpuKernelImpl:BF}),Uz={kernelName:Co,backendName:"webgl",kernelFunc:Gz},Hz=Vt({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),jz={kernelName:ko,backendName:"webgl",kernelFunc:Hz};class qz{constructor(t){this.variableNames=["A"];const e=Yt(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class Kz{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=Yt(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${s}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const Xz={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function Zz(n){const{inputs:t,backend:e,attrs:s}=n;let{pixels:r}=t;const{numChannels:o}=s,a=typeof HTMLVideoElement<"u"&&r instanceof HTMLVideoElement,i=typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement,l=typeof ImageBitmap<"u"&&r instanceof ImageBitmap,[u,c]=a?[r.videoWidth,r.videoHeight]:[r.width,r.height],d=[c,u],h=[c,u,o];(i||a||l)&&(null==eo&&(eo=document.createElement("canvas").getContext("2d")),eo.canvas.width=u,eo.canvas.height=c,eo.drawImage(r,0,0,u,c),r=eo.canvas);const p=e.makeTensorInfo(d,"int32");e.texData.get(p.dataId).usage=on.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(p.dataId),r);const f=q().getBool("WEBGL_PACK")?new Kz(h):new qz(h),m=e.runWebGLProgram(f,[p],"int32");return e.disposeData(p.dataId),m}};let eo;const Jz={kernelName:Wi,backendName:"webgl",kernelFunc:function Yz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:d,dimRoundingMode:h,activation:p,leakyreluAlpha:f}=s,m=os(c),g=Dt(r.shape,o.shape,l,d,u,h,!1,m);let y;const x=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(q().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])y=mb({x:r,filter:o,convInfo:g,backend:e,bias:a,activation:p,preluActivationWeights:i,leakyreluAlpha:f});else{const b=null!=a,w=null!=i,k="leakyrelu"===p,N=p?hu(p,!1):null,S=new pb(g,b,N,w,k),_=[r,o];if(a&&_.push(a),i&&_.push(i),k){const A=e.makeTensorInfo([],"float32",gs(f,"float32"));_.push(A),x.push(A)}y=e.runWebGLProgram(S,_,"float32")}else y=fb({x:r,filter:o,convInfo:g,backend:e,bias:a,activation:p,preluActivationWeights:i,leakyreluAlpha:f});const v=ue({inputs:{x:y},backend:e,attrs:{shape:g.outShape}});return x.push(y),x.forEach(b=>e.disposeIntermediateTensorInfo(b)),v}},eV={kernelName:Gi,backendName:"webgl",kernelFunc:function Qz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:d,activation:h,leakyreluAlpha:p}=s,f=[];let m=c;null==m&&(m=[1,1]),C(mt(l,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`);const g=Dt(r.shape,o.shape,l,m,u,d,!0),y=q().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,x=h?hu(h,y):null,v=[r,o],b=null!=a,w=null!=i,k="leakyrelu"===h;if(b&&v.push(a),w&&v.push(i),k){const _=e.makeTensorInfo([],"float32",gs(p,"float32"));v.push(_),f.push(_)}let N;N=y?new wb(g,b,x,w,k):new bb(g,b,x,w,k);const S=e.runWebGLProgram(N,v,"float32");return f.forEach(_=>e.disposeIntermediateTensorInfo(_)),S}};class tV{constructor(t,e,s){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=s;const r=Ye(e.length),o=Ye(s.length);this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${o} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${this.sliceDim>1?"strides[j]":"strides"};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const sV={kernelName:Fp,backendName:"webgl",kernelFunc:function nV(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,o=r.shape,a=o[o.length-1],[i,l,u,c]=Ed(s,r),d=ue({inputs:{x:r},backend:e,attrs:{shape:[l,a]}}),h=ue({inputs:{x:s},backend:e,attrs:{shape:[V(s.shape)/u,u]}}),p=new tV(a,c,[l,u]),f=e.runWebGLProgram(p,[h,d],h.dtype),m=ue({inputs:{x:f},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(f),m}};class rV{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;const s=Ye(this.rank),r=function oV(n,t){const e=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let r=0;r<n.length;r++)s.push(2===r?"int(getIndices(resRC.x, resRC.z))":`${e[r]}`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}const iV={kernelName:ri,backendName:"webgl",kernelFunc:function aV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:o}=t,{axis:a,batchDims:i}=s,u=zd(r,o,Te(a,r.shape)[0],i),c=V(o.shape),d=[],h=ue({inputs:{x:r},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),p=ue({inputs:{x:o},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});d.push(h),d.push(p);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([r,o])||"string"===r.dtype){const x=e.bufferSync(p),v=e.bufferSync(h),b=WF(v,x,f);return d.forEach(w=>e.disposeIntermediateTensorInfo(w)),e.makeTensorInfo(u.outputShape,b.dtype,b.values)}const m=new rV(h.shape,f),g=e.runWebGLProgram(m,[h,p],h.dtype);d.push(g);const y=ue({inputs:{x:g},backend:e,attrs:{shape:u.outputShape}});return d.forEach(x=>e.disposeIntermediateTensorInfo(x)),y}},lV=Vt({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:GF,dtype:"bool"}),uV={kernelName:oi,backendName:"webgl",kernelFunc:lV},cV=Vt({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"}),dV={kernelName:Io,backendName:"webgl",kernelFunc:cV},pV={kernelName:Hu,backendName:"webgl",kernelFunc:function hV(n){const{inputs:t,backend:e}=n,{input:s}=t;return Ib(s,!0,e)}},fV=Le({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),mV={kernelName:So,backendName:"webgl",kernelFunc:fV},gV=Le({opSnippet:"return float(isinf(x));",dtype:"bool"}),yV={kernelName:To,backendName:"webgl",kernelFunc:gV},xV=Le({opSnippet:"return float(isnan(x));",dtype:"bool"}),bV={kernelName:_o,backendName:"webgl",kernelFunc:xV},wV=Vt({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:UF,dtype:"bool"}),vV={kernelName:li,backendName:"webgl",kernelFunc:wV},NV=Vt({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"}),CV={kernelName:ui,backendName:"webgl",kernelFunc:NV},IV={kernelName:Pp,backendName:"webgl",kernelFunc:function kV(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:o}=e,a=HF(s,r,o);return t.makeTensorInfo([a.length],"float32",a)}},SV=Le({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:jF}),TV={kernelName:$o,backendName:"webgl",kernelFunc:SV},_V=Le({opSnippet:"return log(1.0 + x);"}),$V={kernelName:Eo,backendName:"webgl",kernelFunc:_V},EV=Vt({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),DV={kernelName:ci,backendName:"webgl",kernelFunc:EV},AV=Le({opSnippet:"return float(!(x >= 1.0));"}),RV={kernelName:di,backendName:"webgl",kernelFunc:AV},OV=Vt({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),FV={kernelName:hi,backendName:"webgl",kernelFunc:OV};class PV{constructor(t,e,s,r,o){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${l};\n        setOutput(val);\n      }\n    `}}class LV{constructor(t,e,s,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${l};\n        setOutput(result);\n      }\n    `}}const MV={kernelName:pi,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:o,bias:a,alpha:i,beta:l}=s,u=q().getBool("WEBGL_PACK_NORMALIZATION")?new LV(r.shape,o,a,i,l):new PV(r.shape,o,a,i,l);return e.runWebGLProgram(u,[r],r.dtype)}};class zV{constructor(t,e,s,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=s,this.alpha=r,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${s});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${o})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const VV={kernelName:qu,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r,y:o,dy:a}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s,d=new zV(r.shape,i,l,u,c);return e.runWebGLProgram(d,[r,o,a],r.dtype)}};function Tb(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:o,keepDims:a}=s,i=r.shape.length,l=Te(o,r.shape);let u=l;const c=xt(u,i),d=null!=c,h=e.shouldExecuteOnCPU([r]);let p=r;if(d){if(h){const v=e.texData.get(p.dataId).values,b=new Array(i);for(let N=0;N<b.length;N++)b[N]=r.shape[c[N]];const w=hp(v,r.shape,r.dtype,c,b);p=e.makeTensorInfo(b,r.dtype),e.texData.get(p.dataId).values=w}else p=pu(r,c,e);u=Nt(u.length,i)}Mt("max",u,i);const[f,m]=At(p.shape,u);let y,g=f;if(a&&(g=yt(f,l)),h){const v=e.texData.get(p.dataId).values,b=qF(v,V(m),g,r.dtype);y=e.makeTensorInfo(g,r.dtype),e.texData.get(y.dataId).values=b}else y=function BV(n,t,e,s){const r=V(t),i=ue({inputs:{x:n},attrs:{shape:[V(n.shape)/r,r]},backend:s}),l=ur(i,n.dtype,"max",s),u=ue({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(p,m,g,e);return d&&e.disposeIntermediateTensorInfo(p),y}const WV={kernelName:fi,backendName:"webgl",kernelFunc:Tb},HV=Vt({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:KF}),jV={kernelName:Do,backendName:"webgl",kernelFunc:HV},KV={kernelName:mi,backendName:"webgl",kernelFunc:function qV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Ra(r,"maxPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(mt(a,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=yn(r.shape,o,a,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&Se(c.inShape,c.outShape))return an({inputs:{x:r},backend:e});const d=new Pa(c,"max",!1);return e.runWebGLProgram(d,[r],r.dtype)}},ZV={kernelName:gi,backendName:"webgl",kernelFunc:function XV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dataFormat:l,dimRoundingMode:u}=s,d=rs(r.shape,o,a,[1,1,1],i,u,l),h=new fp(d,"max",!1);return e.runWebGLProgram(h,[r],r.dtype)}};class YV{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const o=t.effectiveFilterHeight,a=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${o-1-t.padInfo.top}, ${a-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${o*a-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class JV{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const l=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${l-1-t.padInfo.front}, ${u-1-t.padInfo.top}, ${c-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n           wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${l*u*c-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const e3={kernelName:Xu,backendName:"webgl",kernelFunc:function QV(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,h=rs(a.shape,i,l,[1,1,1],u,c),p=new fp(h,"max",!0),f=e.runWebGLProgram(p,[a],a.dtype),m=new JV(h),g=e.runWebGLProgram(m,[r,f],a.dtype);return e.disposeIntermediateTensorInfo(f),g}},n3={kernelName:Ku,backendName:"webgl",kernelFunc:function t3(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o,output:a}=t,i=o;Ra([o,a],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:d}=s,h=yn(i.shape,l,u,1,c,d),f=new Pa(h,"max",!0),m=e.runWebGLProgram(f,[i],i.dtype),g=new YV(h),y=e.runWebGLProgram(g,[r,m],i.dtype);return e.disposeIntermediateTensorInfo(m),y}},r3={kernelName:Lp,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:o,pad:a,includeBatchInIndex:i}=t,l=e;C(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const u=[1,1];C(mt(o,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${u}'`);const c=yn(s.shape,r,o,u,a),[d,h]=function s3(n,t,e,s){let r=new Pa(e,"max",!1);const o=s.runWebGLProgram(r,[n],"float32");return r=new Pa(e,"max",!0,!0,t),[o,s.runWebGLProgram(r,[n],"float32")]}(s,i,c,l);return[d,h]}},a3={kernelName:yi,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{keepDims:r,axis:o}=t,a=e,i=s.shape.length,l=Te(o,s.shape);let u=l;const c=xt(u,i),d=null!=c,h=a.shouldExecuteOnCPU([s]),p=[];let f=s;if(d){if(h){const b=a.texData.get(f.dataId).values,w=new Array(i);for(let S=0;S<w.length;S++)w[S]=s.shape[c[S]];const k=hp(b,s.shape,s.dtype,c,w);f=a.makeTensorInfo(w,s.dtype),a.texData.get(f.dataId).values=k}else f=pu(s,c,a);p.push(f),u=Nt(u.length,i)}Mt("sum",u,i);const[m,g]=At(f.shape,u);let y=m;r&&(y=yt(m,l));const x=function o3(n,t,e,s){const r=V(t),i=ue({inputs:{x:n},attrs:{shape:[V(n.shape)/r,r]},backend:s}),l=ur(i,"float32","mean",s),u=ue({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(f,g,y,a);for(const v of p)a.disposeIntermediateTensorInfo(v);return x}},l3={kernelName:xi,backendName:"webgl",kernelFunc:function i3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Te(o,r.shape);let u=l;const c=xt(u,i);let d=r;null!=c&&(d=tn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Nt(u.length,r.shape.length)),Mt("min",u,i);const[h,p]=At(d.shape,u),m=ue({inputs:{x:d},backend:e,attrs:{shape:[-1,V(p)]}}),g=ur(m,m.dtype,"min",e);let y;return y=ue(a?{inputs:{x:g},backend:e,attrs:{shape:yt(h,l)}}:{inputs:{x:g},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(g),null!=c&&e.disposeIntermediateTensorInfo(d),y}},d3=Vt({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:XF}),h3={kernelName:Ao,backendName:"webgl",kernelFunc:d3};class p3{constructor(t,e,s){this.variableNames=["x"],this.outputShape=e.map((c,d)=>c[0]+t[d]+c[1]);const r=t.length,o=Ye(r),a=e.map(c=>c[0]).join(","),i=e.map((c,d)=>c[0]+t[d]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===s?0:1;this.userCode=1!==r?`\n      ${o} start = ${o}(${a});\n      ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${o} coords = outC - start;\n        setOutput(getX(${l}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class f3{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((f,m)=>f[0]+t[m]+f[1]);const r=t.length,o=Ye(r),a=e.map(f=>f[0]).join(","),i=e.map((f,m)=>f[0]+t[m]).join(","),l=Jt("rc",r),u=Jt("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,d=1===r?"source":`vec2(${u.slice(-2).join()})`,h="reflect"===s?0:1;let p="";if(1===r){const f=`\n        ${o} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${d});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${d});\n        }\n      `}else{const f=`\n        ${o} source = rc;\n        ${o} lt = ${o}(lessThan(source, start));\n        ${o} gte = ${o}(greaterThanEqual(source, end));\n        ${o} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${d});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${d});\n        }\n        rc = outputLoc;\n        ${l[r-2]} += 1;\n        if(${l[r-2]} < ${this.outputShape[r-2]}) {\n          ${f}\n          result[2] = getChannel(getX(${u.join()}), ${d});\n          ${l[r-1]} += 1;\n          if(${c}) {\n            ${f}\n            result[3] = getChannel(getX(${u.join()}), ${d});\n          }\n        }\n      `}this.userCode=`\n      const ${o} start = ${o}(${a});\n      const ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const m3={kernelName:bi,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s}=n,{paddings:r,mode:o}=e,a=q().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new f3(s.shape,r,o):new p3(s.shape,r,o);return t.runWebGLProgram(a,[s],s.dtype)}},x3=Vt({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),b3={kernelName:Ro,backendName:"webgl",kernelFunc:x3};class w3{constructor(t,e,s){this.variableNames=["probs"],this.outputShape=[t,s],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,s)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(s,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}const _b=Vt({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),v3={kernelName:xo,backendName:"webgl",kernelFunc:_b},$b="return a - b;",Eb=Vt({opSnippet:$b,packedOpSnippet:$b,supportsComplex:!0,cpuKernelImpl:sP}),N3={kernelName:Xo,backendName:"webgl",kernelFunc:Eb};function Db(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:o}=s,a=Te([o],r.shape),i=Tb({inputs:{x:r},backend:e,attrs:{reductionIndices:a,keepDims:!1}}),l=yt(i.shape,a),u=ue({inputs:{x:i},backend:e,attrs:{shape:l}}),c=Eb({inputs:{a:r,b:u},backend:e}),d=Nb({inputs:{x:c},backend:e}),h=pp({inputs:{x:d},backend:e,attrs:{axis:a,keepDims:!1}}),p=ue({inputs:{x:h},backend:e,attrs:{shape:l}}),f=_b({inputs:{a:d,b:p},backend:e});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(p),f}const C3={kernelName:Pi,backendName:"webgl",kernelFunc:Db},I3={kernelName:Mp,backendName:"webgl",kernelFunc:function k3(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:o,seed:a,normalized:i}=s,l=i?r:Db({inputs:{logits:r},backend:e,attrs:{dim:r.shape.length-1}}),d=new w3(l.shape[0],l.shape[1],o),h=d.getCustomSetupFunc(a),p=e.runWebGLProgram(d,[l],"int32",h);return i||e.disposeIntermediateTensorInfo(l),p}},Ab="return -x;",T3={kernelName:wi,backendName:"webgl",kernelFunc:function S3(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])){const o=e.texData.get(s.dataId),[a,i]=YF(o.values,s.shape,s.dtype);return e.makeTensorInfo(i,s.dtype,a)}let r;return r=q().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Yr(s.shape,Ab):new Rs(s.shape,Ab),e.runWebGLProgram(r,[s],s.dtype)}},_3=cd,E3={kernelName:Zu,backendName:"webgl",kernelFunc:function $3(n){Dr("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l}=s,u=e.readSync(r.dataId),c=e.readSync(o.dataId),{selectedIndices:d}=_3(u,c,a,i,l);return e.makeTensorInfo([d.length],"int32",new Int32Array(d))}},D3=dd,R3={kernelName:Yu,backendName:"webgl",kernelFunc:function A3(n){Dr("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s,c=e.readSync(r.dataId),d=e.readSync(o.dataId),{selectedIndices:h,validOutputs:p}=D3(c,d,a,i,l,u);return[e.makeTensorInfo([h.length],"int32",new Int32Array(h)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},O3=hd,P3={kernelName:Ju,backendName:"webgl",kernelFunc:function F3(n){Dr("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s,c=e.readSync(r.dataId),d=e.readSync(o.dataId),h=a,p=i,f=l,m=u,{selectedIndices:g,selectedScores:y}=O3(c,d,h,p,f,m);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class L3{constructor(t,e,s,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${s}),\n                      float(index == coords.y)));\n      }\n    `}}const M3={kernelName:Ci,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{depth:o,onValue:a,offValue:i}=s,l=V(r.shape),u=new L3(l,o,a,i),c=ue({inputs:{x:r},backend:e,attrs:{shape:[l]}}),d=e.runWebGLProgram(u,[c],r.dtype);e.disposeIntermediateTensorInfo(c);const p=ue({inputs:{x:d},backend:e,attrs:{shape:[...r.shape,o]}});return e.disposeIntermediateTensorInfo(d),p}};function xu(n){const{inputs:t,backend:e}=n,{x:s}=t;if("complex64"===s.dtype){const r=Ma({inputs:{input:s},backend:e}),o=xu({inputs:{x:r},backend:e}),a=yu({inputs:{input:s},backend:e}),i=xu({inputs:{x:a},backend:e}),l=Os({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return xp({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:e})}const z3={kernelName:Vi,backendName:"webgl",kernelFunc:xu},V3={kernelName:Ni,backendName:"webgl",kernelFunc:function Rb(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const r=Ma({inputs:{input:s},backend:e}),o=Rb({inputs:{x:r},backend:e}),a=yu({inputs:{input:s},backend:e}),i=xu({inputs:{x:a},backend:e}),l=Os({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return xp({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:e})}},W3={kernelName:ki,backendName:"webgl",kernelFunc:function B3(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return yp({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const o=t[0].shape,a=t[0].dtype;t.forEach(c=>{Me(o,c.shape,"All tensors passed to stack must have matching shapes"),C(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=hb({inputs:t.map(c=>{const d=yp({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(d),d}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}};class G3{constructor(t,e,s){this.variableNames=["x"],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);const r=t.length,o=Ye(r),a=e.map(u=>u[0]).join(","),i=e.map((u,c)=>u[0]+t[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${o} start = ${o}(${a});\n      ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${s}));\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${l}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${s}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class U3{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((m,g)=>m[0]+t[g]+m[1]);const r=t.length,o=Ye(r),a=e.map(m=>m[0]).join(","),i=e.map((m,g)=>m[0]+t[g]).join(","),l=Jt("rc",r),u=Jt("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,d=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[`${o} rc = outputLoc;`,`${l[r-1]} += 1;\n       if(${c}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${l[r-2]} += 1;\n       if(${l[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${l[r-1]} += 1;\n         if(${c}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let f="";for(let m=0,g=1===r?2:4;m<g;m++)f+=`\n        ${h[m]}\n        if (${p}) {\n          result[${m}] = float(${s});\n        } else {\n          ${o} source = rc - start;\n          result[${m}] = getChannel(getX(${u.join()}), ${d});\n        }\n      `;f+=1===r?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${a});\n      const ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${f}\n        setOutput(result);\n      }\n    `}}const Ob=n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,constantValue:a}=s,i=q().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new U3(r.shape,o,a):new G3(r.shape,o,a);return e.runWebGLProgram(i,[r],r.dtype)},H3={kernelName:Ii,backendName:"webgl",kernelFunc:Ob},K3=Vt({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),X3={kernelName:Fo,backendName:"webgl",kernelFunc:K3},Y3={kernelName:Qu,backendName:"webgl",kernelFunc:function Z3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=[],u=Te(o,r.shape);let c=u;const d=xt(c,i);let p,h=r;if(null!=d&&(h=tn({inputs:{x:r},backend:e,attrs:{perm:d}}),c=Nt(c.length,i),l.push(h)),Mt("prod",c,i),e.shouldExecuteOnCPU([h])){const f=e.texData.get(h.dataId).values,{outVals:m,outShape:g,outDtype:y}=JF(h.shape,h.dtype,f,c);p=e.makeTensorInfo(g,y,m)}else{const[f,m]=At(h.shape,c),g=V(m),y=ue({inputs:{x:h},backend:e,attrs:{shape:[-1,g]}}),v=ur(y,pc(r.dtype),"prod",e);p=ue({inputs:{x:v},backend:e,attrs:{shape:f}}),l.push(y),l.push(v)}if(a){l.push(p);const f=yt(p.shape,u);p=ue({inputs:{x:p},backend:e,attrs:{shape:f}})}return l.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},Fb=n=>{const{backend:t,attrs:e}=n,{start:s,stop:r,step:o,dtype:a}=e,i=QF(s,r,o,a);return t.makeTensorInfo([i.length],a,i)},J3={kernelName:ec,backendName:"webgl",kernelFunc:Fb},Q3=Le({opSnippet:"return 1.0 / x;"}),eB={kernelName:Po,backendName:"webgl",kernelFunc:Q3},nB=Le({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),sB={kernelName:Lo,backendName:"webgl",kernelFunc:nB},oB=Le({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),aB={kernelName:Mo,backendName:"webgl",kernelFunc:oB};class iB{constructor(t,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],d=[r&&e>1?e-1:e,r&&s>1?s-1:s];let h;h=o?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/d[0]},\n          ${c[1]/d[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class lB{constructor(t,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],d=[r&&e>1?e-1:e,r&&s>1?s-1:s];let h;h=o?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/d[0]},\n          ${c[1]/d[1]},\n          ${c[1]/d[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const cB={kernelName:$i,backendName:"webgl",kernelFunc:function uB(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s,[l,u]=i,c=q().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new lB(r.shape,l,u,o,a):new iB(r.shape,l,u,o,a);return e.runWebGLProgram(c,[r],"float32")}};class dB{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,a,i]=t,l=[s&&a>1?r-1:r,s&&i>1?o-1:o],u=[s&&a>1?a-1:a,s&&i>1?i-1:i],c=l[0]/u[0],d=l[1]/u[1],h=1/c,p=1/d,f=2*Math.ceil(h)+2,m=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${d});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${m});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const pB={kernelName:sc,backendName:"webgl",kernelFunc:function hB(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s,i=new dB(o.shape,r.shape,a);return e.runWebGLProgram(i,[o],o.dtype)}};class fB{constructor(t,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],d=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/d[0]},\n          ${c[1]/d[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const gB={kernelName:_i,backendName:"webgl",kernelFunc:function mB(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s,[l,u]=i,c=new fB(r.shape,l,u,o,a);return e.runWebGLProgram(c,[r],r.dtype)}};class yB{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,a,i]=t,l=[s&&a>1?r-1:r,s&&i>1?o-1:o],u=[s&&a>1?a-1:a,s&&i>1?i-1:i],c=l[0]/u[0],d=l[1]/u[1],h=1/c,p=1/d,f=2*Math.ceil(h)+2,m=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${d});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${m});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${l[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${l[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${s} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${s} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const bB={kernelName:nc,backendName:"webgl",kernelFunc:function xB(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s,i=new yB(o.shape,r.shape,a);return e.runWebGLProgram(i,[o],o.dtype)}};class wB{constructor(t,e){this.variableNames=["x"];const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);if(this.outputShape=t,1===s)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const o=t.map((i,l)=>(i=>-1!==e.indexOf(i)&&1!==t[i]?`${t[i]} - coords[${i}] - 1`:`coords[${i}]`)(l)).join(","),a=Ye(s);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}class vB{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);this.outputShape=t;const r=Jt("rc",s),o=`${r[s-1]} + 1 < ${this.outputShape[s-1]}`,a=`${r[s-2]} + 1 < ${this.outputShape[s-2]}`,i=Ye(s);function h(f){const m=t.map((x,v)=>function p(f,m){return-1!==e.indexOf(f)&&1!==t[f]?`${t[f]} - ${m[f]} - 1`:`${m[f]}`}(v,f));return`getChannel(getX(${m.join(",")}), vec2(${m.slice(-2).join(",")}))`}this.userCode=1===s?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function l(f){return h(f)}(r.slice())};\n          if(${o}){\n            result.g = ${function u(f){return f[s-1]="("+f[s-1]+" + 1)",h(f)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function c(f){return f[s-2]="("+f[s-2]+" + 1)",h(f)}(r.slice())};\n            if(${o}) {\n              result.a = ${function d(f){return f[s-1]="("+f[s-1]+" + 1)",f[s-2]="("+f[s-2]+" + 1)",h(f)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const CB={kernelName:Ei,backendName:"webgl",kernelFunc:function NB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:o}=s,a=r.shape.length,i=Te(o,r.shape);if(0===a)return an({inputs:{x:r},backend:e});const l=q().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new vB(r.shape,i):new wB(r.shape,i);return e.runWebGLProgram(l,[r],r.dtype)}};class kB{constructor(t,e,s,r){this.variableNames=["Image"],this.outputShape=[];const o=t[1],a=t[2],i=Math.sin(e).toFixed(3),l=Math.cos(e).toFixed(3);this.outputShape=t;const[u,c]=Td(r,o,a),d=u.toFixed(3),h=c.toFixed(3);let p="";p="number"==typeof s?`float outputValue = ${s.toFixed(2)};`:`\n        vec3 fill = vec3(${s.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${d}) * ${l} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${d}) * ${i} + (float(y) - ${h}) * ${l};\n          int coordX = int(round(coordXFloat + ${d}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${o}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const IB={kernelName:lc,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:o,center:a}=t,i=e,l=new kB(s.shape,r,o,a);return i.runWebGLProgram(l,[s],s.dtype)}},SB=Le({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),TB={kernelName:zo,backendName:"webgl",kernelFunc:SB},_B=Le({opSnippet:"return inversesqrt(x);",cpuKernelImpl:eP}),$B={kernelName:Vo,backendName:"webgl",kernelFunc:_B};class Pb{constructor(t,e,s,r,o,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const l=Ye(o.length),u=Ye(a.length);let c="";1===s?c="i":2===s&&(c="i, j");let h="";1===r?h="i":2===r&&(h="i, coords[1]"),this.userCode=`\n        ${l} strides = ${l}(${o});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(getIndices(${c}));\n              flattenedIndex += index * ${e>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${h});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const DB={kernelName:zp,backendName:"webgl",kernelFunc:function EB(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:o}=t,{shape:a}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:d}=fa(0,r,a),h=[d/u,u];if(0===d)return e.makeTensorInfo(a,r.dtype);const p=ue({inputs:{x:r},backend:e,attrs:{shape:[l,i]}}),f=ue({inputs:{x:o},backend:e,attrs:{shape:[l,u]}}),m=e.makeTensorInfo([],"float32",new Float32Array([0])),g=new Pb(l,i,p.shape.length,f.shape.length,c,h),y=e.runWebGLProgram(g,[f,p,m],f.dtype),x=ue({inputs:{x:y},backend:e,attrs:{shape:a}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(m),x}};class AB{constructor(t,e,s){let r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,s>4)throw Error(`Where for rank ${s} is not yet supported`);if(1===s)o="resRC",r="resRC";else{const i=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<e.length;c++)u.push(`${i[c]}`),c<t&&l.push(`${i[c]}`);r=l.join(),o=u.join()}const a=Ye(s);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}const OB={kernelName:Di,backendName:"webgl",kernelFunc:function RB(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:o}=t,a=new AB(s.shape.length,r.shape,r.shape.length);return e.runWebGLProgram(a,[s,r,o],ln(r.dtype,o.dtype))}},PB=Le({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Nl};\n  float scale = ${Cl};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),LB={kernelName:Bo,backendName:"webgl",kernelFunc:PB},MB=Le({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),zB={kernelName:Ho,backendName:"webgl",kernelFunc:MB},VB=Le({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),BB={kernelName:Uo,backendName:"webgl",kernelFunc:VB},GB=Le({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),UB={kernelName:Wo,backendName:"webgl",kernelFunc:GB},HB=Le({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),jB={kernelName:Go,backendName:"webgl",kernelFunc:HB},qB=Le({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),KB={kernelName:jo,backendName:"webgl",kernelFunc:qB},XB={kernelName:Oi,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,paddings:a}=s;C(r.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const i=o.reduce((y,x)=>y*x),l=[[0,0]];l.push(...a);for(let y=1+o.length;y<r.shape.length;++y)l.push([0,0]);const u=[],c=Ob({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),d=da(c.shape,o,i,!1),h=ha(d.length,o.length,!1),p=pa(c.shape,o,i,!1),f=ue({inputs:{x:c},backend:e,attrs:{shape:d}}),m=tn({inputs:{x:f},backend:e,attrs:{perm:h}}),g=ue({inputs:{x:m},backend:e,attrs:{shape:p}});return u.push(c),u.push(f),u.push(m),u.forEach(y=>e.disposeIntermediateTensorInfo(y)),g}},YB={kernelName:Vp,backendName:"webgl",kernelFunc:function ZB(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:o,defaultValue:a}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,strides:c,outputSize:d}=fa(0,r,i),p=new Pb(u,l,r.shape.length,o.shape.length,c,[d,1],!1),f=e.runWebGLProgram(p,[o,r,a],o.dtype),m=ue({inputs:{x:f},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(f),m}},QB={kernelName:Fi,backendName:"webgl",kernelFunc:function JB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:o,axis:a}=s,i=Te(a,r.shape)[0],l=Md(r,o,i),c=new Array(r.shape.length).fill(0),d=r.shape.slice();return l.map(h=>{const p=[...d];p[i]=h;const f=La({inputs:{x:r},backend:e,attrs:{begin:c,size:p}});return c[i]+=h,f})}},eW=Le({opSnippet:"return sqrt(x);"}),tW={kernelName:qo,backendName:"webgl",kernelFunc:eW},sW={kernelName:rc,backendName:"webgl",kernelFunc:Le({opSnippet:"return x * x;"})},Lb="return (a - b) * (a - b);",rW=Vt({opSnippet:Lb,packedOpSnippet:Lb}),oW={kernelName:Ko,backendName:"webgl",kernelFunc:rW},iW={kernelName:Qo,backendName:"webgl",kernelFunc:function aW({inputs:n,attrs:t,backend:e}){const{x:s}=n,o=new Rs(s.shape,`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return e.runWebGLProgram(o,[s],s.dtype)}};class lW{constructor(t,e,s){this.variableNames=["x"],this.outputShape=s;const r=s.length,o=Ye(s.length),a=Ye(s.length);let i="";if(1===r)i="coords * strides + begin";else{let l=0;i=s.map((u,c)=>(l++,1===s.length?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`\n      ${o} begin = ${o}(${t});\n      ${o} strides = ${o}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const cW={kernelName:oc,backendName:"webgl",kernelFunc:function uW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,end:a,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:h}=s,{nonStrided:p,$begin:f,$strides:m,size:g,newShape:y,outShape:x}=Fc(r.shape,o,a,i,l,u,c,d,h),v=ue({inputs:{x:r},backend:e,attrs:{shape:y}});let b;if(p){const k=La({inputs:{x:v},backend:e,attrs:{begin:f,size:g}});b=ue({inputs:{x:k},backend:e,attrs:{shape:x}}),e.disposeIntermediateTensorInfo(k)}else if(x.some(k=>0===k))b=e.makeTensorInfo(x,r.dtype,[]);else if(e.shouldExecuteOnCPU([v])){const S=e.texData.get(v.dataId).values,_=Ae(v.shape,v.dtype,S),A=nP(x,_,m,f);b=e.makeTensorInfo(x,v.dtype,A.values)}else{const N=new lW(f,m,x);b=e.runWebGLProgram(N,[v],v.dtype)}const w=ue({inputs:{x:b},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(v),e.disposeIntermediateTensorInfo(b),w}},dW=Le({opSnippet:"return tan(x);"}),hW={kernelName:Zo,backendName:"webgl",kernelFunc:dW},pW=Le({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),fW={kernelName:Yo,backendName:"webgl",kernelFunc:pW};class mW{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let a=0;a<s.length;a++)s[a]=t[a]*e[a];this.outputShape=s,this.rank=s.length;const r=Ye(this.rank),o=function gW(n){const t=n.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${n[0]})`;const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let r=0;r<n.length;r++)s.push(`imod(${e[r]}, ${n[r]})`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}function Mb(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:o}=s;if("string"===r.dtype){const u=e.readSync(r.dataId).map(h=>fr(h)),c=Ae(r.shape,r.dtype,u),d=rP(c,o);return e.makeTensorInfo(d.shape,d.dtype,d.values)}const a=new mW(r.shape,o);return e.runWebGLProgram(a,[r],r.dtype)}const yW={kernelName:Jo,backendName:"webgl",kernelFunc:Mb},bW={kernelName:ac,backendName:"webgl",kernelFunc:function xW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:o,sorted:a}=s,i=e.readSync(r.dataId),[l,u]=oP(i,r.shape,r.dtype,o,a);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}},vW={kernelName:ic,backendName:"webgl",kernelFunc:function wW(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:o}=t;Ra(o,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const a=s.readSync(o.dataId),{outputValues:i,outputShape:l,indices:u}=aP(a,r,o.shape,o.dtype);return[s.makeTensorInfo(l,o.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},CW={kernelName:Mi,backendName:"webgl",kernelFunc:function NW(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:o}=s;o<0&&(o+=r.shape.length);const a=r,i=a.shape.length,l=r.shape[o],u=new Array(i-1);let c=0;for(let m=0;m<i;m++)m!==o&&(u[c++]=a.shape[m]);const d=[],h=new Array(i).fill(0),p=a.shape.slice();p[o]=1;const f=new Array(l);for(let m=0;m<f.length;m++){h[o]=m;const g=La({inputs:{x:a},backend:e,attrs:{begin:h,size:p}}),y=ue({inputs:{x:g},backend:e,attrs:{shape:u}});f[m]=y,d.push(g)}return d.forEach(m=>e.disposeIntermediateTensorInfo(m)),f}};class kW{constructor(t,e){this.variableNames=["x","segmentIds"];const s=t.windowSize,r=t.batchSize,o=t.inSize,a=t.numSegments,i=a*Math.ceil(o/s);this.outputShape=[r,i];const c=4*Math.floor(s/4),d=s%4,h="\n        sumValue += dot(values, segFilter);\n    ";let p="";o%s>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${f}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${s}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===d}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${h}\n        } else if (${2===d}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${h}\n        } else if (${3===d}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${h}\n        }\n        setOutput(sumValue);\n      }\n    `}}const TW=[MV,VV,rL,aL,uL,hL,fL,yL,bL,vL,IL,TL,EL,RL,VL,PL,GL,qL,HL,YL,QL,tM,rM,cM,hM,yM,bM,CM,SM,zP,EM,VM,WM,OM,jM,KM,UM,YM,QM,tz,sz,oz,lz,fz,gz,cz,bz,Nz,kz,Tz,$z,Az,Rz,Oz,Pz,Mz,Vz,Wz,Uz,jz,Xz,Jz,eV,sV,iV,uV,dV,MP,pV,$M,mV,yV,bV,BP,vV,CV,IV,$V,TV,DV,RV,FV,WV,ZV,KV,e3,n3,r3,jV,a3,l3,h3,m3,b3,I3,jP,T3,E3,R3,P3,pM,M3,V3,W3,H3,X3,GP,Y3,J3,fM,v3,eB,aB,sB,KP,cB,pB,gB,bB,CB,IB,TB,$B,DB,OB,LB,zB,BB,UB,jB,uM,C3,KB,XB,YB,QB,tW,sW,oW,iW,cW,N3,tL,hW,fW,yW,bW,nL,vW,CW,{kernelName:zi,backendName:"webgl",kernelFunc:function IW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:o}=t,{numSegments:a}=s,i=r.shape.length,l=[];let u=0;const c=xt([u],i);let d=r;null!=c&&(d=tn({inputs:{x:r},backend:e,attrs:{perm:c}}),l.push(d),u=Nt(1,i)[0]);const h=hm(d.shape,u,a),p=V([d.shape[u]]),f=ue({inputs:{x:d},backend:e,attrs:{shape:[-1,p]}});l.push(f);const m=pc(r.dtype),g=(b,w,k,N,S)=>{const _=b.shape[0],A=b.shape[1],z=dm(A,S),G=new kW({windowSize:z,inSize:A,batchSize:_,numSegments:S},w),H=e.compileAndRun(G,[b,k],N);if(l.push(H),H.shape[1]===S)return H;const W=Fb({backend:e,attrs:{start:0,stop:S,step:1,dtype:"float32"}}),B=Mb({inputs:{x:W},backend:e,attrs:{reps:[A/z]}});return l.push(W),l.push(B),g(H,w,B,N,S)},x=ue({inputs:{x:g(f,"unsortedSegmentSum",o,m,a)},backend:e,attrs:{shape:h}});let v=x;if(null!=c){l.push(x);const b=Sr(c);v=tn({inputs:{x:v},backend:e,attrs:{perm:b}})}return l.forEach(b=>e.disposeIntermediateTensorInfo(b)),v}},z3];for(const n of TW)cc(n);var zb=ae(591),Vb=ae(6926),bp=ae(4850),Bb=ae(5778),Wb=ae(5965),$W=ae(4242),Je=ae(4650),EW=ae(4904),DW=ae(7606),AW=ae(878);const RW=["canvas"],bu=(n,t,e,s,r)=>(n-t)*(r-s)/(e-t)+s,OW=[{path:"",component:(()=>{class n extends $W.H{constructor(e,s,r){super(s),this.canvasDraw=r,this.modelSubject=new zb.X({a:NaN,b:NaN}),this.model$=this.modelSubject.pipe((0,Vb.e)(1e3),(0,bp.U)(({a:o,b:a})=>({a:o.toFixed(3),b:a.toFixed(3)})),(0,bp.U)(({a:o,b:a})=>`Y = ${o}X + ${a}`),(0,Bb.x)()),this.costSubject=new zb.X(NaN),this.cost$=this.costSubject.pipe((0,Vb.e)(1e3),(0,bp.U)(o=>o.toFixed(3)),(0,Bb.x)()),this.xs=[],this.ys=[],this._a=rd(Ne(Math.random())),this._b=rd(Ne(Math.random())),e.setTitle("Linear Regression with TensorFlow")}get a(){return this._a.dataSync()[0]}get b(){return this._b.dataSync()[0]}get Ys(){return this.ys}ngOnInit(){this.canvas=this.canvasRef.nativeElement,this.canvasDraw.setCanvas(this.canvas)}onMouseClick(e){var s=this;return(0,M.Z)(function*(){const r=s.normalizeX(e.offsetX),o=s.normalizeY(e.offsetY);s.canvasDraw.setPointOnCanvas(s.denormalizeX(r),s.denormalizeY(o),255,0,0,255),s.xs.push(r),s.ys.push(o),yield s.train(75),yield s.updateCanvas()})()}predict(e){return F(()=>this._a.mul(vn(e)).add(this._b))}normalizeX(e){return bu(e,0,this.canvas.clientWidth,0,1)}denormalizeX(e){return bu(e,0,1,0,this.canvas.clientWidth)}normalizeY(e){return bu(e,0,this.canvas.clientHeight,1,0)}denormalizeY(e){return bu(e,0,1,this.canvas.clientHeight,0)}drawPredictions(e,s){return new Promise(r=>{for(let o=0;o<e.length;o++)this.canvasDraw.setPointOnCanvas(e[o],s[o],255,0,0,255);r()})}drawPoint(){for(let e=0;e<this.xs.length;e++){const s=this.denormalizeX(this.xs[e]),r=this.denormalizeY(this.ys[e]);this.canvasDraw.setPointOnCanvas(s,r,255,0,0,255)}}updateCanvas(){var e=this;return(0,M.Z)(function*(){e.canvasDraw.cleanCanvas(),e.drawPoint();const s=Array.from(Array(e.canvas.clientWidth).keys()).filter(o=>o%2==0),r=e.predict(s.map(e.normalizeX,e)).dataSync().map(e.denormalizeY,e);yield e.drawPredictions(s,r)})()}train(e=50){var s=this;return(0,M.Z)(function*(){const o=Ys.sgd(.5);s._a.assign(Ne(Math.random())),s._b.assign(Ne(Math.random()));for(let a=0;a<e;a++)o.minimize(()=>{const i=vn(s.ys),l=s.predict(s.xs),u=OC.meanSquaredError(i,l);return s.costSubject.next(u.dataSync()[0]),s.modelSubject.next({a:s._a.dataSync()[0],b:s._b.dataSync()[0]}),u}),yield wl()})()}}return n.\u0275fac=function(e){return new(e||n)(Je.Y36(EW.y),Je.Y36(Wb.O),Je.Y36(DW.X))},n.\u0275cmp=Je.Xpm({type:n,selectors:[["app-tfjs-linear-regression"]],viewQuery:function(e,s){if(1&e&&Je.Gf(RW,7),2&e){let r;Je.iGM(r=Je.CRH())&&(s.canvasRef=r.first)}},features:[Je._Bn([Wb.O]),Je.qOj],decls:12,vars:6,consts:[[1,"markdown-container"],["src","assets/blogs/tf-linear-regression.md"],["content",""],[3,"click"],["canvas",""]],template:function(e,s){1&e&&(Je.TgZ(0,"div",0),Je._UZ(1,"app-remarkable",1),Je.qZA(),Je.TgZ(2,"div")(3,"app-remarkable")(4,"pre",null,2),Je._uU(6),Je.ALo(7,"async"),Je.ALo(8,"async"),Je.qZA()()(),Je.TgZ(9,"div")(10,"canvas",3,4),Je.NdJ("click",function(o){return s.onMouseClick(o)}),Je.qZA()()),2&e&&(Je.xp6(6),Je.AsE("$model: ",Je.lcZ(7,2,s.model$),"$\n$cost = ",Je.lcZ(8,4,s.cost$),"$\n    "))},dependencies:[AW.L,Qe.Ov],styles:[".markdown-container[_ngcontent-%COMP%]{padding:2em}canvas[_ngcontent-%COMP%]{width:400px;height:400px;border:black solid}div.fixed-height[_ngcontent-%COMP%]{height:25px}"],changeDetection:0}),n})()}];let FW=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275mod=Je.oAB({type:n}),n.\u0275inj=Je.cJS({imports:[at.Bz.forChild(OW),at.Bz]}),n})();var PW=ae(687);let LW=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275mod=Je.oAB({type:n}),n.\u0275inj=Je.cJS({imports:[Qe.ez,FW,PW.k]}),n})()},340:(Ge,ct,ae)=>{var ze=ae(9471),qt=ae(2992),Ie=ae(7657),Wt=ae(5583),Qe=ae(1929),at=ae(8083),M=ae(3818);M.alea=ze,M.xor128=qt,M.xorwow=Ie,M.xorshift7=Wt,M.xor4096=Qe,M.tychei=at,Ge.exports=M},9471:function(Ge,ct,ae){var ze;!function(qt,Ie,Wt){function Qe(P){var ee=this,ie=function he(){var P=4022871197;return function(ie){ie=ie.toString();for(var T=0;T<ie.length;T++){var J=.02519603282416938*(P+=ie.charCodeAt(T));J-=P=J>>>0,P=(J*=P)>>>0,P+=4294967296*(J-=P)}return 2.3283064365386963e-10*(P>>>0)}}();ee.next=function(){var T=2091639*ee.s0+2.3283064365386963e-10*ee.c;return ee.s0=ee.s1,ee.s1=ee.s2,ee.s2=T-(ee.c=0|T)},ee.c=1,ee.s0=ie(" "),ee.s1=ie(" "),ee.s2=ie(" "),ee.s0-=ie(P),ee.s0<0&&(ee.s0+=1),ee.s1-=ie(P),ee.s1<0&&(ee.s1+=1),ee.s2-=ie(P),ee.s2<0&&(ee.s2+=1),ie=null}function at(P,ee){return ee.c=P.c,ee.s0=P.s0,ee.s1=P.s1,ee.s2=P.s2,ee}function M(P,ee){var ie=new Qe(P),T=ee&&ee.state,J=ie.next;return J.int32=function(){return 4294967296*ie.next()|0},J.double=function(){return J()+11102230246251565e-32*(2097152*J()|0)},J.quick=J,T&&("object"==typeof T&&at(T,ie),J.state=function(){return at(ie,{})}),J}Ie&&Ie.exports?Ie.exports=M:ae.amdD&&ae.amdO?void 0!==(ze=function(){return M}.call(ct,ae,ct,Ie))&&(Ie.exports=ze):this.alea=M}(0,Ge=ae.nmd(Ge))},8083:function(Ge,ct,ae){var ze;!function(qt,Ie,Wt){function Qe(he){var P=this,ee="";P.next=function(){var T=P.b,J=P.c,pe=P.d,ye=P.a;return T=T<<25^T>>>7^J,J=J-pe|0,pe=pe<<24^pe>>>8^ye,ye=ye-T|0,P.b=T=T<<20^T>>>12^J,P.c=J=J-pe|0,P.d=pe<<16^J>>>16^ye,P.a=ye-T|0},P.a=0,P.b=0,P.c=-1640531527,P.d=1367130551,he===Math.floor(he)?(P.a=he/4294967296|0,P.b=0|he):ee+=he;for(var ie=0;ie<ee.length+20;ie++)P.b^=0|ee.charCodeAt(ie),P.next()}function at(he,P){return P.a=he.a,P.b=he.b,P.c=he.c,P.d=he.d,P}function M(he,P){var ee=new Qe(he),ie=P&&P.state,T=function(){return(ee.next()>>>0)/4294967296};return T.double=function(){do{var ye=((ee.next()>>>11)+(ee.next()>>>0)/4294967296)/(1<<21)}while(0===ye);return ye},T.int32=ee.next,T.quick=T,ie&&("object"==typeof ie&&at(ie,ee),T.state=function(){return at(ee,{})}),T}Ie&&Ie.exports?Ie.exports=M:ae.amdD&&ae.amdO?void 0!==(ze=function(){return M}.call(ct,ae,ct,Ie))&&(Ie.exports=ze):this.tychei=M}(0,Ge=ae.nmd(Ge))},2992:function(Ge,ct,ae){var ze;!function(qt,Ie,Wt){function Qe(he){var P=this,ee="";P.x=0,P.y=0,P.z=0,P.w=0,P.next=function(){var T=P.x^P.x<<11;return P.x=P.y,P.y=P.z,P.z=P.w,P.w^=P.w>>>19^T^T>>>8},he===(0|he)?P.x=he:ee+=he;for(var ie=0;ie<ee.length+64;ie++)P.x^=0|ee.charCodeAt(ie),P.next()}function at(he,P){return P.x=he.x,P.y=he.y,P.z=he.z,P.w=he.w,P}function M(he,P){var ee=new Qe(he),ie=P&&P.state,T=function(){return(ee.next()>>>0)/4294967296};return T.double=function(){do{var ye=((ee.next()>>>11)+(ee.next()>>>0)/4294967296)/(1<<21)}while(0===ye);return ye},T.int32=ee.next,T.quick=T,ie&&("object"==typeof ie&&at(ie,ee),T.state=function(){return at(ee,{})}),T}Ie&&Ie.exports?Ie.exports=M:ae.amdD&&ae.amdO?void 0!==(ze=function(){return M}.call(ct,ae,ct,Ie))&&(Ie.exports=ze):this.xor128=M}(0,Ge=ae.nmd(Ge))},1929:function(Ge,ct,ae){var ze;!function(qt,Ie,Wt){function Qe(he){var P=this;P.next=function(){var pe,ye,ie=P.w,T=P.X,J=P.i;return P.w=ie=ie+1640531527|0,ye=T[J+34&127],pe=T[J=J+1&127],ye^=ye<<13,pe^=pe<<17,ye=T[J]=(ye^=ye>>>15)^(pe^=pe>>>12),P.i=J,ye+(ie^ie>>>16)|0},function ee(ie,T){var J,pe,ye,Qt,ns,$n=[],C=128;for(T===(0|T)?(pe=T,T=null):(T+="\0",pe=0,C=Math.max(C,T.length)),ye=0,Qt=-32;Qt<C;++Qt)T&&(pe^=T.charCodeAt((Qt+32)%T.length)),0===Qt&&(ns=pe),pe^=pe<<10,pe^=pe>>>15,pe^=pe<<4,pe^=pe>>>13,Qt>=0&&(ye=0==(J=$n[127&Qt]^=pe+(ns=ns+1640531527|0))?ye+1:0);for(ye>=128&&($n[127&(T&&T.length||0)]=-1),ye=127,Qt=512;Qt>0;--Qt)pe=$n[ye+34&127],J=$n[ye=ye+1&127],pe^=pe<<13,J^=J<<17,$n[ye]=(pe^=pe>>>15)^(J^=J>>>12);ie.w=ns,ie.X=$n,ie.i=ye}(P,he)}function at(he,P){return P.i=he.i,P.w=he.w,P.X=he.X.slice(),P}function M(he,P){null==he&&(he=+new Date);var ee=new Qe(he),ie=P&&P.state,T=function(){return(ee.next()>>>0)/4294967296};return T.double=function(){do{var ye=((ee.next()>>>11)+(ee.next()>>>0)/4294967296)/(1<<21)}while(0===ye);return ye},T.int32=ee.next,T.quick=T,ie&&(ie.X&&at(ie,ee),T.state=function(){return at(ee,{})}),T}Ie&&Ie.exports?Ie.exports=M:ae.amdD&&ae.amdO?void 0!==(ze=function(){return M}.call(ct,ae,ct,Ie))&&(Ie.exports=ze):this.xor4096=M}(0,Ge=ae.nmd(Ge))},5583:function(Ge,ct,ae){var ze;!function(qt,Ie,Wt){function Qe(he){var P=this;P.next=function(){var J,pe,ie=P.x,T=P.i;return J=ie[T],pe=(J^=J>>>7)^J<<24,pe^=(J=ie[T+1&7])^J>>>10,pe^=(J=ie[T+3&7])^J>>>3,pe^=(J=ie[T+4&7])^J<<7,J=ie[T+7&7],ie[T]=pe^=(J^=J<<13)^J<<9,P.i=T+1&7,pe},function ee(ie,T){var J,ye=[];if(T===(0|T))ye[0]=T;else for(T=""+T,J=0;J<T.length;++J)ye[7&J]=ye[7&J]<<15^T.charCodeAt(J)+ye[J+1&7]<<13;for(;ye.length<8;)ye.push(0);for(J=0;J<8&&0===ye[J];++J);for(8==J&&(ye[7]=-1),ie.x=ye,ie.i=0,J=256;J>0;--J)ie.next()}(P,he)}function at(he,P){return P.x=he.x.slice(),P.i=he.i,P}function M(he,P){null==he&&(he=+new Date);var ee=new Qe(he),ie=P&&P.state,T=function(){return(ee.next()>>>0)/4294967296};return T.double=function(){do{var ye=((ee.next()>>>11)+(ee.next()>>>0)/4294967296)/(1<<21)}while(0===ye);return ye},T.int32=ee.next,T.quick=T,ie&&(ie.x&&at(ie,ee),T.state=function(){return at(ee,{})}),T}Ie&&Ie.exports?Ie.exports=M:ae.amdD&&ae.amdO?void 0!==(ze=function(){return M}.call(ct,ae,ct,Ie))&&(Ie.exports=ze):this.xorshift7=M}(0,Ge=ae.nmd(Ge))},7657:function(Ge,ct,ae){var ze;!function(qt,Ie,Wt){function Qe(he){var P=this,ee="";P.next=function(){var T=P.x^P.x>>>2;return P.x=P.y,P.y=P.z,P.z=P.w,P.w=P.v,(P.d=P.d+362437|0)+(P.v=P.v^P.v<<4^T^T<<1)|0},P.x=0,P.y=0,P.z=0,P.w=0,P.v=0,he===(0|he)?P.x=he:ee+=he;for(var ie=0;ie<ee.length+64;ie++)P.x^=0|ee.charCodeAt(ie),ie==ee.length&&(P.d=P.x<<10^P.x>>>4),P.next()}function at(he,P){return P.x=he.x,P.y=he.y,P.z=he.z,P.w=he.w,P.v=he.v,P.d=he.d,P}function M(he,P){var ee=new Qe(he),ie=P&&P.state,T=function(){return(ee.next()>>>0)/4294967296};return T.double=function(){do{var ye=((ee.next()>>>11)+(ee.next()>>>0)/4294967296)/(1<<21)}while(0===ye);return ye},T.int32=ee.next,T.quick=T,ie&&("object"==typeof ie&&at(ie,ee),T.state=function(){return at(ee,{})}),T}Ie&&Ie.exports?Ie.exports=M:ae.amdD&&ae.amdO?void 0!==(ze=function(){return M}.call(ct,ae,ct,Ie))&&(Ie.exports=ze):this.xorwow=M}(0,Ge=ae.nmd(Ge))},3818:(Ge,ct,ae)=>{var ze;!function(qt,Ie){var J,Wt=this,Qe=256,P=Ie.pow(Qe,6),ee=Ie.pow(2,52),ie=2*ee,T=255;function pe(Be,Ve,V){var $t=[],Se=$n(ns((Ve=1==Ve?{entropy:!0}:Ve||{}).entropy?[Be,Me(qt)]:Be??function C(){try{var Be;return J&&(Be=J.randomBytes)?Be=Be(Qe):(Be=new Uint8Array(Qe),(Wt.crypto||Wt.msCrypto).getRandomValues(Be)),Me(Be)}catch{var Ve=Wt.navigator,V=Ve&&Ve.plugins;return[+new Date,Wt,V,Wt.screen,Me(qt)]}}(),3),$t),We=new ye($t),fn=function(){for(var Kt=We.g(6),Vn=P,Gt=0;Kt<ee;)Kt=(Kt+Gt)*Qe,Vn*=Qe,Gt=We.g(1);for(;Kt>=ie;)Kt/=2,Vn/=2,Gt>>>=1;return(Kt+Gt)/Vn};return fn.int32=function(){return 0|We.g(4)},fn.quick=function(){return We.g(4)/4294967296},fn.double=fn,$n(Me(We.S),qt),(Ve.pass||V||function(Kt,Vn,Gt,En){return En&&(En.S&&Qt(En,We),Kt.state=function(){return Qt(We,{})}),Gt?(Ie.random=Kt,Vn):Kt})(fn,Se,"global"in Ve?Ve.global:this==Ie,Ve.state)}function ye(Be){var Ve,V=Be.length,$t=this,Se=0,We=$t.i=$t.j=0,fn=$t.S=[];for(V||(Be=[V++]);Se<Qe;)fn[Se]=Se++;for(Se=0;Se<Qe;Se++)fn[Se]=fn[We=T&We+Be[Se%V]+(Ve=fn[Se])],fn[We]=Ve;($t.g=function(Kt){for(var Vn,Gt=0,En=$t.i,Ms=$t.j,Te=$t.S;Kt--;)Vn=Te[En=T&En+1],Gt=Gt*Qe+Te[T&(Te[En]=Te[Ms=T&Ms+Vn])+(Te[Ms]=Vn)];return $t.i=En,$t.j=Ms,Gt})(Qe)}function Qt(Be,Ve){return Ve.i=Be.i,Ve.j=Be.j,Ve.S=Be.S.slice(),Ve}function ns(Be,Ve){var Se,V=[],$t=typeof Be;if(Ve&&"object"==$t)for(Se in Be)try{V.push(ns(Be[Se],Ve-1))}catch{}return V.length?V:"string"==$t?Be:Be+"\0"}function $n(Be,Ve){for(var $t,V=Be+"",Se=0;Se<V.length;)Ve[T&Se]=T&($t^=19*Ve[T&Se])+V.charCodeAt(Se++);return Me(Ve)}function Me(Be){return String.fromCharCode.apply(0,Be)}if(Ie.seedrandom=pe,$n(Ie.random(),qt),Ge.exports){Ge.exports=pe;try{J=ae(6439)}catch{}}else void 0!==(ze=function(){return pe}.call(ct,ae,ct,Ge))&&(Ge.exports=ze)}([],Math)},5410:()=>{},8628:()=>{},1601:()=>{},7792:()=>{},6439:()=>{}}]);